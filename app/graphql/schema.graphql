schema {
  query: Query
  mutation: Mutation
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

input AddMultiCollectionToTestInput {
  collectionIds: [ID!]!
  testId: ID!
}

type Auth {
  accessToken: String!
  refreshToken: String!
}

input BatchDeleteQuestionPointsInput {
  questionIds: [ID!]!
  testId: ID!
}

input BatchIgnoreQuestionsInput {
  questionIgnoreData: [QuestionIgnoreData!]!
  testId: ID!
}

input BatchUpdateQuestionPointsInput {
  questionPoints: [QuestionPointsInput!]!
  testId: ID!
}

type Course {
  createdAt: DateTime!
  creator: User!
  description: String
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type CourseSection {
  courseId: ID!
  description: String!
  id: ID!
  order: Int!
  sectionId: ID
  title: String!
}

input CourseSectionFilterInput {
  onlyRoot: Boolean
}

input CreateCourseInput {
  description: String
  title: String!
}

input CreateCourseSectionInput {
  courseId: ID!
  description: String!
  sectionId: ID
  title: String!
}

input CreateQuestionCollectionInput {
  description: String
  title: String!
}

input CreateQuestionInput {
  options: [QuestionOptionInput!]!
  points: Int!
  questionCollectionId: ID!
  questionText: String!
}

input CreateQuestionOptionInput {
  isCorrect: Boolean!
  optionText: String!
  questionId: ID!
}

input CreateTestInput {
  courseId: ID
  courseSectionId: ID
  name: String!
  totalTime: Int!
}

input CreateTestSessionInput {
  testId: ID!
  userIds: [ID!]
}

scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addMultiCollectionToTest(input: AddMultiCollectionToTestInput!): Boolean!
  batchIgnoreQuestions(input: BatchIgnoreQuestionsInput!): Boolean!
  createCourse(input: CreateCourseInput!): Course!
  createCourseSection(input: CreateCourseSectionInput!): CourseSection!
  createQuestion(input: CreateQuestionInput!): Question!
  createQuestionCollection(input: CreateQuestionCollectionInput!): QuestionCollection!
  createQuestionOption(input: CreateQuestionOptionInput!): QuestionOption!
  createTest(input: CreateTestInput!): Test!
  createTestSession(input: CreateTestSessionInput!): [TestSession!]!
  createTodo(input: NewTodo!): Todo!
  deleteQuestion(id: ID!): Boolean!
  deleteQuestionCollection(id: ID!): Boolean!
  deleteQuestionOption(id: ID!): Boolean!
  deleteTest(id: ID!): Boolean!
  deleteTestSession(id: ID!): Boolean!
  register(input: RegisterInput!): Auth!
  removeCourse(id: ID!): Boolean!
  removeCourseSection(id: ID!): Boolean!
  renewToken(refreshToken: String!): Auth!
  startTestSession(id: ID!): TestSession!
  submitTestSession(input: SubmitTestSessionInput!, sessionId: ID!): TestSession!
  updateBatchQuestionsByCollection(input: UpdateBatchQuestionsByCollectionInput!): Boolean!
  updateCourse(id: ID!, input: UpdateCourseInput!): Course!
  updateCourseSection(id: ID!, input: UpdateCourseSectionInput!): CourseSection!
  updateQuestion(id: ID!, input: UpdateQuestionInput!): Question!
  updateQuestionCollection(id: ID!, input: UpdateQuestionCollectionInput!): QuestionCollection!
  updateQuestionOption(id: ID!, input: UpdateQuestionOptionInput!): QuestionOption!
  updateTest(id: ID!, input: UpdateTestInput!): Test!
  updateTestQuestionRequirement(input: [UpdateTestQuestionRequirementInput!]!, testId: ID!): Boolean!
}

input NewTodo {
  text: String!
}

type PaginatedCourse {
  items: [Course!]!
  pagination: Pagination!
}

type PaginatedQuestion {
  items: [Question!]!
  pagination: Pagination!
}

type PaginatedQuestionCollection {
  items: [QuestionCollection!]!
  pagination: Pagination!
}

type PaginatedQuestionOption {
  items: [QuestionOption!]!
  pagination: Pagination!
}

type PaginatedTest {
  items: [Test!]!
  pagination: Pagination!
}

type PaginatedTestSession {
  items: [TestSession!]!
  pagination: Pagination!
}

type PaginatedUser {
  items: [User!]!
  pagination: Pagination!
}

type Pagination {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalItems: Int!
  totalPages: Int!
}

input PaginationInput {
  limit: Int
  page: Int
  search: String
}

type Query {
  course(id: ID!): Course!
  courseSection(id: ID!): CourseSection!
  courseSectionsByCourseId(courseId: ID!, filter: CourseSectionFilterInput): [CourseSection!]!
  isAuthenticated: Boolean!
  login(input: LoginInput!): Auth!
  me: User!
  paginatedCourses(paginationInput: PaginationInput): PaginatedCourse!
  paginatedQuestionCollections(paginationInput: PaginationInput): PaginatedQuestionCollection!
  paginatedQuestions(paginationInput: PaginationInput): PaginatedQuestion!
  paginatedTestSessions(paginationInput: PaginationInput): PaginatedTestSession!
  paginatedTests(paginationInput: PaginationInput): PaginatedTest!
  paginatedUsers(paginationInput: PaginationInput): PaginatedUser!
  question(id: ID!): Question!
  questionCollection(id: ID!): QuestionCollection!
  questionOption(id: ID!): QuestionOption!
  questions(ids: [ID!]!): [Question!]!
  test(id: ID!): Test!
  testSession(id: ID!): TestSession!
  todos: [Todo!]!
}

type Question {
  collection: QuestionCollection
  correctOptionCount: Int!
  id: ID!
  options: [QuestionOption!]!
  points: Int!
  questionText: String!
}

type QuestionCollection {
  createdAt: DateTime!
  creator: User!
  description: String
  id: ID!
  questions: [Question!]!
  title: String!
  updatedAt: DateTime!
}

input QuestionIgnoreData {
  questionId: ID!
  reason: String
}

type QuestionOption {
  id: ID!
  isCorrect: Boolean!
  optionText: String!
  question: Question!
}

input QuestionOptionInput {
  isCorrect: Boolean!
  optionText: String!
}

type QuestionOrder {
  order: Int!
  questionId: ID!
}

input QuestionPointsInput {
  points: Int!
  questionId: ID!
}

input RegisterInput {
  email: String!
  password: String!
}

type Role {
  id: ID!
  name: String!
}

input StartTestSessionInput {
  expiredAt: DateTime
  testTimeTaken: Int!
}

input SubmitTestSessionInput {
  answers: [TestSessionAnswerInput!]!
}

type Test {
  id: ID!
  name: String!
  questionCollections: [QuestionCollection!]!
  testIgnoreQuestions: [TestIgnoreQuestion!]!
  testQuestionCounts: [TestQuestionCount!]!
  totalTime: Int
}

type TestIgnoreQuestion {
  id: ID!
  question: Question
  questionId: ID!
  reason: String
  testId: ID!
}

type TestQuestionCount {
  id: ID!
  numberOfQuestions: Int!
  points: Int!
  testId: ID!
}

type TestSession {
  completedAt: DateTime
  createdAt: DateTime!
  expiredAt: DateTime
  id: ID!
  maxPoints: Int!
  orderedQuestions: [QuestionOrder!]!
  pointsEarned: Int!
  questions: [Question!]!
  startedAt: DateTime
  status: TestSessionStatus!
  test: Test!
  testId: ID!
  updatedAt: DateTime!
  userId: ID
}

input TestSessionAnswerInput {
  questionId: ID!
  questionOptionIds: [ID!]!
}

enum TestSessionStatus {
  CANCELLED
  COMPLETED
  EXPIRED
  IN_PROGRESS
  PENDING
}

type Todo {
  id: ID!
  text: String!
}

scalar UUID

input UpdateBatchQuestionsByCollectionInput {
  collectionId: ID!
  questions: [UpdateQuestionData!]!
}

input UpdateCourseInput {
  description: String
  title: String
}

input UpdateCourseSectionInput {
  description: String
  sectionId: ID
  title: String
}

input UpdateQuestionCollectionInput {
  description: String
  title: String
}

input UpdateQuestionData {
  id: ID
  options: [UpdateQuestionOptionInput!]!
  points: Int!
  questionText: String
}

input UpdateQuestionInput {
  options: [QuestionOptionInput!]
  points: Int!
  questionCollectionId: ID
  questionText: String
}

input UpdateQuestionOptionInput {
  isCorrect: Boolean
  optionText: String
}

input UpdateQuestionPointsByCollectionInput {
  collectionId: ID!
  points: Int!
  testId: ID!
}

input UpdateTestInput {
  name: String
  totalTime: Int
}

input UpdateTestQuestionRequirementInput {
  numberOfQuestions: Int!
  pointsPerQuestion: Int!
}

input UpdateTestSessionInput {
  completedAt: DateTime
  totalScore: Int
}

type User {
  email: String!
  firstName: String
  id: ID!
  isActive: Boolean!
  lastName: String
  roles: [Role!]!
  username: String!
}