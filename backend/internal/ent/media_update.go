// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/course"
	"template/internal/ent/media"
	"template/internal/ent/predicate"
	"template/internal/ent/user"
	"template/internal/ent/video"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MediaUpdate) SetCreatedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableCreatedAt(t *time.Time) *MediaUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MediaUpdate) SetUpdatedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MediaUpdate) SetDeletedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDeletedAt(t *time.Time) *MediaUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MediaUpdate) ClearDeletedAt() *MediaUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetFileName sets the "file_name" field.
func (mu *MediaUpdate) SetFileName(s string) *MediaUpdate {
	mu.mutation.SetFileName(s)
	return mu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableFileName(s *string) *MediaUpdate {
	if s != nil {
		mu.SetFileName(*s)
	}
	return mu
}

// SetFileURL sets the "file_url" field.
func (mu *MediaUpdate) SetFileURL(s string) *MediaUpdate {
	mu.mutation.SetFileURL(s)
	return mu
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableFileURL(s *string) *MediaUpdate {
	if s != nil {
		mu.SetFileURL(*s)
	}
	return mu
}

// SetMimeType sets the "mime_type" field.
func (mu *MediaUpdate) SetMimeType(s string) *MediaUpdate {
	mu.mutation.SetMimeType(s)
	return mu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableMimeType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetMimeType(*s)
	}
	return mu
}

// SetUploaderID sets the "uploader_id" field.
func (mu *MediaUpdate) SetUploaderID(u uuid.UUID) *MediaUpdate {
	mu.mutation.SetUploaderID(u)
	return mu
}

// SetNillableUploaderID sets the "uploader_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableUploaderID(u *uuid.UUID) *MediaUpdate {
	if u != nil {
		mu.SetUploaderID(*u)
	}
	return mu
}

// ClearUploaderID clears the value of the "uploader_id" field.
func (mu *MediaUpdate) ClearUploaderID() *MediaUpdate {
	mu.mutation.ClearUploaderID()
	return mu
}

// SetMetadata sets the "metadata" field.
func (mu *MediaUpdate) SetMetadata(m map[string]interface{}) *MediaUpdate {
	mu.mutation.SetMetadata(m)
	return mu
}

// ClearMetadata clears the value of the "metadata" field.
func (mu *MediaUpdate) ClearMetadata() *MediaUpdate {
	mu.mutation.ClearMetadata()
	return mu
}

// AddUserMediumIDs adds the "user_media" edge to the User entity by IDs.
func (mu *MediaUpdate) AddUserMediumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.AddUserMediumIDs(ids...)
	return mu
}

// AddUserMedia adds the "user_media" edges to the User entity.
func (mu *MediaUpdate) AddUserMedia(u ...*User) *MediaUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserMediumIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MediaUpdate) SetUserID(id uuid.UUID) *MediaUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mu *MediaUpdate) SetNillableUserID(id *uuid.UUID) *MediaUpdate {
	if id != nil {
		mu = mu.SetUserID(*id)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MediaUpdate) SetUser(u *User) *MediaUpdate {
	return mu.SetUserID(u.ID)
}

// AddCourseMediumIDs adds the "course_media" edge to the Course entity by IDs.
func (mu *MediaUpdate) AddCourseMediumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.AddCourseMediumIDs(ids...)
	return mu
}

// AddCourseMedia adds the "course_media" edges to the Course entity.
func (mu *MediaUpdate) AddCourseMedia(c ...*Course) *MediaUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCourseMediumIDs(ids...)
}

// AddVideoMediumIDs adds the "video_media" edge to the Video entity by IDs.
func (mu *MediaUpdate) AddVideoMediumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.AddVideoMediumIDs(ids...)
	return mu
}

// AddVideoMedia adds the "video_media" edges to the Video entity.
func (mu *MediaUpdate) AddVideoMedia(v ...*Video) *MediaUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mu.AddVideoMediumIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// ClearUserMedia clears all "user_media" edges to the User entity.
func (mu *MediaUpdate) ClearUserMedia() *MediaUpdate {
	mu.mutation.ClearUserMedia()
	return mu
}

// RemoveUserMediumIDs removes the "user_media" edge to User entities by IDs.
func (mu *MediaUpdate) RemoveUserMediumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.RemoveUserMediumIDs(ids...)
	return mu
}

// RemoveUserMedia removes "user_media" edges to User entities.
func (mu *MediaUpdate) RemoveUserMedia(u ...*User) *MediaUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserMediumIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MediaUpdate) ClearUser() *MediaUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearCourseMedia clears all "course_media" edges to the Course entity.
func (mu *MediaUpdate) ClearCourseMedia() *MediaUpdate {
	mu.mutation.ClearCourseMedia()
	return mu
}

// RemoveCourseMediumIDs removes the "course_media" edge to Course entities by IDs.
func (mu *MediaUpdate) RemoveCourseMediumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.RemoveCourseMediumIDs(ids...)
	return mu
}

// RemoveCourseMedia removes "course_media" edges to Course entities.
func (mu *MediaUpdate) RemoveCourseMedia(c ...*Course) *MediaUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCourseMediumIDs(ids...)
}

// ClearVideoMedia clears all "video_media" edges to the Video entity.
func (mu *MediaUpdate) ClearVideoMedia() *MediaUpdate {
	mu.mutation.ClearVideoMedia()
	return mu
}

// RemoveVideoMediumIDs removes the "video_media" edge to Video entities by IDs.
func (mu *MediaUpdate) RemoveVideoMediumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.RemoveVideoMediumIDs(ids...)
	return mu
}

// RemoveVideoMedia removes "video_media" edges to Video entities.
func (mu *MediaUpdate) RemoveVideoMedia(v ...*Video) *MediaUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mu.RemoveVideoMediumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MediaUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if media.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized media.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := media.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mu *MediaUpdate) check() error {
	if v, ok := mu.mutation.FileName(); ok {
		if err := media.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Media.file_name": %w`, err)}
		}
	}
	if v, ok := mu.mutation.FileURL(); ok {
		if err := media.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "Media.file_url": %w`, err)}
		}
	}
	if v, ok := mu.mutation.MimeType(); ok {
		if err := media.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Media.mime_type": %w`, err)}
		}
	}
	return nil
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(media.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(media.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(media.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.FileName(); ok {
		_spec.SetField(media.FieldFileName, field.TypeString, value)
	}
	if value, ok := mu.mutation.FileURL(); ok {
		_spec.SetField(media.FieldFileURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
	}
	if value, ok := mu.mutation.Metadata(); ok {
		_spec.SetField(media.FieldMetadata, field.TypeJSON, value)
	}
	if mu.mutation.MetadataCleared() {
		_spec.ClearField(media.FieldMetadata, field.TypeJSON)
	}
	if mu.mutation.UserMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.UserMediaTable,
			Columns: []string{media.UserMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUserMediaIDs(); len(nodes) > 0 && !mu.mutation.UserMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.UserMediaTable,
			Columns: []string{media.UserMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserMediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.UserMediaTable,
			Columns: []string{media.UserMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CourseMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.CourseMediaTable,
			Columns: []string{media.CourseMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCourseMediaIDs(); len(nodes) > 0 && !mu.mutation.CourseMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.CourseMediaTable,
			Columns: []string{media.CourseMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CourseMediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.CourseMediaTable,
			Columns: []string{media.CourseMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.VideoMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.VideoMediaTable,
			Columns: []string{media.VideoMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedVideoMediaIDs(); len(nodes) > 0 && !mu.mutation.VideoMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.VideoMediaTable,
			Columns: []string{media.VideoMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.VideoMediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.VideoMediaTable,
			Columns: []string{media.VideoMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetCreatedAt sets the "created_at" field.
func (muo *MediaUpdateOne) SetCreatedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableCreatedAt(t *time.Time) *MediaUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MediaUpdateOne) SetUpdatedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MediaUpdateOne) SetDeletedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDeletedAt(t *time.Time) *MediaUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MediaUpdateOne) ClearDeletedAt() *MediaUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetFileName sets the "file_name" field.
func (muo *MediaUpdateOne) SetFileName(s string) *MediaUpdateOne {
	muo.mutation.SetFileName(s)
	return muo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableFileName(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetFileName(*s)
	}
	return muo
}

// SetFileURL sets the "file_url" field.
func (muo *MediaUpdateOne) SetFileURL(s string) *MediaUpdateOne {
	muo.mutation.SetFileURL(s)
	return muo
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableFileURL(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetFileURL(*s)
	}
	return muo
}

// SetMimeType sets the "mime_type" field.
func (muo *MediaUpdateOne) SetMimeType(s string) *MediaUpdateOne {
	muo.mutation.SetMimeType(s)
	return muo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableMimeType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetMimeType(*s)
	}
	return muo
}

// SetUploaderID sets the "uploader_id" field.
func (muo *MediaUpdateOne) SetUploaderID(u uuid.UUID) *MediaUpdateOne {
	muo.mutation.SetUploaderID(u)
	return muo
}

// SetNillableUploaderID sets the "uploader_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUploaderID(u *uuid.UUID) *MediaUpdateOne {
	if u != nil {
		muo.SetUploaderID(*u)
	}
	return muo
}

// ClearUploaderID clears the value of the "uploader_id" field.
func (muo *MediaUpdateOne) ClearUploaderID() *MediaUpdateOne {
	muo.mutation.ClearUploaderID()
	return muo
}

// SetMetadata sets the "metadata" field.
func (muo *MediaUpdateOne) SetMetadata(m map[string]interface{}) *MediaUpdateOne {
	muo.mutation.SetMetadata(m)
	return muo
}

// ClearMetadata clears the value of the "metadata" field.
func (muo *MediaUpdateOne) ClearMetadata() *MediaUpdateOne {
	muo.mutation.ClearMetadata()
	return muo
}

// AddUserMediumIDs adds the "user_media" edge to the User entity by IDs.
func (muo *MediaUpdateOne) AddUserMediumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.AddUserMediumIDs(ids...)
	return muo
}

// AddUserMedia adds the "user_media" edges to the User entity.
func (muo *MediaUpdateOne) AddUserMedia(u ...*User) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserMediumIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MediaUpdateOne) SetUserID(id uuid.UUID) *MediaUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUserID(id *uuid.UUID) *MediaUpdateOne {
	if id != nil {
		muo = muo.SetUserID(*id)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MediaUpdateOne) SetUser(u *User) *MediaUpdateOne {
	return muo.SetUserID(u.ID)
}

// AddCourseMediumIDs adds the "course_media" edge to the Course entity by IDs.
func (muo *MediaUpdateOne) AddCourseMediumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.AddCourseMediumIDs(ids...)
	return muo
}

// AddCourseMedia adds the "course_media" edges to the Course entity.
func (muo *MediaUpdateOne) AddCourseMedia(c ...*Course) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCourseMediumIDs(ids...)
}

// AddVideoMediumIDs adds the "video_media" edge to the Video entity by IDs.
func (muo *MediaUpdateOne) AddVideoMediumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.AddVideoMediumIDs(ids...)
	return muo
}

// AddVideoMedia adds the "video_media" edges to the Video entity.
func (muo *MediaUpdateOne) AddVideoMedia(v ...*Video) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return muo.AddVideoMediumIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// ClearUserMedia clears all "user_media" edges to the User entity.
func (muo *MediaUpdateOne) ClearUserMedia() *MediaUpdateOne {
	muo.mutation.ClearUserMedia()
	return muo
}

// RemoveUserMediumIDs removes the "user_media" edge to User entities by IDs.
func (muo *MediaUpdateOne) RemoveUserMediumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.RemoveUserMediumIDs(ids...)
	return muo
}

// RemoveUserMedia removes "user_media" edges to User entities.
func (muo *MediaUpdateOne) RemoveUserMedia(u ...*User) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserMediumIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MediaUpdateOne) ClearUser() *MediaUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearCourseMedia clears all "course_media" edges to the Course entity.
func (muo *MediaUpdateOne) ClearCourseMedia() *MediaUpdateOne {
	muo.mutation.ClearCourseMedia()
	return muo
}

// RemoveCourseMediumIDs removes the "course_media" edge to Course entities by IDs.
func (muo *MediaUpdateOne) RemoveCourseMediumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.RemoveCourseMediumIDs(ids...)
	return muo
}

// RemoveCourseMedia removes "course_media" edges to Course entities.
func (muo *MediaUpdateOne) RemoveCourseMedia(c ...*Course) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCourseMediumIDs(ids...)
}

// ClearVideoMedia clears all "video_media" edges to the Video entity.
func (muo *MediaUpdateOne) ClearVideoMedia() *MediaUpdateOne {
	muo.mutation.ClearVideoMedia()
	return muo
}

// RemoveVideoMediumIDs removes the "video_media" edge to Video entities by IDs.
func (muo *MediaUpdateOne) RemoveVideoMediumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.RemoveVideoMediumIDs(ids...)
	return muo
}

// RemoveVideoMedia removes "video_media" edges to Video entities.
func (muo *MediaUpdateOne) RemoveVideoMedia(v ...*Video) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return muo.RemoveVideoMediumIDs(ids...)
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MediaUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if media.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized media.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := media.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (muo *MediaUpdateOne) check() error {
	if v, ok := muo.mutation.FileName(); ok {
		if err := media.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Media.file_name": %w`, err)}
		}
	}
	if v, ok := muo.mutation.FileURL(); ok {
		if err := media.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "Media.file_url": %w`, err)}
		}
	}
	if v, ok := muo.mutation.MimeType(); ok {
		if err := media.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Media.mime_type": %w`, err)}
		}
	}
	return nil
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(media.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(media.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(media.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.FileName(); ok {
		_spec.SetField(media.FieldFileName, field.TypeString, value)
	}
	if value, ok := muo.mutation.FileURL(); ok {
		_spec.SetField(media.FieldFileURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
	}
	if value, ok := muo.mutation.Metadata(); ok {
		_spec.SetField(media.FieldMetadata, field.TypeJSON, value)
	}
	if muo.mutation.MetadataCleared() {
		_spec.ClearField(media.FieldMetadata, field.TypeJSON)
	}
	if muo.mutation.UserMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.UserMediaTable,
			Columns: []string{media.UserMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUserMediaIDs(); len(nodes) > 0 && !muo.mutation.UserMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.UserMediaTable,
			Columns: []string{media.UserMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserMediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.UserMediaTable,
			Columns: []string{media.UserMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CourseMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.CourseMediaTable,
			Columns: []string{media.CourseMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCourseMediaIDs(); len(nodes) > 0 && !muo.mutation.CourseMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.CourseMediaTable,
			Columns: []string{media.CourseMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CourseMediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.CourseMediaTable,
			Columns: []string{media.CourseMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.VideoMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.VideoMediaTable,
			Columns: []string{media.VideoMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedVideoMediaIDs(); len(nodes) > 0 && !muo.mutation.VideoMediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.VideoMediaTable,
			Columns: []string{media.VideoMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.VideoMediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.VideoMediaTable,
			Columns: []string{media.VideoMediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
