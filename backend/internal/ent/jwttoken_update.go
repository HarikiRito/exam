// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/jwttoken"
	"template/internal/ent/predicate"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JwtTokenUpdate is the builder for updating JwtToken entities.
type JwtTokenUpdate struct {
	config
	hooks    []Hook
	mutation *JwtTokenMutation
}

// Where appends a list predicates to the JwtTokenUpdate builder.
func (jtu *JwtTokenUpdate) Where(ps ...predicate.JwtToken) *JwtTokenUpdate {
	jtu.mutation.Where(ps...)
	return jtu
}

// SetCreatedAt sets the "created_at" field.
func (jtu *JwtTokenUpdate) SetCreatedAt(t time.Time) *JwtTokenUpdate {
	jtu.mutation.SetCreatedAt(t)
	return jtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableCreatedAt(t *time.Time) *JwtTokenUpdate {
	if t != nil {
		jtu.SetCreatedAt(*t)
	}
	return jtu
}

// SetUpdatedAt sets the "updated_at" field.
func (jtu *JwtTokenUpdate) SetUpdatedAt(t time.Time) *JwtTokenUpdate {
	jtu.mutation.SetUpdatedAt(t)
	return jtu
}

// SetDeletedAt sets the "deleted_at" field.
func (jtu *JwtTokenUpdate) SetDeletedAt(t time.Time) *JwtTokenUpdate {
	jtu.mutation.SetDeletedAt(t)
	return jtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableDeletedAt(t *time.Time) *JwtTokenUpdate {
	if t != nil {
		jtu.SetDeletedAt(*t)
	}
	return jtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jtu *JwtTokenUpdate) ClearDeletedAt() *JwtTokenUpdate {
	jtu.mutation.ClearDeletedAt()
	return jtu
}

// SetUserID sets the "user_id" field.
func (jtu *JwtTokenUpdate) SetUserID(u uuid.UUID) *JwtTokenUpdate {
	jtu.mutation.SetUserID(u)
	return jtu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableUserID(u *uuid.UUID) *JwtTokenUpdate {
	if u != nil {
		jtu.SetUserID(*u)
	}
	return jtu
}

// SetAccessToken sets the "access_token" field.
func (jtu *JwtTokenUpdate) SetAccessToken(s string) *JwtTokenUpdate {
	jtu.mutation.SetAccessToken(s)
	return jtu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableAccessToken(s *string) *JwtTokenUpdate {
	if s != nil {
		jtu.SetAccessToken(*s)
	}
	return jtu
}

// SetRefreshToken sets the "refresh_token" field.
func (jtu *JwtTokenUpdate) SetRefreshToken(s string) *JwtTokenUpdate {
	jtu.mutation.SetRefreshToken(s)
	return jtu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableRefreshToken(s *string) *JwtTokenUpdate {
	if s != nil {
		jtu.SetRefreshToken(*s)
	}
	return jtu
}

// SetExpiresAt sets the "expires_at" field.
func (jtu *JwtTokenUpdate) SetExpiresAt(t time.Time) *JwtTokenUpdate {
	jtu.mutation.SetExpiresAt(t)
	return jtu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (jtu *JwtTokenUpdate) SetNillableExpiresAt(t *time.Time) *JwtTokenUpdate {
	if t != nil {
		jtu.SetExpiresAt(*t)
	}
	return jtu
}

// SetUser sets the "user" edge to the User entity.
func (jtu *JwtTokenUpdate) SetUser(u *User) *JwtTokenUpdate {
	return jtu.SetUserID(u.ID)
}

// Mutation returns the JwtTokenMutation object of the builder.
func (jtu *JwtTokenUpdate) Mutation() *JwtTokenMutation {
	return jtu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jtu *JwtTokenUpdate) ClearUser() *JwtTokenUpdate {
	jtu.mutation.ClearUser()
	return jtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jtu *JwtTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := jtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, jtu.sqlSave, jtu.mutation, jtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtu *JwtTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := jtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jtu *JwtTokenUpdate) Exec(ctx context.Context) error {
	_, err := jtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtu *JwtTokenUpdate) ExecX(ctx context.Context) {
	if err := jtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtu *JwtTokenUpdate) defaults() error {
	if _, ok := jtu.mutation.UpdatedAt(); !ok {
		if jwttoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized jwttoken.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := jwttoken.UpdateDefaultUpdatedAt()
		jtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jtu *JwtTokenUpdate) check() error {
	if jtu.mutation.UserCleared() && len(jtu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JwtToken.user"`)
	}
	return nil
}

func (jtu *JwtTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jwttoken.Table, jwttoken.Columns, sqlgraph.NewFieldSpec(jwttoken.FieldID, field.TypeUUID))
	if ps := jtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtu.mutation.CreatedAt(); ok {
		_spec.SetField(jwttoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jtu.mutation.UpdatedAt(); ok {
		_spec.SetField(jwttoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jtu.mutation.DeletedAt(); ok {
		_spec.SetField(jwttoken.FieldDeletedAt, field.TypeTime, value)
	}
	if jtu.mutation.DeletedAtCleared() {
		_spec.ClearField(jwttoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jtu.mutation.AccessToken(); ok {
		_spec.SetField(jwttoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := jtu.mutation.RefreshToken(); ok {
		_spec.SetField(jwttoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := jtu.mutation.ExpiresAt(); ok {
		_spec.SetField(jwttoken.FieldExpiresAt, field.TypeTime, value)
	}
	if jtu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.UserTable,
			Columns: []string{jwttoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.UserTable,
			Columns: []string{jwttoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jtu.mutation.done = true
	return n, nil
}

// JwtTokenUpdateOne is the builder for updating a single JwtToken entity.
type JwtTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JwtTokenMutation
}

// SetCreatedAt sets the "created_at" field.
func (jtuo *JwtTokenUpdateOne) SetCreatedAt(t time.Time) *JwtTokenUpdateOne {
	jtuo.mutation.SetCreatedAt(t)
	return jtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *JwtTokenUpdateOne {
	if t != nil {
		jtuo.SetCreatedAt(*t)
	}
	return jtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jtuo *JwtTokenUpdateOne) SetUpdatedAt(t time.Time) *JwtTokenUpdateOne {
	jtuo.mutation.SetUpdatedAt(t)
	return jtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jtuo *JwtTokenUpdateOne) SetDeletedAt(t time.Time) *JwtTokenUpdateOne {
	jtuo.mutation.SetDeletedAt(t)
	return jtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *JwtTokenUpdateOne {
	if t != nil {
		jtuo.SetDeletedAt(*t)
	}
	return jtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jtuo *JwtTokenUpdateOne) ClearDeletedAt() *JwtTokenUpdateOne {
	jtuo.mutation.ClearDeletedAt()
	return jtuo
}

// SetUserID sets the "user_id" field.
func (jtuo *JwtTokenUpdateOne) SetUserID(u uuid.UUID) *JwtTokenUpdateOne {
	jtuo.mutation.SetUserID(u)
	return jtuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableUserID(u *uuid.UUID) *JwtTokenUpdateOne {
	if u != nil {
		jtuo.SetUserID(*u)
	}
	return jtuo
}

// SetAccessToken sets the "access_token" field.
func (jtuo *JwtTokenUpdateOne) SetAccessToken(s string) *JwtTokenUpdateOne {
	jtuo.mutation.SetAccessToken(s)
	return jtuo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableAccessToken(s *string) *JwtTokenUpdateOne {
	if s != nil {
		jtuo.SetAccessToken(*s)
	}
	return jtuo
}

// SetRefreshToken sets the "refresh_token" field.
func (jtuo *JwtTokenUpdateOne) SetRefreshToken(s string) *JwtTokenUpdateOne {
	jtuo.mutation.SetRefreshToken(s)
	return jtuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableRefreshToken(s *string) *JwtTokenUpdateOne {
	if s != nil {
		jtuo.SetRefreshToken(*s)
	}
	return jtuo
}

// SetExpiresAt sets the "expires_at" field.
func (jtuo *JwtTokenUpdateOne) SetExpiresAt(t time.Time) *JwtTokenUpdateOne {
	jtuo.mutation.SetExpiresAt(t)
	return jtuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (jtuo *JwtTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *JwtTokenUpdateOne {
	if t != nil {
		jtuo.SetExpiresAt(*t)
	}
	return jtuo
}

// SetUser sets the "user" edge to the User entity.
func (jtuo *JwtTokenUpdateOne) SetUser(u *User) *JwtTokenUpdateOne {
	return jtuo.SetUserID(u.ID)
}

// Mutation returns the JwtTokenMutation object of the builder.
func (jtuo *JwtTokenUpdateOne) Mutation() *JwtTokenMutation {
	return jtuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jtuo *JwtTokenUpdateOne) ClearUser() *JwtTokenUpdateOne {
	jtuo.mutation.ClearUser()
	return jtuo
}

// Where appends a list predicates to the JwtTokenUpdate builder.
func (jtuo *JwtTokenUpdateOne) Where(ps ...predicate.JwtToken) *JwtTokenUpdateOne {
	jtuo.mutation.Where(ps...)
	return jtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jtuo *JwtTokenUpdateOne) Select(field string, fields ...string) *JwtTokenUpdateOne {
	jtuo.fields = append([]string{field}, fields...)
	return jtuo
}

// Save executes the query and returns the updated JwtToken entity.
func (jtuo *JwtTokenUpdateOne) Save(ctx context.Context) (*JwtToken, error) {
	if err := jtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, jtuo.sqlSave, jtuo.mutation, jtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtuo *JwtTokenUpdateOne) SaveX(ctx context.Context) *JwtToken {
	node, err := jtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jtuo *JwtTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := jtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtuo *JwtTokenUpdateOne) ExecX(ctx context.Context) {
	if err := jtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtuo *JwtTokenUpdateOne) defaults() error {
	if _, ok := jtuo.mutation.UpdatedAt(); !ok {
		if jwttoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized jwttoken.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := jwttoken.UpdateDefaultUpdatedAt()
		jtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (jtuo *JwtTokenUpdateOne) check() error {
	if jtuo.mutation.UserCleared() && len(jtuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JwtToken.user"`)
	}
	return nil
}

func (jtuo *JwtTokenUpdateOne) sqlSave(ctx context.Context) (_node *JwtToken, err error) {
	if err := jtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jwttoken.Table, jwttoken.Columns, sqlgraph.NewFieldSpec(jwttoken.FieldID, field.TypeUUID))
	id, ok := jtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JwtToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jwttoken.FieldID)
		for _, f := range fields {
			if !jwttoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jwttoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtuo.mutation.CreatedAt(); ok {
		_spec.SetField(jwttoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jwttoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jtuo.mutation.DeletedAt(); ok {
		_spec.SetField(jwttoken.FieldDeletedAt, field.TypeTime, value)
	}
	if jtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jwttoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := jtuo.mutation.AccessToken(); ok {
		_spec.SetField(jwttoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.RefreshToken(); ok {
		_spec.SetField(jwttoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.ExpiresAt(); ok {
		_spec.SetField(jwttoken.FieldExpiresAt, field.TypeTime, value)
	}
	if jtuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.UserTable,
			Columns: []string{jwttoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jtuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jwttoken.UserTable,
			Columns: []string{jwttoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JwtToken{config: jtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwttoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jtuo.mutation.done = true
	return _node, nil
}
