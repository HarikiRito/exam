// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"template/internal/ent/predicate"
	"template/internal/ent/testignorequestion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestIgnoreQuestionDelete is the builder for deleting a TestIgnoreQuestion entity.
type TestIgnoreQuestionDelete struct {
	config
	hooks    []Hook
	mutation *TestIgnoreQuestionMutation
}

// Where appends a list predicates to the TestIgnoreQuestionDelete builder.
func (tiqd *TestIgnoreQuestionDelete) Where(ps ...predicate.TestIgnoreQuestion) *TestIgnoreQuestionDelete {
	tiqd.mutation.Where(ps...)
	return tiqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tiqd *TestIgnoreQuestionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tiqd.sqlExec, tiqd.mutation, tiqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tiqd *TestIgnoreQuestionDelete) ExecX(ctx context.Context) int {
	n, err := tiqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tiqd *TestIgnoreQuestionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testignorequestion.Table, sqlgraph.NewFieldSpec(testignorequestion.FieldID, field.TypeUUID))
	if ps := tiqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tiqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tiqd.mutation.done = true
	return affected, err
}

// TestIgnoreQuestionDeleteOne is the builder for deleting a single TestIgnoreQuestion entity.
type TestIgnoreQuestionDeleteOne struct {
	tiqd *TestIgnoreQuestionDelete
}

// Where appends a list predicates to the TestIgnoreQuestionDelete builder.
func (tiqdo *TestIgnoreQuestionDeleteOne) Where(ps ...predicate.TestIgnoreQuestion) *TestIgnoreQuestionDeleteOne {
	tiqdo.tiqd.mutation.Where(ps...)
	return tiqdo
}

// Exec executes the deletion query.
func (tiqdo *TestIgnoreQuestionDeleteOne) Exec(ctx context.Context) error {
	n, err := tiqdo.tiqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testignorequestion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tiqdo *TestIgnoreQuestionDeleteOne) ExecX(ctx context.Context) {
	if err := tiqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
