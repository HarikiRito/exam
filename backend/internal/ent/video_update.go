// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/media"
	"template/internal/ent/predicate"
	"template/internal/ent/video"
	"template/internal/ent/videoquestiontimestamp"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VideoUpdate is the builder for updating Video entities.
type VideoUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMutation
}

// Where appends a list predicates to the VideoUpdate builder.
func (vu *VideoUpdate) Where(ps ...predicate.Video) *VideoUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VideoUpdate) SetCreatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCreatedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VideoUpdate) SetUpdatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VideoUpdate) SetDeletedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDeletedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VideoUpdate) ClearDeletedAt() *VideoUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetSectionID sets the "section_id" field.
func (vu *VideoUpdate) SetSectionID(u uuid.UUID) *VideoUpdate {
	vu.mutation.SetSectionID(u)
	return vu
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableSectionID(u *uuid.UUID) *VideoUpdate {
	if u != nil {
		vu.SetSectionID(*u)
	}
	return vu
}

// SetTitle sets the "title" field.
func (vu *VideoUpdate) SetTitle(s string) *VideoUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableTitle(s *string) *VideoUpdate {
	if s != nil {
		vu.SetTitle(*s)
	}
	return vu
}

// SetDescription sets the "description" field.
func (vu *VideoUpdate) SetDescription(s string) *VideoUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDescription(s *string) *VideoUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VideoUpdate) ClearDescription() *VideoUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetMediaID sets the "media_id" field.
func (vu *VideoUpdate) SetMediaID(u uuid.UUID) *VideoUpdate {
	vu.mutation.SetMediaID(u)
	return vu
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableMediaID(u *uuid.UUID) *VideoUpdate {
	if u != nil {
		vu.SetMediaID(*u)
	}
	return vu
}

// SetCourseID sets the "course_id" field.
func (vu *VideoUpdate) SetCourseID(u uuid.UUID) *VideoUpdate {
	vu.mutation.SetCourseID(u)
	return vu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCourseID(u *uuid.UUID) *VideoUpdate {
	if u != nil {
		vu.SetCourseID(*u)
	}
	return vu
}

// SetDuration sets the "duration" field.
func (vu *VideoUpdate) SetDuration(i int) *VideoUpdate {
	vu.mutation.ResetDuration()
	vu.mutation.SetDuration(i)
	return vu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDuration(i *int) *VideoUpdate {
	if i != nil {
		vu.SetDuration(*i)
	}
	return vu
}

// AddDuration adds i to the "duration" field.
func (vu *VideoUpdate) AddDuration(i int) *VideoUpdate {
	vu.mutation.AddDuration(i)
	return vu
}

// ClearDuration clears the value of the "duration" field.
func (vu *VideoUpdate) ClearDuration() *VideoUpdate {
	vu.mutation.ClearDuration()
	return vu
}

// SetCourseSectionID sets the "course_section" edge to the CourseSection entity by ID.
func (vu *VideoUpdate) SetCourseSectionID(id uuid.UUID) *VideoUpdate {
	vu.mutation.SetCourseSectionID(id)
	return vu
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (vu *VideoUpdate) SetCourseSection(c *CourseSection) *VideoUpdate {
	return vu.SetCourseSectionID(c.ID)
}

// SetMedia sets the "media" edge to the Media entity.
func (vu *VideoUpdate) SetMedia(m *Media) *VideoUpdate {
	return vu.SetMediaID(m.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (vu *VideoUpdate) SetCourse(c *Course) *VideoUpdate {
	return vu.SetCourseID(c.ID)
}

// AddVideoQuestionTimestampsVideoIDs adds the "video_question_timestamps_video" edge to the VideoQuestionTimestamp entity by IDs.
func (vu *VideoUpdate) AddVideoQuestionTimestampsVideoIDs(ids ...uuid.UUID) *VideoUpdate {
	vu.mutation.AddVideoQuestionTimestampsVideoIDs(ids...)
	return vu
}

// AddVideoQuestionTimestampsVideo adds the "video_question_timestamps_video" edges to the VideoQuestionTimestamp entity.
func (vu *VideoUpdate) AddVideoQuestionTimestampsVideo(v ...*VideoQuestionTimestamp) *VideoUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddVideoQuestionTimestampsVideoIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vu *VideoUpdate) Mutation() *VideoMutation {
	return vu.mutation
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (vu *VideoUpdate) ClearCourseSection() *VideoUpdate {
	vu.mutation.ClearCourseSection()
	return vu
}

// ClearMedia clears the "media" edge to the Media entity.
func (vu *VideoUpdate) ClearMedia() *VideoUpdate {
	vu.mutation.ClearMedia()
	return vu
}

// ClearCourse clears the "course" edge to the Course entity.
func (vu *VideoUpdate) ClearCourse() *VideoUpdate {
	vu.mutation.ClearCourse()
	return vu
}

// ClearVideoQuestionTimestampsVideo clears all "video_question_timestamps_video" edges to the VideoQuestionTimestamp entity.
func (vu *VideoUpdate) ClearVideoQuestionTimestampsVideo() *VideoUpdate {
	vu.mutation.ClearVideoQuestionTimestampsVideo()
	return vu
}

// RemoveVideoQuestionTimestampsVideoIDs removes the "video_question_timestamps_video" edge to VideoQuestionTimestamp entities by IDs.
func (vu *VideoUpdate) RemoveVideoQuestionTimestampsVideoIDs(ids ...uuid.UUID) *VideoUpdate {
	vu.mutation.RemoveVideoQuestionTimestampsVideoIDs(ids...)
	return vu
}

// RemoveVideoQuestionTimestampsVideo removes "video_question_timestamps_video" edges to VideoQuestionTimestamp entities.
func (vu *VideoUpdate) RemoveVideoQuestionTimestampsVideo(v ...*VideoQuestionTimestamp) *VideoUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveVideoQuestionTimestampsVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideoUpdate) Save(ctx context.Context) (int, error) {
	if err := vu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideoUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideoUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideoUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VideoUpdate) defaults() error {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		if video.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized video.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := video.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vu *VideoUpdate) check() error {
	if v, ok := vu.mutation.Title(); ok {
		if err := video.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Video.title": %w`, err)}
		}
	}
	if vu.mutation.CourseSectionCleared() && len(vu.mutation.CourseSectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Video.course_section"`)
	}
	if vu.mutation.MediaCleared() && len(vu.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Video.media"`)
	}
	if vu.mutation.CourseCleared() && len(vu.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Video.course"`)
	}
	return nil
}

func (vu *VideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(video.Table, video.Columns, sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(video.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(video.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(video.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(video.FieldDescription, field.TypeString, value)
	}
	if vu.mutation.DescriptionCleared() {
		_spec.ClearField(video.FieldDescription, field.TypeString)
	}
	if value, ok := vu.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedDuration(); ok {
		_spec.AddField(video.FieldDuration, field.TypeInt, value)
	}
	if vu.mutation.DurationCleared() {
		_spec.ClearField(video.FieldDuration, field.TypeInt)
	}
	if vu.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseSectionTable,
			Columns: []string{video.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseSectionTable,
			Columns: []string{video.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.MediaTable,
			Columns: []string{video.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.MediaTable,
			Columns: []string{video.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseTable,
			Columns: []string{video.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseTable,
			Columns: []string{video.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VideoQuestionTimestampsVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoQuestionTimestampsVideoTable,
			Columns: []string{video.VideoQuestionTimestampsVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVideoQuestionTimestampsVideoIDs(); len(nodes) > 0 && !vu.mutation.VideoQuestionTimestampsVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoQuestionTimestampsVideoTable,
			Columns: []string{video.VideoQuestionTimestampsVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VideoQuestionTimestampsVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoQuestionTimestampsVideoTable,
			Columns: []string{video.VideoQuestionTimestampsVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideoUpdateOne is the builder for updating a single Video entity.
type VideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMutation
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VideoUpdateOne) SetCreatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCreatedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VideoUpdateOne) SetUpdatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VideoUpdateOne) SetDeletedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDeletedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VideoUpdateOne) ClearDeletedAt() *VideoUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetSectionID sets the "section_id" field.
func (vuo *VideoUpdateOne) SetSectionID(u uuid.UUID) *VideoUpdateOne {
	vuo.mutation.SetSectionID(u)
	return vuo
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableSectionID(u *uuid.UUID) *VideoUpdateOne {
	if u != nil {
		vuo.SetSectionID(*u)
	}
	return vuo
}

// SetTitle sets the "title" field.
func (vuo *VideoUpdateOne) SetTitle(s string) *VideoUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableTitle(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetTitle(*s)
	}
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VideoUpdateOne) SetDescription(s string) *VideoUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDescription(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VideoUpdateOne) ClearDescription() *VideoUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetMediaID sets the "media_id" field.
func (vuo *VideoUpdateOne) SetMediaID(u uuid.UUID) *VideoUpdateOne {
	vuo.mutation.SetMediaID(u)
	return vuo
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableMediaID(u *uuid.UUID) *VideoUpdateOne {
	if u != nil {
		vuo.SetMediaID(*u)
	}
	return vuo
}

// SetCourseID sets the "course_id" field.
func (vuo *VideoUpdateOne) SetCourseID(u uuid.UUID) *VideoUpdateOne {
	vuo.mutation.SetCourseID(u)
	return vuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCourseID(u *uuid.UUID) *VideoUpdateOne {
	if u != nil {
		vuo.SetCourseID(*u)
	}
	return vuo
}

// SetDuration sets the "duration" field.
func (vuo *VideoUpdateOne) SetDuration(i int) *VideoUpdateOne {
	vuo.mutation.ResetDuration()
	vuo.mutation.SetDuration(i)
	return vuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDuration(i *int) *VideoUpdateOne {
	if i != nil {
		vuo.SetDuration(*i)
	}
	return vuo
}

// AddDuration adds i to the "duration" field.
func (vuo *VideoUpdateOne) AddDuration(i int) *VideoUpdateOne {
	vuo.mutation.AddDuration(i)
	return vuo
}

// ClearDuration clears the value of the "duration" field.
func (vuo *VideoUpdateOne) ClearDuration() *VideoUpdateOne {
	vuo.mutation.ClearDuration()
	return vuo
}

// SetCourseSectionID sets the "course_section" edge to the CourseSection entity by ID.
func (vuo *VideoUpdateOne) SetCourseSectionID(id uuid.UUID) *VideoUpdateOne {
	vuo.mutation.SetCourseSectionID(id)
	return vuo
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (vuo *VideoUpdateOne) SetCourseSection(c *CourseSection) *VideoUpdateOne {
	return vuo.SetCourseSectionID(c.ID)
}

// SetMedia sets the "media" edge to the Media entity.
func (vuo *VideoUpdateOne) SetMedia(m *Media) *VideoUpdateOne {
	return vuo.SetMediaID(m.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (vuo *VideoUpdateOne) SetCourse(c *Course) *VideoUpdateOne {
	return vuo.SetCourseID(c.ID)
}

// AddVideoQuestionTimestampsVideoIDs adds the "video_question_timestamps_video" edge to the VideoQuestionTimestamp entity by IDs.
func (vuo *VideoUpdateOne) AddVideoQuestionTimestampsVideoIDs(ids ...uuid.UUID) *VideoUpdateOne {
	vuo.mutation.AddVideoQuestionTimestampsVideoIDs(ids...)
	return vuo
}

// AddVideoQuestionTimestampsVideo adds the "video_question_timestamps_video" edges to the VideoQuestionTimestamp entity.
func (vuo *VideoUpdateOne) AddVideoQuestionTimestampsVideo(v ...*VideoQuestionTimestamp) *VideoUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddVideoQuestionTimestampsVideoIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vuo *VideoUpdateOne) Mutation() *VideoMutation {
	return vuo.mutation
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (vuo *VideoUpdateOne) ClearCourseSection() *VideoUpdateOne {
	vuo.mutation.ClearCourseSection()
	return vuo
}

// ClearMedia clears the "media" edge to the Media entity.
func (vuo *VideoUpdateOne) ClearMedia() *VideoUpdateOne {
	vuo.mutation.ClearMedia()
	return vuo
}

// ClearCourse clears the "course" edge to the Course entity.
func (vuo *VideoUpdateOne) ClearCourse() *VideoUpdateOne {
	vuo.mutation.ClearCourse()
	return vuo
}

// ClearVideoQuestionTimestampsVideo clears all "video_question_timestamps_video" edges to the VideoQuestionTimestamp entity.
func (vuo *VideoUpdateOne) ClearVideoQuestionTimestampsVideo() *VideoUpdateOne {
	vuo.mutation.ClearVideoQuestionTimestampsVideo()
	return vuo
}

// RemoveVideoQuestionTimestampsVideoIDs removes the "video_question_timestamps_video" edge to VideoQuestionTimestamp entities by IDs.
func (vuo *VideoUpdateOne) RemoveVideoQuestionTimestampsVideoIDs(ids ...uuid.UUID) *VideoUpdateOne {
	vuo.mutation.RemoveVideoQuestionTimestampsVideoIDs(ids...)
	return vuo
}

// RemoveVideoQuestionTimestampsVideo removes "video_question_timestamps_video" edges to VideoQuestionTimestamp entities.
func (vuo *VideoUpdateOne) RemoveVideoQuestionTimestampsVideo(v ...*VideoQuestionTimestamp) *VideoUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveVideoQuestionTimestampsVideoIDs(ids...)
}

// Where appends a list predicates to the VideoUpdate builder.
func (vuo *VideoUpdateOne) Where(ps ...predicate.Video) *VideoUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideoUpdateOne) Select(field string, fields ...string) *VideoUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Video entity.
func (vuo *VideoUpdateOne) Save(ctx context.Context) (*Video, error) {
	if err := vuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideoUpdateOne) SaveX(ctx context.Context) *Video {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideoUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideoUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VideoUpdateOne) defaults() error {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		if video.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized video.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := video.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VideoUpdateOne) check() error {
	if v, ok := vuo.mutation.Title(); ok {
		if err := video.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Video.title": %w`, err)}
		}
	}
	if vuo.mutation.CourseSectionCleared() && len(vuo.mutation.CourseSectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Video.course_section"`)
	}
	if vuo.mutation.MediaCleared() && len(vuo.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Video.media"`)
	}
	if vuo.mutation.CourseCleared() && len(vuo.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Video.course"`)
	}
	return nil
}

func (vuo *VideoUpdateOne) sqlSave(ctx context.Context) (_node *Video, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(video.Table, video.Columns, sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Video.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, video.FieldID)
		for _, f := range fields {
			if !video.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != video.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(video.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(video.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(video.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(video.FieldDescription, field.TypeString, value)
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.ClearField(video.FieldDescription, field.TypeString)
	}
	if value, ok := vuo.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedDuration(); ok {
		_spec.AddField(video.FieldDuration, field.TypeInt, value)
	}
	if vuo.mutation.DurationCleared() {
		_spec.ClearField(video.FieldDuration, field.TypeInt)
	}
	if vuo.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseSectionTable,
			Columns: []string{video.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseSectionTable,
			Columns: []string{video.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.MediaTable,
			Columns: []string{video.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.MediaTable,
			Columns: []string{video.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseTable,
			Columns: []string{video.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.CourseTable,
			Columns: []string{video.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VideoQuestionTimestampsVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoQuestionTimestampsVideoTable,
			Columns: []string{video.VideoQuestionTimestampsVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVideoQuestionTimestampsVideoIDs(); len(nodes) > 0 && !vuo.mutation.VideoQuestionTimestampsVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoQuestionTimestampsVideoTable,
			Columns: []string{video.VideoQuestionTimestampsVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VideoQuestionTimestampsVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoQuestionTimestampsVideoTable,
			Columns: []string{video.VideoQuestionTimestampsVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Video{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
