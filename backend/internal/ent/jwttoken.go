// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/jwttoken"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// JwtToken is the model entity for the JwtToken schema.
type JwtToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// User ID associated with the token
	UserID uuid.UUID `json:"user_id,omitempty"`
	// JWT access token string
	AccessToken string `json:"access_token,omitempty"`
	// JWT refresh token string
	RefreshToken string `json:"refresh_token,omitempty"`
	// Token expiration timestamp
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JwtTokenQuery when eager-loading is set.
	Edges        JwtTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JwtTokenEdges holds the relations/edges for other nodes in the graph.
type JwtTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JwtTokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JwtToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jwttoken.FieldAccessToken, jwttoken.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case jwttoken.FieldCreatedAt, jwttoken.FieldUpdatedAt, jwttoken.FieldDeletedAt, jwttoken.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case jwttoken.FieldID, jwttoken.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JwtToken fields.
func (jt *JwtToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jwttoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				jt.ID = *value
			}
		case jwttoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jt.CreatedAt = value.Time
			}
		case jwttoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jt.UpdatedAt = value.Time
			}
		case jwttoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jt.DeletedAt = new(time.Time)
				*jt.DeletedAt = value.Time
			}
		case jwttoken.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				jt.UserID = *value
			}
		case jwttoken.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				jt.AccessToken = value.String
			}
		case jwttoken.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				jt.RefreshToken = value.String
			}
		case jwttoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				jt.ExpiresAt = value.Time
			}
		default:
			jt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JwtToken.
// This includes values selected through modifiers, order, etc.
func (jt *JwtToken) Value(name string) (ent.Value, error) {
	return jt.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the JwtToken entity.
func (jt *JwtToken) QueryUser() *UserQuery {
	return NewJwtTokenClient(jt.config).QueryUser(jt)
}

// Update returns a builder for updating this JwtToken.
// Note that you need to call JwtToken.Unwrap() before calling this method if this JwtToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (jt *JwtToken) Update() *JwtTokenUpdateOne {
	return NewJwtTokenClient(jt.config).UpdateOne(jt)
}

// Unwrap unwraps the JwtToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jt *JwtToken) Unwrap() *JwtToken {
	_tx, ok := jt.config.driver.(*txDriver)
	if !ok {
		panic("ent: JwtToken is not a transactional entity")
	}
	jt.config.driver = _tx.drv
	return jt
}

// String implements the fmt.Stringer.
func (jt *JwtToken) String() string {
	var builder strings.Builder
	builder.WriteString("JwtToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := jt.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", jt.UserID))
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(jt.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(jt.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(jt.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JwtTokens is a parsable slice of JwtToken.
type JwtTokens []*JwtToken
