// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"template/internal/ent"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/media"
	"template/internal/ent/permission"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questioncollection"
	"template/internal/ent/questionoption"
	"template/internal/ent/role"
	"template/internal/ent/test"
	"template/internal/ent/testignorequestion"
	"template/internal/ent/testquestioncount"
	"template/internal/ent/testsession"
	"template/internal/ent/testsessionanswer"
	"template/internal/ent/todo"
	"template/internal/ent/user"
	"template/internal/ent/video"
	"template/internal/ent/videoquestiontimestamp"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The CourseFunc type is an adapter to allow the use of ordinary function as a Querier.
type CourseFunc func(context.Context, *ent.CourseQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CourseFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CourseQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CourseQuery", q)
}

// The TraverseCourse type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCourse func(context.Context, *ent.CourseQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCourse) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCourse) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CourseQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CourseQuery", q)
}

// The CourseSectionFunc type is an adapter to allow the use of ordinary function as a Querier.
type CourseSectionFunc func(context.Context, *ent.CourseSectionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CourseSectionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CourseSectionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CourseSectionQuery", q)
}

// The TraverseCourseSection type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCourseSection func(context.Context, *ent.CourseSectionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCourseSection) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCourseSection) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CourseSectionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CourseSectionQuery", q)
}

// The MediaFunc type is an adapter to allow the use of ordinary function as a Querier.
type MediaFunc func(context.Context, *ent.MediaQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MediaFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MediaQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MediaQuery", q)
}

// The TraverseMedia type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMedia func(context.Context, *ent.MediaQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMedia) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMedia) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MediaQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MediaQuery", q)
}

// The PermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionFunc func(context.Context, *ent.PermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The TraversePermission type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermission func(context.Context, *ent.PermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The QuestionFunc type is an adapter to allow the use of ordinary function as a Querier.
type QuestionFunc func(context.Context, *ent.QuestionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f QuestionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.QuestionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.QuestionQuery", q)
}

// The TraverseQuestion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseQuestion func(context.Context, *ent.QuestionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseQuestion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseQuestion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.QuestionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.QuestionQuery", q)
}

// The QuestionCollectionFunc type is an adapter to allow the use of ordinary function as a Querier.
type QuestionCollectionFunc func(context.Context, *ent.QuestionCollectionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f QuestionCollectionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.QuestionCollectionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.QuestionCollectionQuery", q)
}

// The TraverseQuestionCollection type is an adapter to allow the use of ordinary function as Traverser.
type TraverseQuestionCollection func(context.Context, *ent.QuestionCollectionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseQuestionCollection) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseQuestionCollection) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.QuestionCollectionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.QuestionCollectionQuery", q)
}

// The QuestionOptionFunc type is an adapter to allow the use of ordinary function as a Querier.
type QuestionOptionFunc func(context.Context, *ent.QuestionOptionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f QuestionOptionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.QuestionOptionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.QuestionOptionQuery", q)
}

// The TraverseQuestionOption type is an adapter to allow the use of ordinary function as Traverser.
type TraverseQuestionOption func(context.Context, *ent.QuestionOptionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseQuestionOption) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseQuestionOption) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.QuestionOptionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.QuestionOptionQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *ent.RoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *ent.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The TestFunc type is an adapter to allow the use of ordinary function as a Querier.
type TestFunc func(context.Context, *ent.TestQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TestFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TestQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TestQuery", q)
}

// The TraverseTest type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTest func(context.Context, *ent.TestQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTest) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTest) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TestQuery", q)
}

// The TestIgnoreQuestionFunc type is an adapter to allow the use of ordinary function as a Querier.
type TestIgnoreQuestionFunc func(context.Context, *ent.TestIgnoreQuestionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TestIgnoreQuestionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TestIgnoreQuestionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TestIgnoreQuestionQuery", q)
}

// The TraverseTestIgnoreQuestion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTestIgnoreQuestion func(context.Context, *ent.TestIgnoreQuestionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTestIgnoreQuestion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTestIgnoreQuestion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestIgnoreQuestionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TestIgnoreQuestionQuery", q)
}

// The TestQuestionCountFunc type is an adapter to allow the use of ordinary function as a Querier.
type TestQuestionCountFunc func(context.Context, *ent.TestQuestionCountQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TestQuestionCountFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TestQuestionCountQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TestQuestionCountQuery", q)
}

// The TraverseTestQuestionCount type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTestQuestionCount func(context.Context, *ent.TestQuestionCountQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTestQuestionCount) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTestQuestionCount) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestQuestionCountQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TestQuestionCountQuery", q)
}

// The TestSessionFunc type is an adapter to allow the use of ordinary function as a Querier.
type TestSessionFunc func(context.Context, *ent.TestSessionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TestSessionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TestSessionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TestSessionQuery", q)
}

// The TraverseTestSession type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTestSession func(context.Context, *ent.TestSessionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTestSession) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTestSession) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestSessionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TestSessionQuery", q)
}

// The TestSessionAnswerFunc type is an adapter to allow the use of ordinary function as a Querier.
type TestSessionAnswerFunc func(context.Context, *ent.TestSessionAnswerQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TestSessionAnswerFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TestSessionAnswerQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TestSessionAnswerQuery", q)
}

// The TraverseTestSessionAnswer type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTestSessionAnswer func(context.Context, *ent.TestSessionAnswerQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTestSessionAnswer) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTestSessionAnswer) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestSessionAnswerQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TestSessionAnswerQuery", q)
}

// The TodoFunc type is an adapter to allow the use of ordinary function as a Querier.
type TodoFunc func(context.Context, *ent.TodoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TodoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TodoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TodoQuery", q)
}

// The TraverseTodo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTodo func(context.Context, *ent.TodoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTodo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTodo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TodoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TodoQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The VideoFunc type is an adapter to allow the use of ordinary function as a Querier.
type VideoFunc func(context.Context, *ent.VideoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VideoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VideoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VideoQuery", q)
}

// The TraverseVideo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVideo func(context.Context, *ent.VideoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVideo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVideo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VideoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VideoQuery", q)
}

// The VideoQuestionTimestampFunc type is an adapter to allow the use of ordinary function as a Querier.
type VideoQuestionTimestampFunc func(context.Context, *ent.VideoQuestionTimestampQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VideoQuestionTimestampFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VideoQuestionTimestampQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VideoQuestionTimestampQuery", q)
}

// The TraverseVideoQuestionTimestamp type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVideoQuestionTimestamp func(context.Context, *ent.VideoQuestionTimestampQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVideoQuestionTimestamp) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVideoQuestionTimestamp) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VideoQuestionTimestampQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VideoQuestionTimestampQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.CourseQuery:
		return &query[*ent.CourseQuery, predicate.Course, course.OrderOption]{typ: ent.TypeCourse, tq: q}, nil
	case *ent.CourseSectionQuery:
		return &query[*ent.CourseSectionQuery, predicate.CourseSection, coursesection.OrderOption]{typ: ent.TypeCourseSection, tq: q}, nil
	case *ent.MediaQuery:
		return &query[*ent.MediaQuery, predicate.Media, media.OrderOption]{typ: ent.TypeMedia, tq: q}, nil
	case *ent.PermissionQuery:
		return &query[*ent.PermissionQuery, predicate.Permission, permission.OrderOption]{typ: ent.TypePermission, tq: q}, nil
	case *ent.QuestionQuery:
		return &query[*ent.QuestionQuery, predicate.Question, question.OrderOption]{typ: ent.TypeQuestion, tq: q}, nil
	case *ent.QuestionCollectionQuery:
		return &query[*ent.QuestionCollectionQuery, predicate.QuestionCollection, questioncollection.OrderOption]{typ: ent.TypeQuestionCollection, tq: q}, nil
	case *ent.QuestionOptionQuery:
		return &query[*ent.QuestionOptionQuery, predicate.QuestionOption, questionoption.OrderOption]{typ: ent.TypeQuestionOption, tq: q}, nil
	case *ent.RoleQuery:
		return &query[*ent.RoleQuery, predicate.Role, role.OrderOption]{typ: ent.TypeRole, tq: q}, nil
	case *ent.TestQuery:
		return &query[*ent.TestQuery, predicate.Test, test.OrderOption]{typ: ent.TypeTest, tq: q}, nil
	case *ent.TestIgnoreQuestionQuery:
		return &query[*ent.TestIgnoreQuestionQuery, predicate.TestIgnoreQuestion, testignorequestion.OrderOption]{typ: ent.TypeTestIgnoreQuestion, tq: q}, nil
	case *ent.TestQuestionCountQuery:
		return &query[*ent.TestQuestionCountQuery, predicate.TestQuestionCount, testquestioncount.OrderOption]{typ: ent.TypeTestQuestionCount, tq: q}, nil
	case *ent.TestSessionQuery:
		return &query[*ent.TestSessionQuery, predicate.TestSession, testsession.OrderOption]{typ: ent.TypeTestSession, tq: q}, nil
	case *ent.TestSessionAnswerQuery:
		return &query[*ent.TestSessionAnswerQuery, predicate.TestSessionAnswer, testsessionanswer.OrderOption]{typ: ent.TypeTestSessionAnswer, tq: q}, nil
	case *ent.TodoQuery:
		return &query[*ent.TodoQuery, predicate.Todo, todo.OrderOption]{typ: ent.TypeTodo, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.VideoQuery:
		return &query[*ent.VideoQuery, predicate.Video, video.OrderOption]{typ: ent.TypeVideo, tq: q}, nil
	case *ent.VideoQuestionTimestampQuery:
		return &query[*ent.VideoQuestionTimestampQuery, predicate.VideoQuestionTimestamp, videoquestiontimestamp.OrderOption]{typ: ent.TypeVideoQuestionTimestamp, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
