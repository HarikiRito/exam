// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"template/internal/ent/predicate"
	"template/internal/ent/testquestioncount"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestQuestionCountDelete is the builder for deleting a TestQuestionCount entity.
type TestQuestionCountDelete struct {
	config
	hooks    []Hook
	mutation *TestQuestionCountMutation
}

// Where appends a list predicates to the TestQuestionCountDelete builder.
func (tqcd *TestQuestionCountDelete) Where(ps ...predicate.TestQuestionCount) *TestQuestionCountDelete {
	tqcd.mutation.Where(ps...)
	return tqcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tqcd *TestQuestionCountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tqcd.sqlExec, tqcd.mutation, tqcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tqcd *TestQuestionCountDelete) ExecX(ctx context.Context) int {
	n, err := tqcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tqcd *TestQuestionCountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testquestioncount.Table, sqlgraph.NewFieldSpec(testquestioncount.FieldID, field.TypeUUID))
	if ps := tqcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tqcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tqcd.mutation.done = true
	return affected, err
}

// TestQuestionCountDeleteOne is the builder for deleting a single TestQuestionCount entity.
type TestQuestionCountDeleteOne struct {
	tqcd *TestQuestionCountDelete
}

// Where appends a list predicates to the TestQuestionCountDelete builder.
func (tqcdo *TestQuestionCountDeleteOne) Where(ps ...predicate.TestQuestionCount) *TestQuestionCountDeleteOne {
	tqcdo.tqcd.mutation.Where(ps...)
	return tqcdo
}

// Exec executes the deletion query.
func (tqcdo *TestQuestionCountDeleteOne) Exec(ctx context.Context) error {
	n, err := tqcdo.tqcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testquestioncount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tqcdo *TestQuestionCountDeleteOne) ExecX(ctx context.Context) {
	if err := tqcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
