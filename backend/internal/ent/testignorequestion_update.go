// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/test"
	"template/internal/ent/testignorequestion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestIgnoreQuestionUpdate is the builder for updating TestIgnoreQuestion entities.
type TestIgnoreQuestionUpdate struct {
	config
	hooks    []Hook
	mutation *TestIgnoreQuestionMutation
}

// Where appends a list predicates to the TestIgnoreQuestionUpdate builder.
func (tiqu *TestIgnoreQuestionUpdate) Where(ps ...predicate.TestIgnoreQuestion) *TestIgnoreQuestionUpdate {
	tiqu.mutation.Where(ps...)
	return tiqu
}

// SetCreatedAt sets the "created_at" field.
func (tiqu *TestIgnoreQuestionUpdate) SetCreatedAt(t time.Time) *TestIgnoreQuestionUpdate {
	tiqu.mutation.SetCreatedAt(t)
	return tiqu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiqu *TestIgnoreQuestionUpdate) SetNillableCreatedAt(t *time.Time) *TestIgnoreQuestionUpdate {
	if t != nil {
		tiqu.SetCreatedAt(*t)
	}
	return tiqu
}

// SetUpdatedAt sets the "updated_at" field.
func (tiqu *TestIgnoreQuestionUpdate) SetUpdatedAt(t time.Time) *TestIgnoreQuestionUpdate {
	tiqu.mutation.SetUpdatedAt(t)
	return tiqu
}

// SetDeletedAt sets the "deleted_at" field.
func (tiqu *TestIgnoreQuestionUpdate) SetDeletedAt(t time.Time) *TestIgnoreQuestionUpdate {
	tiqu.mutation.SetDeletedAt(t)
	return tiqu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tiqu *TestIgnoreQuestionUpdate) SetNillableDeletedAt(t *time.Time) *TestIgnoreQuestionUpdate {
	if t != nil {
		tiqu.SetDeletedAt(*t)
	}
	return tiqu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tiqu *TestIgnoreQuestionUpdate) ClearDeletedAt() *TestIgnoreQuestionUpdate {
	tiqu.mutation.ClearDeletedAt()
	return tiqu
}

// SetTestID sets the "test_id" field.
func (tiqu *TestIgnoreQuestionUpdate) SetTestID(u uuid.UUID) *TestIgnoreQuestionUpdate {
	tiqu.mutation.SetTestID(u)
	return tiqu
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tiqu *TestIgnoreQuestionUpdate) SetNillableTestID(u *uuid.UUID) *TestIgnoreQuestionUpdate {
	if u != nil {
		tiqu.SetTestID(*u)
	}
	return tiqu
}

// SetQuestionID sets the "question_id" field.
func (tiqu *TestIgnoreQuestionUpdate) SetQuestionID(u uuid.UUID) *TestIgnoreQuestionUpdate {
	tiqu.mutation.SetQuestionID(u)
	return tiqu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tiqu *TestIgnoreQuestionUpdate) SetNillableQuestionID(u *uuid.UUID) *TestIgnoreQuestionUpdate {
	if u != nil {
		tiqu.SetQuestionID(*u)
	}
	return tiqu
}

// SetReason sets the "reason" field.
func (tiqu *TestIgnoreQuestionUpdate) SetReason(s string) *TestIgnoreQuestionUpdate {
	tiqu.mutation.SetReason(s)
	return tiqu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (tiqu *TestIgnoreQuestionUpdate) SetNillableReason(s *string) *TestIgnoreQuestionUpdate {
	if s != nil {
		tiqu.SetReason(*s)
	}
	return tiqu
}

// ClearReason clears the value of the "reason" field.
func (tiqu *TestIgnoreQuestionUpdate) ClearReason() *TestIgnoreQuestionUpdate {
	tiqu.mutation.ClearReason()
	return tiqu
}

// SetTest sets the "test" edge to the Test entity.
func (tiqu *TestIgnoreQuestionUpdate) SetTest(t *Test) *TestIgnoreQuestionUpdate {
	return tiqu.SetTestID(t.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tiqu *TestIgnoreQuestionUpdate) SetQuestion(q *Question) *TestIgnoreQuestionUpdate {
	return tiqu.SetQuestionID(q.ID)
}

// Mutation returns the TestIgnoreQuestionMutation object of the builder.
func (tiqu *TestIgnoreQuestionUpdate) Mutation() *TestIgnoreQuestionMutation {
	return tiqu.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tiqu *TestIgnoreQuestionUpdate) ClearTest() *TestIgnoreQuestionUpdate {
	tiqu.mutation.ClearTest()
	return tiqu
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tiqu *TestIgnoreQuestionUpdate) ClearQuestion() *TestIgnoreQuestionUpdate {
	tiqu.mutation.ClearQuestion()
	return tiqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiqu *TestIgnoreQuestionUpdate) Save(ctx context.Context) (int, error) {
	if err := tiqu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tiqu.sqlSave, tiqu.mutation, tiqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiqu *TestIgnoreQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := tiqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiqu *TestIgnoreQuestionUpdate) Exec(ctx context.Context) error {
	_, err := tiqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiqu *TestIgnoreQuestionUpdate) ExecX(ctx context.Context) {
	if err := tiqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiqu *TestIgnoreQuestionUpdate) defaults() error {
	if _, ok := tiqu.mutation.UpdatedAt(); !ok {
		if testignorequestion.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testignorequestion.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testignorequestion.UpdateDefaultUpdatedAt()
		tiqu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tiqu *TestIgnoreQuestionUpdate) check() error {
	if tiqu.mutation.TestCleared() && len(tiqu.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestIgnoreQuestion.test"`)
	}
	if tiqu.mutation.QuestionCleared() && len(tiqu.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestIgnoreQuestion.question"`)
	}
	return nil
}

func (tiqu *TestIgnoreQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tiqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testignorequestion.Table, testignorequestion.Columns, sqlgraph.NewFieldSpec(testignorequestion.FieldID, field.TypeUUID))
	if ps := tiqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiqu.mutation.CreatedAt(); ok {
		_spec.SetField(testignorequestion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tiqu.mutation.UpdatedAt(); ok {
		_spec.SetField(testignorequestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tiqu.mutation.DeletedAt(); ok {
		_spec.SetField(testignorequestion.FieldDeletedAt, field.TypeTime, value)
	}
	if tiqu.mutation.DeletedAtCleared() {
		_spec.ClearField(testignorequestion.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tiqu.mutation.Reason(); ok {
		_spec.SetField(testignorequestion.FieldReason, field.TypeString, value)
	}
	if tiqu.mutation.ReasonCleared() {
		_spec.ClearField(testignorequestion.FieldReason, field.TypeString)
	}
	if tiqu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.TestTable,
			Columns: []string{testignorequestion.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiqu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.TestTable,
			Columns: []string{testignorequestion.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiqu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.QuestionTable,
			Columns: []string{testignorequestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiqu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.QuestionTable,
			Columns: []string{testignorequestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testignorequestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiqu.mutation.done = true
	return n, nil
}

// TestIgnoreQuestionUpdateOne is the builder for updating a single TestIgnoreQuestion entity.
type TestIgnoreQuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestIgnoreQuestionMutation
}

// SetCreatedAt sets the "created_at" field.
func (tiquo *TestIgnoreQuestionUpdateOne) SetCreatedAt(t time.Time) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.SetCreatedAt(t)
	return tiquo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiquo *TestIgnoreQuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *TestIgnoreQuestionUpdateOne {
	if t != nil {
		tiquo.SetCreatedAt(*t)
	}
	return tiquo
}

// SetUpdatedAt sets the "updated_at" field.
func (tiquo *TestIgnoreQuestionUpdateOne) SetUpdatedAt(t time.Time) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.SetUpdatedAt(t)
	return tiquo
}

// SetDeletedAt sets the "deleted_at" field.
func (tiquo *TestIgnoreQuestionUpdateOne) SetDeletedAt(t time.Time) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.SetDeletedAt(t)
	return tiquo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tiquo *TestIgnoreQuestionUpdateOne) SetNillableDeletedAt(t *time.Time) *TestIgnoreQuestionUpdateOne {
	if t != nil {
		tiquo.SetDeletedAt(*t)
	}
	return tiquo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tiquo *TestIgnoreQuestionUpdateOne) ClearDeletedAt() *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.ClearDeletedAt()
	return tiquo
}

// SetTestID sets the "test_id" field.
func (tiquo *TestIgnoreQuestionUpdateOne) SetTestID(u uuid.UUID) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.SetTestID(u)
	return tiquo
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tiquo *TestIgnoreQuestionUpdateOne) SetNillableTestID(u *uuid.UUID) *TestIgnoreQuestionUpdateOne {
	if u != nil {
		tiquo.SetTestID(*u)
	}
	return tiquo
}

// SetQuestionID sets the "question_id" field.
func (tiquo *TestIgnoreQuestionUpdateOne) SetQuestionID(u uuid.UUID) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.SetQuestionID(u)
	return tiquo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tiquo *TestIgnoreQuestionUpdateOne) SetNillableQuestionID(u *uuid.UUID) *TestIgnoreQuestionUpdateOne {
	if u != nil {
		tiquo.SetQuestionID(*u)
	}
	return tiquo
}

// SetReason sets the "reason" field.
func (tiquo *TestIgnoreQuestionUpdateOne) SetReason(s string) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.SetReason(s)
	return tiquo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (tiquo *TestIgnoreQuestionUpdateOne) SetNillableReason(s *string) *TestIgnoreQuestionUpdateOne {
	if s != nil {
		tiquo.SetReason(*s)
	}
	return tiquo
}

// ClearReason clears the value of the "reason" field.
func (tiquo *TestIgnoreQuestionUpdateOne) ClearReason() *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.ClearReason()
	return tiquo
}

// SetTest sets the "test" edge to the Test entity.
func (tiquo *TestIgnoreQuestionUpdateOne) SetTest(t *Test) *TestIgnoreQuestionUpdateOne {
	return tiquo.SetTestID(t.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tiquo *TestIgnoreQuestionUpdateOne) SetQuestion(q *Question) *TestIgnoreQuestionUpdateOne {
	return tiquo.SetQuestionID(q.ID)
}

// Mutation returns the TestIgnoreQuestionMutation object of the builder.
func (tiquo *TestIgnoreQuestionUpdateOne) Mutation() *TestIgnoreQuestionMutation {
	return tiquo.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tiquo *TestIgnoreQuestionUpdateOne) ClearTest() *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.ClearTest()
	return tiquo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tiquo *TestIgnoreQuestionUpdateOne) ClearQuestion() *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.ClearQuestion()
	return tiquo
}

// Where appends a list predicates to the TestIgnoreQuestionUpdate builder.
func (tiquo *TestIgnoreQuestionUpdateOne) Where(ps ...predicate.TestIgnoreQuestion) *TestIgnoreQuestionUpdateOne {
	tiquo.mutation.Where(ps...)
	return tiquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiquo *TestIgnoreQuestionUpdateOne) Select(field string, fields ...string) *TestIgnoreQuestionUpdateOne {
	tiquo.fields = append([]string{field}, fields...)
	return tiquo
}

// Save executes the query and returns the updated TestIgnoreQuestion entity.
func (tiquo *TestIgnoreQuestionUpdateOne) Save(ctx context.Context) (*TestIgnoreQuestion, error) {
	if err := tiquo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tiquo.sqlSave, tiquo.mutation, tiquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiquo *TestIgnoreQuestionUpdateOne) SaveX(ctx context.Context) *TestIgnoreQuestion {
	node, err := tiquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiquo *TestIgnoreQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := tiquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiquo *TestIgnoreQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := tiquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiquo *TestIgnoreQuestionUpdateOne) defaults() error {
	if _, ok := tiquo.mutation.UpdatedAt(); !ok {
		if testignorequestion.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testignorequestion.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testignorequestion.UpdateDefaultUpdatedAt()
		tiquo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tiquo *TestIgnoreQuestionUpdateOne) check() error {
	if tiquo.mutation.TestCleared() && len(tiquo.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestIgnoreQuestion.test"`)
	}
	if tiquo.mutation.QuestionCleared() && len(tiquo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestIgnoreQuestion.question"`)
	}
	return nil
}

func (tiquo *TestIgnoreQuestionUpdateOne) sqlSave(ctx context.Context) (_node *TestIgnoreQuestion, err error) {
	if err := tiquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testignorequestion.Table, testignorequestion.Columns, sqlgraph.NewFieldSpec(testignorequestion.FieldID, field.TypeUUID))
	id, ok := tiquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestIgnoreQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testignorequestion.FieldID)
		for _, f := range fields {
			if !testignorequestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testignorequestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiquo.mutation.CreatedAt(); ok {
		_spec.SetField(testignorequestion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tiquo.mutation.UpdatedAt(); ok {
		_spec.SetField(testignorequestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tiquo.mutation.DeletedAt(); ok {
		_spec.SetField(testignorequestion.FieldDeletedAt, field.TypeTime, value)
	}
	if tiquo.mutation.DeletedAtCleared() {
		_spec.ClearField(testignorequestion.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tiquo.mutation.Reason(); ok {
		_spec.SetField(testignorequestion.FieldReason, field.TypeString, value)
	}
	if tiquo.mutation.ReasonCleared() {
		_spec.ClearField(testignorequestion.FieldReason, field.TypeString)
	}
	if tiquo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.TestTable,
			Columns: []string{testignorequestion.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiquo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.TestTable,
			Columns: []string{testignorequestion.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiquo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.QuestionTable,
			Columns: []string{testignorequestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiquo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.QuestionTable,
			Columns: []string{testignorequestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestIgnoreQuestion{config: tiquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testignorequestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiquo.mutation.done = true
	return _node, nil
}
