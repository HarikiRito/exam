package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/permission"
	"template/internal/features/role"
	"template/internal/features/test_session"
	"template/internal/graph/dataloader"
	"template/internal/graph/model"
	"template/internal/shared/utilities/slice"

	"github.com/google/uuid"
)

// CreateTestSession is the resolver for the createTestSession field.
func (r *mutationResolver) CreateTestSession(ctx context.Context, input model.CreateTestSessionInput) ([]*model.TestSession, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionCreate,
	})
	if err != nil {
		return nil, err
	}

	// Handle backward compatibility - if no userIds provided and no userId provided, use authenticated user
	if len(input.UserIds) == 0 {
		input.UserIds = []uuid.UUID{userID}
	}

	sessions, err := test_session.CreateTestSession(ctx, input)
	if err != nil {
		return nil, err
	}

	// Convert all sessions to GraphQL models
	return slice.Map(sessions, model.ConvertTestSessionToModel), nil
}

// DeleteTestSession is the resolver for the deleteTestSession field.
func (r *mutationResolver) DeleteTestSession(ctx context.Context, id uuid.UUID) (bool, error) {
	_, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionDelete,
	})
	if err != nil {
		return false, err
	}

	return test_session.DeleteTestSession(ctx, id)
}

// SubmitTestSession is the resolver for the submitTestSession field.
func (r *mutationResolver) SubmitTestSession(ctx context.Context, sessionID uuid.UUID, input model.SubmitTestSessionInput) (*model.TestSession, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionUpdate,
	})
	if err != nil {
		return nil, err
	}

	// Submit the test session
	session, err := test_session.SubmitTestSession(ctx, userID, sessionID, input)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return model.ConvertTestSessionToModel(session), nil
}

// StartTestSession is the resolver for the startTestSession field.
func (r *mutationResolver) StartTestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionUpdate,
	})
	if err != nil {
		return nil, err
	}

	// Start the test session
	session, err := test_session.StartTestSession(ctx, userID, id)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return model.ConvertTestSessionToModel(session), nil
}

// TestSession is the resolver for the testSession field.
func (r *queryResolver) TestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	_, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionRead,
	})
	if err != nil {
		return nil, err
	}

	session, err := test_session.GetTestSessionByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// PaginatedTestSessions is the resolver for the paginatedTestSessions field.
func (r *queryResolver) PaginatedTestSessions(ctx context.Context, paginationInput *model.PaginationInput, filterInput *model.TestSessionFilterInput) (*model.PaginatedTestSession, error) {
	userId, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionRead,
	})
	if err != nil {
		return nil, err
	}

	// Check if user is admin or owner
	isAdminOrOwner, err := role.IsAdminOrOwner(ctx, userId)
	if err != nil {
		return nil, err
	}

	result, err := test_session.PaginatedTestSessions(ctx, userId, isAdminOrOwner, paginationInput, filterInput)
	if err != nil {
		return nil, err
	}

	items := slice.Map(result.Items, model.ConvertTestSessionToModel)
	pagination := &model.Pagination{
		CurrentPage:     result.CurrentPage,
		TotalPages:      result.TotalPages,
		TotalItems:      result.TotalItems,
		HasNextPage:     result.HasNextPage,
		HasPreviousPage: result.HasPrevPage,
	}

	return &model.PaginatedTestSession{
		Pagination: pagination,
		Items:      items,
	}, nil
}

// TestSessionResult is the resolver for the testSessionResult field.
func (r *queryResolver) TestSessionResult(ctx context.Context, id uuid.UUID) (*model.TestSessionResult, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.SessionRead,
	})
	if err != nil {
		return nil, err
	}

	// Check if user is admin or owner
	isAdminOrOwner, err := role.IsAdminOrOwner(ctx, userID)
	if err != nil {
		return nil, err
	}

	// Get test session result
	result, err := test_session.GetTestSessionResult(ctx, userID, id, isAdminOrOwner)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// Question is the resolver for the question field.
func (r *questionResultResolver) Question(ctx context.Context, obj *model.QuestionResult) (*model.Question, error) {
	// Get questionID from the QuestionResult (stored during GetTestSessionResult)
	if obj.Question != nil && obj.Question.ID != uuid.Nil {
		return dataloader.GetQuestion(ctx, obj.Question.ID)
	}
	return nil, fmt.Errorf("question ID not found in QuestionResult")
}

// Test is the resolver for the test field.
func (r *testSessionResolver) Test(ctx context.Context, obj *model.TestSession) (*model.Test, error) {
	return dataloader.GetTest(ctx, obj.TestID)
}

// User is the resolver for the user field.
func (r *testSessionResolver) User(ctx context.Context, obj *model.TestSession) (*model.User, error) {
	if obj.UserID == nil {
		return nil, nil
	}
	return dataloader.GetUser(ctx, *obj.UserID)
}

// Questions is the resolver for the questions field.
func (r *testSessionResolver) Questions(ctx context.Context, obj *model.TestSession) ([]*model.Question, error) {
	return dataloader.GetQuestionsBySessionID(ctx, obj.ID)
}

// OrderedQuestions is the resolver for the orderedQuestions field.
func (r *testSessionResolver) OrderedQuestions(ctx context.Context, obj *model.TestSession) ([]*model.QuestionOrder, error) {
	return dataloader.GetOrderedQuestionsBySessionID(ctx, obj.ID)
}

// QuestionResult returns QuestionResultResolver implementation.
func (r *Resolver) QuestionResult() QuestionResultResolver { return &questionResultResolver{r} }

// TestSession returns TestSessionResolver implementation.
func (r *Resolver) TestSession() TestSessionResolver { return &testSessionResolver{r} }

type questionResultResolver struct{ *Resolver }
type testSessionResolver struct{ *Resolver }
