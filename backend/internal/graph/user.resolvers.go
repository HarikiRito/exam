package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/permission"
	"template/internal/features/user"
	"template/internal/graph/dataloader"
	"template/internal/graph/model"
	"template/internal/shared/utilities/slice"
)

// AdminCreateUser is the resolver for the adminCreateUser field.
func (r *mutationResolver) AdminCreateUser(ctx context.Context, input model.AdminCreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: AdminCreateUser - adminCreateUser"))
}

// PaginatedUsers is the resolver for the paginatedUsers field.
func (r *queryResolver) PaginatedUsers(ctx context.Context, paginationInput *model.PaginationInput) (*model.PaginatedUser, error) {
	_, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.UserRead,
	})
	if err != nil {
		return nil, err
	}

	result, err := user.PaginatedUsers(ctx, paginationInput)
	if err != nil {
		return nil, err
	}

	items := slice.Map(result.Items, model.ConvertUserToModel)
	pagination := &model.Pagination{
		CurrentPage:     result.CurrentPage,
		TotalPages:      result.TotalPages,
		TotalItems:      result.TotalItems,
		HasNextPage:     result.HasNextPage,
		HasPreviousPage: result.HasPrevPage,
	}

	return &model.PaginatedUser{
		Pagination: pagination,
		Items:      items,
	}, nil
}

// Roles is the resolver for the roles field.
func (r *userResolver) Roles(ctx context.Context, obj *model.User) ([]*model.Role, error) {
	return dataloader.GetRolesByUserID(ctx, obj.ID)
}

// Permissions is the resolver for the permissions field.
func (r *userResolver) Permissions(ctx context.Context, obj *model.User) ([]permission.Permission, error) {
	return dataloader.GetPermissionsByUserID(ctx, obj.ID)
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
