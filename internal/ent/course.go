// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/course"
	"template/internal/ent/media"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// MediaID holds the value of the "media_id" field.
	MediaID string `json:"media_id,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID string `json:"creator_id,omitempty"`
	// IsPublished holds the value of the "is_published" field.
	IsPublished bool `json:"is_published,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseQuery when eager-loading is set.
	Edges        CourseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CourseEdges holds the relations/edges for other nodes in the graph.
type CourseEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// CourseSections holds the value of the course_sections edge.
	CourseSections []*CourseSection `json:"course_sections,omitempty"`
	// CourseVideos holds the value of the course_videos edge.
	CourseVideos []*Video `json:"course_videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// CourseSectionsOrErr returns the CourseSections value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) CourseSectionsOrErr() ([]*CourseSection, error) {
	if e.loadedTypes[2] {
		return e.CourseSections, nil
	}
	return nil, &NotLoadedError{edge: "course_sections"}
}

// CourseVideosOrErr returns the CourseVideos value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) CourseVideosOrErr() ([]*Video, error) {
	if e.loadedTypes[3] {
		return e.CourseVideos, nil
	}
	return nil, &NotLoadedError{edge: "course_videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case course.FieldIsPublished:
			values[i] = new(sql.NullBool)
		case course.FieldID, course.FieldTitle, course.FieldDescription, course.FieldMediaID, course.FieldCreatorID:
			values[i] = new(sql.NullString)
		case course.FieldCreatedAt, course.FieldUpdatedAt, course.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case course.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case course.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case course.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case course.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case course.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case course.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				c.MediaID = value.String
			}
		case course.FieldCreatorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				c.CreatorID = value.String
			}
		case course.FieldIsPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_published", values[i])
			} else if value.Valid {
				c.IsPublished = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Course.
// This includes values selected through modifiers, order, etc.
func (c *Course) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the Course entity.
func (c *Course) QueryMedia() *MediaQuery {
	return NewCourseClient(c.config).QueryMedia(c)
}

// QueryCreator queries the "creator" edge of the Course entity.
func (c *Course) QueryCreator() *UserQuery {
	return NewCourseClient(c.config).QueryCreator(c)
}

// QueryCourseSections queries the "course_sections" edge of the Course entity.
func (c *Course) QueryCourseSections() *CourseSectionQuery {
	return NewCourseClient(c.config).QueryCourseSections(c)
}

// QueryCourseVideos queries the "course_videos" edge of the Course entity.
func (c *Course) QueryCourseVideos() *VideoQuery {
	return NewCourseClient(c.config).QueryCourseVideos(c)
}

// Update returns a builder for updating this Course.
// Note that you need to call Course.Unwrap() before calling this method if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return NewCourseClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Course entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("media_id=")
	builder.WriteString(c.MediaID)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(c.CreatorID)
	builder.WriteString(", ")
	builder.WriteString("is_published=")
	builder.WriteString(fmt.Sprintf("%v", c.IsPublished))
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course
