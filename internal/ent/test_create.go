// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/questioncollection"
	"template/internal/ent/test"
	"template/internal/ent/testignorequestion"
	"template/internal/ent/testquestioncount"
	"template/internal/ent/testsession"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestCreate is the builder for creating a Test entity.
type TestCreate struct {
	config
	mutation *TestMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TestCreate) SetCreatedAt(t time.Time) *TestCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TestCreate) SetNillableCreatedAt(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TestCreate) SetUpdatedAt(t time.Time) *TestCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TestCreate) SetNillableUpdatedAt(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TestCreate) SetDeletedAt(t time.Time) *TestCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TestCreate) SetNillableDeletedAt(t *time.Time) *TestCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TestCreate) SetName(s string) *TestCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetCourseSectionID sets the "course_section_id" field.
func (tc *TestCreate) SetCourseSectionID(u uuid.UUID) *TestCreate {
	tc.mutation.SetCourseSectionID(u)
	return tc
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (tc *TestCreate) SetNillableCourseSectionID(u *uuid.UUID) *TestCreate {
	if u != nil {
		tc.SetCourseSectionID(*u)
	}
	return tc
}

// SetCourseID sets the "course_id" field.
func (tc *TestCreate) SetCourseID(u uuid.UUID) *TestCreate {
	tc.mutation.SetCourseID(u)
	return tc
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (tc *TestCreate) SetNillableCourseID(u *uuid.UUID) *TestCreate {
	if u != nil {
		tc.SetCourseID(*u)
	}
	return tc
}

// SetTotalPoints sets the "total_points" field.
func (tc *TestCreate) SetTotalPoints(i int) *TestCreate {
	tc.mutation.SetTotalPoints(i)
	return tc
}

// SetNillableTotalPoints sets the "total_points" field if the given value is not nil.
func (tc *TestCreate) SetNillableTotalPoints(i *int) *TestCreate {
	if i != nil {
		tc.SetTotalPoints(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TestCreate) SetID(u uuid.UUID) *TestCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TestCreate) SetNillableID(u *uuid.UUID) *TestCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (tc *TestCreate) SetCourseSection(c *CourseSection) *TestCreate {
	return tc.SetCourseSectionID(c.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (tc *TestCreate) SetCourse(c *Course) *TestCreate {
	return tc.SetCourseID(c.ID)
}

// AddTestSessionIDs adds the "test_sessions" edge to the TestSession entity by IDs.
func (tc *TestCreate) AddTestSessionIDs(ids ...uuid.UUID) *TestCreate {
	tc.mutation.AddTestSessionIDs(ids...)
	return tc
}

// AddTestSessions adds the "test_sessions" edges to the TestSession entity.
func (tc *TestCreate) AddTestSessions(t ...*TestSession) *TestCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTestSessionIDs(ids...)
}

// AddQuestionCollectionIDs adds the "question_collections" edge to the QuestionCollection entity by IDs.
func (tc *TestCreate) AddQuestionCollectionIDs(ids ...uuid.UUID) *TestCreate {
	tc.mutation.AddQuestionCollectionIDs(ids...)
	return tc
}

// AddQuestionCollections adds the "question_collections" edges to the QuestionCollection entity.
func (tc *TestCreate) AddQuestionCollections(q ...*QuestionCollection) *TestCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return tc.AddQuestionCollectionIDs(ids...)
}

// AddTestQuestionCountIDs adds the "test_question_counts" edge to the TestQuestionCount entity by IDs.
func (tc *TestCreate) AddTestQuestionCountIDs(ids ...uuid.UUID) *TestCreate {
	tc.mutation.AddTestQuestionCountIDs(ids...)
	return tc
}

// AddTestQuestionCounts adds the "test_question_counts" edges to the TestQuestionCount entity.
func (tc *TestCreate) AddTestQuestionCounts(t ...*TestQuestionCount) *TestCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTestQuestionCountIDs(ids...)
}

// AddTestIgnoreQuestionIDs adds the "test_ignore_questions" edge to the TestIgnoreQuestion entity by IDs.
func (tc *TestCreate) AddTestIgnoreQuestionIDs(ids ...uuid.UUID) *TestCreate {
	tc.mutation.AddTestIgnoreQuestionIDs(ids...)
	return tc
}

// AddTestIgnoreQuestions adds the "test_ignore_questions" edges to the TestIgnoreQuestion entity.
func (tc *TestCreate) AddTestIgnoreQuestions(t ...*TestIgnoreQuestion) *TestCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTestIgnoreQuestionIDs(ids...)
}

// Mutation returns the TestMutation object of the builder.
func (tc *TestCreate) Mutation() *TestMutation {
	return tc.mutation
}

// Save creates the Test in the database.
func (tc *TestCreate) Save(ctx context.Context) (*Test, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TestCreate) SaveX(ctx context.Context) *Test {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TestCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TestCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TestCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if test.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized test.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := test.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if test.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized test.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := test.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.TotalPoints(); !ok {
		v := test.DefaultTotalPoints
		tc.mutation.SetTotalPoints(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if test.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized test.DefaultID (forgotten import ent/runtime?)")
		}
		v := test.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TestCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Test.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Test.updated_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Test.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := test.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Test.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TotalPoints(); !ok {
		return &ValidationError{Name: "total_points", err: errors.New(`ent: missing required field "Test.total_points"`)}
	}
	if v, ok := tc.mutation.TotalPoints(); ok {
		if err := test.TotalPointsValidator(v); err != nil {
			return &ValidationError{Name: "total_points", err: fmt.Errorf(`ent: validator failed for field "Test.total_points": %w`, err)}
		}
	}
	return nil
}

func (tc *TestCreate) sqlSave(ctx context.Context) (*Test, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TestCreate) createSpec() (*Test, *sqlgraph.CreateSpec) {
	var (
		_node = &Test{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(test.Table, sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(test.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(test.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(test.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(test.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.TotalPoints(); ok {
		_spec.SetField(test.FieldTotalPoints, field.TypeInt, value)
		_node.TotalPoints = value
	}
	if nodes := tc.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.CourseSectionTable,
			Columns: []string{test.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseSectionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.CourseTable,
			Columns: []string{test.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TestSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TestSessionsTable,
			Columns: []string{test.TestSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.QuestionCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   test.QuestionCollectionsTable,
			Columns: test.QuestionCollectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TestQuestionCountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestQuestionCountsTable,
			Columns: []string{test.TestQuestionCountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testquestioncount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TestIgnoreQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   test.TestIgnoreQuestionsTable,
			Columns: []string{test.TestIgnoreQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testignorequestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestCreateBulk is the builder for creating many Test entities in bulk.
type TestCreateBulk struct {
	config
	err      error
	builders []*TestCreate
}

// Save creates the Test entities in the database.
func (tcb *TestCreateBulk) Save(ctx context.Context) ([]*Test, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Test, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TestCreateBulk) SaveX(ctx context.Context) []*Test {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TestCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TestCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
