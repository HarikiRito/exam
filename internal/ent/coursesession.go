// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/coursesection"
	"template/internal/ent/coursesession"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CourseSession is the model entity for the CourseSession schema.
type CourseSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CourseSectionID holds the value of the "course_section_id" field.
	CourseSectionID uuid.UUID `json:"course_section_id,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// TotalScore holds the value of the "total_score" field.
	TotalScore int `json:"total_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseSessionQuery when eager-loading is set.
	Edges        CourseSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CourseSessionEdges holds the relations/edges for other nodes in the graph.
type CourseSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CourseSection holds the value of the course_section edge.
	CourseSection *CourseSection `json:"course_section,omitempty"`
	// UserQuestionAnswers holds the value of the user_question_answers edge.
	UserQuestionAnswers []*UserQuestionAnswer `json:"user_question_answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseSessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseSessionEdges) CourseSectionOrErr() (*CourseSection, error) {
	if e.CourseSection != nil {
		return e.CourseSection, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: coursesection.Label}
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// UserQuestionAnswersOrErr returns the UserQuestionAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e CourseSessionEdges) UserQuestionAnswersOrErr() ([]*UserQuestionAnswer, error) {
	if e.loadedTypes[2] {
		return e.UserQuestionAnswers, nil
	}
	return nil, &NotLoadedError{edge: "user_question_answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coursesession.FieldTotalScore:
			values[i] = new(sql.NullInt64)
		case coursesession.FieldCreatedAt, coursesession.FieldUpdatedAt, coursesession.FieldDeletedAt, coursesession.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case coursesession.FieldID, coursesession.FieldUserID, coursesession.FieldCourseSectionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseSession fields.
func (cs *CourseSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coursesession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case coursesession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case coursesession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case coursesession.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cs.DeletedAt = new(time.Time)
				*cs.DeletedAt = value.Time
			}
		case coursesession.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				cs.UserID = *value
			}
		case coursesession.FieldCourseSectionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field course_section_id", values[i])
			} else if value != nil {
				cs.CourseSectionID = *value
			}
		case coursesession.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				cs.CompletedAt = value.Time
			}
		case coursesession.FieldTotalScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[i])
			} else if value.Valid {
				cs.TotalScore = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CourseSession.
// This includes values selected through modifiers, order, etc.
func (cs *CourseSession) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CourseSession entity.
func (cs *CourseSession) QueryUser() *UserQuery {
	return NewCourseSessionClient(cs.config).QueryUser(cs)
}

// QueryCourseSection queries the "course_section" edge of the CourseSession entity.
func (cs *CourseSession) QueryCourseSection() *CourseSectionQuery {
	return NewCourseSessionClient(cs.config).QueryCourseSection(cs)
}

// QueryUserQuestionAnswers queries the "user_question_answers" edge of the CourseSession entity.
func (cs *CourseSession) QueryUserQuestionAnswers() *UserQuestionAnswerQuery {
	return NewCourseSessionClient(cs.config).QueryUserQuestionAnswers(cs)
}

// Update returns a builder for updating this CourseSession.
// Note that you need to call CourseSession.Unwrap() before calling this method if this CourseSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CourseSession) Update() *CourseSessionUpdateOne {
	return NewCourseSessionClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CourseSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CourseSession) Unwrap() *CourseSession {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseSession is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CourseSession) String() string {
	var builder strings.Builder
	builder.WriteString("CourseSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cs.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.UserID))
	builder.WriteString(", ")
	builder.WriteString("course_section_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.CourseSectionID))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(cs.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("total_score=")
	builder.WriteString(fmt.Sprintf("%v", cs.TotalScore))
	builder.WriteByte(')')
	return builder.String()
}

// CourseSessions is a parsable slice of CourseSession.
type CourseSessions []*CourseSession
