// Code generated by ent, DO NOT EDIT.

package userquestionanswer

import (
	"template/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldUserID, v))
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldQuestionID, v))
}

// SelectedOptionID applies equality check predicate on the "selected_option_id" field. It's identical to SelectedOptionIDEQ.
func SelectedOptionID(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldSelectedOptionID, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldSessionID, v))
}

// SelectedOptionText applies equality check predicate on the "selected_option_text" field. It's identical to SelectedOptionTextEQ.
func SelectedOptionText(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldSelectedOptionText, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldUserID, vs...))
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldQuestionID, v))
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldQuestionID, v))
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldQuestionID, vs...))
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldQuestionID, vs...))
}

// SelectedOptionIDEQ applies the EQ predicate on the "selected_option_id" field.
func SelectedOptionIDEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldSelectedOptionID, v))
}

// SelectedOptionIDNEQ applies the NEQ predicate on the "selected_option_id" field.
func SelectedOptionIDNEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldSelectedOptionID, v))
}

// SelectedOptionIDIn applies the In predicate on the "selected_option_id" field.
func SelectedOptionIDIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldSelectedOptionID, vs...))
}

// SelectedOptionIDNotIn applies the NotIn predicate on the "selected_option_id" field.
func SelectedOptionIDNotIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldSelectedOptionID, vs...))
}

// SelectedOptionIDIsNil applies the IsNil predicate on the "selected_option_id" field.
func SelectedOptionIDIsNil() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIsNull(FieldSelectedOptionID))
}

// SelectedOptionIDNotNil applies the NotNil predicate on the "selected_option_id" field.
func SelectedOptionIDNotNil() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotNull(FieldSelectedOptionID))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...uuid.UUID) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldSessionID, vs...))
}

// SelectedOptionTextEQ applies the EQ predicate on the "selected_option_text" field.
func SelectedOptionTextEQ(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEQ(FieldSelectedOptionText, v))
}

// SelectedOptionTextNEQ applies the NEQ predicate on the "selected_option_text" field.
func SelectedOptionTextNEQ(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNEQ(FieldSelectedOptionText, v))
}

// SelectedOptionTextIn applies the In predicate on the "selected_option_text" field.
func SelectedOptionTextIn(vs ...string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIn(FieldSelectedOptionText, vs...))
}

// SelectedOptionTextNotIn applies the NotIn predicate on the "selected_option_text" field.
func SelectedOptionTextNotIn(vs ...string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotIn(FieldSelectedOptionText, vs...))
}

// SelectedOptionTextGT applies the GT predicate on the "selected_option_text" field.
func SelectedOptionTextGT(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGT(FieldSelectedOptionText, v))
}

// SelectedOptionTextGTE applies the GTE predicate on the "selected_option_text" field.
func SelectedOptionTextGTE(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldGTE(FieldSelectedOptionText, v))
}

// SelectedOptionTextLT applies the LT predicate on the "selected_option_text" field.
func SelectedOptionTextLT(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLT(FieldSelectedOptionText, v))
}

// SelectedOptionTextLTE applies the LTE predicate on the "selected_option_text" field.
func SelectedOptionTextLTE(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldLTE(FieldSelectedOptionText, v))
}

// SelectedOptionTextContains applies the Contains predicate on the "selected_option_text" field.
func SelectedOptionTextContains(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldContains(FieldSelectedOptionText, v))
}

// SelectedOptionTextHasPrefix applies the HasPrefix predicate on the "selected_option_text" field.
func SelectedOptionTextHasPrefix(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldHasPrefix(FieldSelectedOptionText, v))
}

// SelectedOptionTextHasSuffix applies the HasSuffix predicate on the "selected_option_text" field.
func SelectedOptionTextHasSuffix(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldHasSuffix(FieldSelectedOptionText, v))
}

// SelectedOptionTextIsNil applies the IsNil predicate on the "selected_option_text" field.
func SelectedOptionTextIsNil() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldIsNull(FieldSelectedOptionText))
}

// SelectedOptionTextNotNil applies the NotNil predicate on the "selected_option_text" field.
func SelectedOptionTextNotNil() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldNotNull(FieldSelectedOptionText))
}

// SelectedOptionTextEqualFold applies the EqualFold predicate on the "selected_option_text" field.
func SelectedOptionTextEqualFold(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldEqualFold(FieldSelectedOptionText, v))
}

// SelectedOptionTextContainsFold applies the ContainsFold predicate on the "selected_option_text" field.
func SelectedOptionTextContainsFold(v string) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.FieldContainsFold(FieldSelectedOptionText, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSelectedOption applies the HasEdge predicate on the "selected_option" edge.
func HasSelectedOption() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SelectedOptionTable, SelectedOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedOptionWith applies the HasEdge predicate on the "selected_option" edge with a given conditions (other predicates).
func HasSelectedOptionWith(preds ...predicate.QuestionOption) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := newSelectedOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestSession applies the HasEdge predicate on the "test_session" edge.
func HasTestSession() predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TestSessionTable, TestSessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestSessionWith applies the HasEdge predicate on the "test_session" edge with a given conditions (other predicates).
func HasTestSessionWith(preds ...predicate.TestSession) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(func(s *sql.Selector) {
		step := newTestSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserQuestionAnswer) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserQuestionAnswer) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserQuestionAnswer) predicate.UserQuestionAnswer {
	return predicate.UserQuestionAnswer(sql.NotPredicates(p))
}
