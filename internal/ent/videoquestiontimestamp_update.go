// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/video"
	"template/internal/ent/videoquestiontimestamp"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VideoQuestionTimestampUpdate is the builder for updating VideoQuestionTimestamp entities.
type VideoQuestionTimestampUpdate struct {
	config
	hooks    []Hook
	mutation *VideoQuestionTimestampMutation
}

// Where appends a list predicates to the VideoQuestionTimestampUpdate builder.
func (vqtu *VideoQuestionTimestampUpdate) Where(ps ...predicate.VideoQuestionTimestamp) *VideoQuestionTimestampUpdate {
	vqtu.mutation.Where(ps...)
	return vqtu
}

// SetCreatedAt sets the "created_at" field.
func (vqtu *VideoQuestionTimestampUpdate) SetCreatedAt(t time.Time) *VideoQuestionTimestampUpdate {
	vqtu.mutation.SetCreatedAt(t)
	return vqtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vqtu *VideoQuestionTimestampUpdate) SetNillableCreatedAt(t *time.Time) *VideoQuestionTimestampUpdate {
	if t != nil {
		vqtu.SetCreatedAt(*t)
	}
	return vqtu
}

// SetUpdatedAt sets the "updated_at" field.
func (vqtu *VideoQuestionTimestampUpdate) SetUpdatedAt(t time.Time) *VideoQuestionTimestampUpdate {
	vqtu.mutation.SetUpdatedAt(t)
	return vqtu
}

// SetVideoID sets the "video_id" field.
func (vqtu *VideoQuestionTimestampUpdate) SetVideoID(u uuid.UUID) *VideoQuestionTimestampUpdate {
	vqtu.mutation.SetVideoID(u)
	return vqtu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (vqtu *VideoQuestionTimestampUpdate) SetNillableVideoID(u *uuid.UUID) *VideoQuestionTimestampUpdate {
	if u != nil {
		vqtu.SetVideoID(*u)
	}
	return vqtu
}

// SetQuestionID sets the "question_id" field.
func (vqtu *VideoQuestionTimestampUpdate) SetQuestionID(u uuid.UUID) *VideoQuestionTimestampUpdate {
	vqtu.mutation.SetQuestionID(u)
	return vqtu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (vqtu *VideoQuestionTimestampUpdate) SetNillableQuestionID(u *uuid.UUID) *VideoQuestionTimestampUpdate {
	if u != nil {
		vqtu.SetQuestionID(*u)
	}
	return vqtu
}

// SetTimestamp sets the "timestamp" field.
func (vqtu *VideoQuestionTimestampUpdate) SetTimestamp(i int) *VideoQuestionTimestampUpdate {
	vqtu.mutation.ResetTimestamp()
	vqtu.mutation.SetTimestamp(i)
	return vqtu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (vqtu *VideoQuestionTimestampUpdate) SetNillableTimestamp(i *int) *VideoQuestionTimestampUpdate {
	if i != nil {
		vqtu.SetTimestamp(*i)
	}
	return vqtu
}

// AddTimestamp adds i to the "timestamp" field.
func (vqtu *VideoQuestionTimestampUpdate) AddTimestamp(i int) *VideoQuestionTimestampUpdate {
	vqtu.mutation.AddTimestamp(i)
	return vqtu
}

// SetVideo sets the "video" edge to the Video entity.
func (vqtu *VideoQuestionTimestampUpdate) SetVideo(v *Video) *VideoQuestionTimestampUpdate {
	return vqtu.SetVideoID(v.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (vqtu *VideoQuestionTimestampUpdate) SetQuestion(q *Question) *VideoQuestionTimestampUpdate {
	return vqtu.SetQuestionID(q.ID)
}

// Mutation returns the VideoQuestionTimestampMutation object of the builder.
func (vqtu *VideoQuestionTimestampUpdate) Mutation() *VideoQuestionTimestampMutation {
	return vqtu.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (vqtu *VideoQuestionTimestampUpdate) ClearVideo() *VideoQuestionTimestampUpdate {
	vqtu.mutation.ClearVideo()
	return vqtu
}

// ClearQuestion clears the "question" edge to the Question entity.
func (vqtu *VideoQuestionTimestampUpdate) ClearQuestion() *VideoQuestionTimestampUpdate {
	vqtu.mutation.ClearQuestion()
	return vqtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vqtu *VideoQuestionTimestampUpdate) Save(ctx context.Context) (int, error) {
	vqtu.defaults()
	return withHooks(ctx, vqtu.sqlSave, vqtu.mutation, vqtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vqtu *VideoQuestionTimestampUpdate) SaveX(ctx context.Context) int {
	affected, err := vqtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vqtu *VideoQuestionTimestampUpdate) Exec(ctx context.Context) error {
	_, err := vqtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vqtu *VideoQuestionTimestampUpdate) ExecX(ctx context.Context) {
	if err := vqtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vqtu *VideoQuestionTimestampUpdate) defaults() {
	if _, ok := vqtu.mutation.UpdatedAt(); !ok {
		v := videoquestiontimestamp.UpdateDefaultUpdatedAt()
		vqtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vqtu *VideoQuestionTimestampUpdate) check() error {
	if vqtu.mutation.VideoCleared() && len(vqtu.mutation.VideoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VideoQuestionTimestamp.video"`)
	}
	if vqtu.mutation.QuestionCleared() && len(vqtu.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VideoQuestionTimestamp.question"`)
	}
	return nil
}

func (vqtu *VideoQuestionTimestampUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vqtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videoquestiontimestamp.Table, videoquestiontimestamp.Columns, sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID))
	if ps := vqtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vqtu.mutation.CreatedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vqtu.mutation.UpdatedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vqtu.mutation.Timestamp(); ok {
		_spec.SetField(videoquestiontimestamp.FieldTimestamp, field.TypeInt, value)
	}
	if value, ok := vqtu.mutation.AddedTimestamp(); ok {
		_spec.AddField(videoquestiontimestamp.FieldTimestamp, field.TypeInt, value)
	}
	if vqtu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.VideoTable,
			Columns: []string{videoquestiontimestamp.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vqtu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.VideoTable,
			Columns: []string{videoquestiontimestamp.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vqtu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.QuestionTable,
			Columns: []string{videoquestiontimestamp.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vqtu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.QuestionTable,
			Columns: []string{videoquestiontimestamp.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vqtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videoquestiontimestamp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vqtu.mutation.done = true
	return n, nil
}

// VideoQuestionTimestampUpdateOne is the builder for updating a single VideoQuestionTimestamp entity.
type VideoQuestionTimestampUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoQuestionTimestampMutation
}

// SetCreatedAt sets the "created_at" field.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetCreatedAt(t time.Time) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.SetCreatedAt(t)
	return vqtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetNillableCreatedAt(t *time.Time) *VideoQuestionTimestampUpdateOne {
	if t != nil {
		vqtuo.SetCreatedAt(*t)
	}
	return vqtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetUpdatedAt(t time.Time) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.SetUpdatedAt(t)
	return vqtuo
}

// SetVideoID sets the "video_id" field.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetVideoID(u uuid.UUID) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.SetVideoID(u)
	return vqtuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetNillableVideoID(u *uuid.UUID) *VideoQuestionTimestampUpdateOne {
	if u != nil {
		vqtuo.SetVideoID(*u)
	}
	return vqtuo
}

// SetQuestionID sets the "question_id" field.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetQuestionID(u uuid.UUID) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.SetQuestionID(u)
	return vqtuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetNillableQuestionID(u *uuid.UUID) *VideoQuestionTimestampUpdateOne {
	if u != nil {
		vqtuo.SetQuestionID(*u)
	}
	return vqtuo
}

// SetTimestamp sets the "timestamp" field.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetTimestamp(i int) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.ResetTimestamp()
	vqtuo.mutation.SetTimestamp(i)
	return vqtuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetNillableTimestamp(i *int) *VideoQuestionTimestampUpdateOne {
	if i != nil {
		vqtuo.SetTimestamp(*i)
	}
	return vqtuo
}

// AddTimestamp adds i to the "timestamp" field.
func (vqtuo *VideoQuestionTimestampUpdateOne) AddTimestamp(i int) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.AddTimestamp(i)
	return vqtuo
}

// SetVideo sets the "video" edge to the Video entity.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetVideo(v *Video) *VideoQuestionTimestampUpdateOne {
	return vqtuo.SetVideoID(v.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (vqtuo *VideoQuestionTimestampUpdateOne) SetQuestion(q *Question) *VideoQuestionTimestampUpdateOne {
	return vqtuo.SetQuestionID(q.ID)
}

// Mutation returns the VideoQuestionTimestampMutation object of the builder.
func (vqtuo *VideoQuestionTimestampUpdateOne) Mutation() *VideoQuestionTimestampMutation {
	return vqtuo.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (vqtuo *VideoQuestionTimestampUpdateOne) ClearVideo() *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.ClearVideo()
	return vqtuo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (vqtuo *VideoQuestionTimestampUpdateOne) ClearQuestion() *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.ClearQuestion()
	return vqtuo
}

// Where appends a list predicates to the VideoQuestionTimestampUpdate builder.
func (vqtuo *VideoQuestionTimestampUpdateOne) Where(ps ...predicate.VideoQuestionTimestamp) *VideoQuestionTimestampUpdateOne {
	vqtuo.mutation.Where(ps...)
	return vqtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vqtuo *VideoQuestionTimestampUpdateOne) Select(field string, fields ...string) *VideoQuestionTimestampUpdateOne {
	vqtuo.fields = append([]string{field}, fields...)
	return vqtuo
}

// Save executes the query and returns the updated VideoQuestionTimestamp entity.
func (vqtuo *VideoQuestionTimestampUpdateOne) Save(ctx context.Context) (*VideoQuestionTimestamp, error) {
	vqtuo.defaults()
	return withHooks(ctx, vqtuo.sqlSave, vqtuo.mutation, vqtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vqtuo *VideoQuestionTimestampUpdateOne) SaveX(ctx context.Context) *VideoQuestionTimestamp {
	node, err := vqtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vqtuo *VideoQuestionTimestampUpdateOne) Exec(ctx context.Context) error {
	_, err := vqtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vqtuo *VideoQuestionTimestampUpdateOne) ExecX(ctx context.Context) {
	if err := vqtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vqtuo *VideoQuestionTimestampUpdateOne) defaults() {
	if _, ok := vqtuo.mutation.UpdatedAt(); !ok {
		v := videoquestiontimestamp.UpdateDefaultUpdatedAt()
		vqtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vqtuo *VideoQuestionTimestampUpdateOne) check() error {
	if vqtuo.mutation.VideoCleared() && len(vqtuo.mutation.VideoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VideoQuestionTimestamp.video"`)
	}
	if vqtuo.mutation.QuestionCleared() && len(vqtuo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VideoQuestionTimestamp.question"`)
	}
	return nil
}

func (vqtuo *VideoQuestionTimestampUpdateOne) sqlSave(ctx context.Context) (_node *VideoQuestionTimestamp, err error) {
	if err := vqtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videoquestiontimestamp.Table, videoquestiontimestamp.Columns, sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID))
	id, ok := vqtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoQuestionTimestamp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vqtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videoquestiontimestamp.FieldID)
		for _, f := range fields {
			if !videoquestiontimestamp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videoquestiontimestamp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vqtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vqtuo.mutation.CreatedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vqtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vqtuo.mutation.Timestamp(); ok {
		_spec.SetField(videoquestiontimestamp.FieldTimestamp, field.TypeInt, value)
	}
	if value, ok := vqtuo.mutation.AddedTimestamp(); ok {
		_spec.AddField(videoquestiontimestamp.FieldTimestamp, field.TypeInt, value)
	}
	if vqtuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.VideoTable,
			Columns: []string{videoquestiontimestamp.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vqtuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.VideoTable,
			Columns: []string{videoquestiontimestamp.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vqtuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.QuestionTable,
			Columns: []string{videoquestiontimestamp.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vqtuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.QuestionTable,
			Columns: []string{videoquestiontimestamp.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoQuestionTimestamp{config: vqtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vqtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videoquestiontimestamp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vqtuo.mutation.done = true
	return _node, nil
}
