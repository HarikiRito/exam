// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/media"
	"template/internal/ent/predicate"
	"template/internal/ent/user"
	"template/internal/ent/video"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CourseUpdate) SetCreatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCreatedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CourseUpdate) SetUpdatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CourseUpdate) SetDeletedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableDeletedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CourseUpdate) ClearDeletedAt() *CourseUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetTitle sets the "title" field.
func (cu *CourseUpdate) SetTitle(s string) *CourseUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableTitle(s *string) *CourseUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CourseUpdate) SetDescription(s string) *CourseUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableDescription(s *string) *CourseUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CourseUpdate) ClearDescription() *CourseUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetMediaID sets the "media_id" field.
func (cu *CourseUpdate) SetMediaID(u uuid.UUID) *CourseUpdate {
	cu.mutation.SetMediaID(u)
	return cu
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableMediaID(u *uuid.UUID) *CourseUpdate {
	if u != nil {
		cu.SetMediaID(*u)
	}
	return cu
}

// ClearMediaID clears the value of the "media_id" field.
func (cu *CourseUpdate) ClearMediaID() *CourseUpdate {
	cu.mutation.ClearMediaID()
	return cu
}

// SetCreatorID sets the "creator_id" field.
func (cu *CourseUpdate) SetCreatorID(u uuid.UUID) *CourseUpdate {
	cu.mutation.SetCreatorID(u)
	return cu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCreatorID(u *uuid.UUID) *CourseUpdate {
	if u != nil {
		cu.SetCreatorID(*u)
	}
	return cu
}

// SetIsPublished sets the "is_published" field.
func (cu *CourseUpdate) SetIsPublished(b bool) *CourseUpdate {
	cu.mutation.SetIsPublished(b)
	return cu
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableIsPublished(b *bool) *CourseUpdate {
	if b != nil {
		cu.SetIsPublished(*b)
	}
	return cu
}

// SetMedia sets the "media" edge to the Media entity.
func (cu *CourseUpdate) SetMedia(m *Media) *CourseUpdate {
	return cu.SetMediaID(m.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (cu *CourseUpdate) SetCreator(u *User) *CourseUpdate {
	return cu.SetCreatorID(u.ID)
}

// AddCourseSectionIDs adds the "course_sections" edge to the CourseSection entity by IDs.
func (cu *CourseUpdate) AddCourseSectionIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.AddCourseSectionIDs(ids...)
	return cu
}

// AddCourseSections adds the "course_sections" edges to the CourseSection entity.
func (cu *CourseUpdate) AddCourseSections(c ...*CourseSection) *CourseUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseSectionIDs(ids...)
}

// AddCourseVideoIDs adds the "course_videos" edge to the Video entity by IDs.
func (cu *CourseUpdate) AddCourseVideoIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.AddCourseVideoIDs(ids...)
	return cu
}

// AddCourseVideos adds the "course_videos" edges to the Video entity.
func (cu *CourseUpdate) AddCourseVideos(v ...*Video) *CourseUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.AddCourseVideoIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (cu *CourseUpdate) ClearMedia() *CourseUpdate {
	cu.mutation.ClearMedia()
	return cu
}

// ClearCreator clears the "creator" edge to the User entity.
func (cu *CourseUpdate) ClearCreator() *CourseUpdate {
	cu.mutation.ClearCreator()
	return cu
}

// ClearCourseSections clears all "course_sections" edges to the CourseSection entity.
func (cu *CourseUpdate) ClearCourseSections() *CourseUpdate {
	cu.mutation.ClearCourseSections()
	return cu
}

// RemoveCourseSectionIDs removes the "course_sections" edge to CourseSection entities by IDs.
func (cu *CourseUpdate) RemoveCourseSectionIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.RemoveCourseSectionIDs(ids...)
	return cu
}

// RemoveCourseSections removes "course_sections" edges to CourseSection entities.
func (cu *CourseUpdate) RemoveCourseSections(c ...*CourseSection) *CourseUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseSectionIDs(ids...)
}

// ClearCourseVideos clears all "course_videos" edges to the Video entity.
func (cu *CourseUpdate) ClearCourseVideos() *CourseUpdate {
	cu.mutation.ClearCourseVideos()
	return cu
}

// RemoveCourseVideoIDs removes the "course_videos" edge to Video entities by IDs.
func (cu *CourseUpdate) RemoveCourseVideoIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.RemoveCourseVideoIDs(ids...)
	return cu
}

// RemoveCourseVideos removes "course_videos" edges to Video entities.
func (cu *CourseUpdate) RemoveCourseVideos(v ...*Video) *CourseUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.RemoveCourseVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CourseUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if course.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized course.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := course.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CourseUpdate) check() error {
	if v, ok := cu.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if cu.mutation.CreatorCleared() && len(cu.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Course.creator"`)
	}
	return nil
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(course.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(course.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(course.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.IsPublished(); ok {
		_spec.SetField(course.FieldIsPublished, field.TypeBool, value)
	}
	if cu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.MediaTable,
			Columns: []string{course.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.MediaTable,
			Columns: []string{course.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CreatorTable,
			Columns: []string{course.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CreatorTable,
			Columns: []string{course.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionsTable,
			Columns: []string{course.CourseSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseSectionsIDs(); len(nodes) > 0 && !cu.mutation.CourseSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionsTable,
			Columns: []string{course.CourseSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionsTable,
			Columns: []string{course.CourseSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseVideosTable,
			Columns: []string{course.CourseVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseVideosIDs(); len(nodes) > 0 && !cu.mutation.CourseVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseVideosTable,
			Columns: []string{course.CourseVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseVideosTable,
			Columns: []string{course.CourseVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CourseUpdateOne) SetCreatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CourseUpdateOne) SetUpdatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CourseUpdateOne) SetDeletedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableDeletedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CourseUpdateOne) ClearDeletedAt() *CourseUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CourseUpdateOne) SetTitle(s string) *CourseUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableTitle(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CourseUpdateOne) SetDescription(s string) *CourseUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableDescription(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CourseUpdateOne) ClearDescription() *CourseUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetMediaID sets the "media_id" field.
func (cuo *CourseUpdateOne) SetMediaID(u uuid.UUID) *CourseUpdateOne {
	cuo.mutation.SetMediaID(u)
	return cuo
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableMediaID(u *uuid.UUID) *CourseUpdateOne {
	if u != nil {
		cuo.SetMediaID(*u)
	}
	return cuo
}

// ClearMediaID clears the value of the "media_id" field.
func (cuo *CourseUpdateOne) ClearMediaID() *CourseUpdateOne {
	cuo.mutation.ClearMediaID()
	return cuo
}

// SetCreatorID sets the "creator_id" field.
func (cuo *CourseUpdateOne) SetCreatorID(u uuid.UUID) *CourseUpdateOne {
	cuo.mutation.SetCreatorID(u)
	return cuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCreatorID(u *uuid.UUID) *CourseUpdateOne {
	if u != nil {
		cuo.SetCreatorID(*u)
	}
	return cuo
}

// SetIsPublished sets the "is_published" field.
func (cuo *CourseUpdateOne) SetIsPublished(b bool) *CourseUpdateOne {
	cuo.mutation.SetIsPublished(b)
	return cuo
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableIsPublished(b *bool) *CourseUpdateOne {
	if b != nil {
		cuo.SetIsPublished(*b)
	}
	return cuo
}

// SetMedia sets the "media" edge to the Media entity.
func (cuo *CourseUpdateOne) SetMedia(m *Media) *CourseUpdateOne {
	return cuo.SetMediaID(m.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (cuo *CourseUpdateOne) SetCreator(u *User) *CourseUpdateOne {
	return cuo.SetCreatorID(u.ID)
}

// AddCourseSectionIDs adds the "course_sections" edge to the CourseSection entity by IDs.
func (cuo *CourseUpdateOne) AddCourseSectionIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.AddCourseSectionIDs(ids...)
	return cuo
}

// AddCourseSections adds the "course_sections" edges to the CourseSection entity.
func (cuo *CourseUpdateOne) AddCourseSections(c ...*CourseSection) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseSectionIDs(ids...)
}

// AddCourseVideoIDs adds the "course_videos" edge to the Video entity by IDs.
func (cuo *CourseUpdateOne) AddCourseVideoIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.AddCourseVideoIDs(ids...)
	return cuo
}

// AddCourseVideos adds the "course_videos" edges to the Video entity.
func (cuo *CourseUpdateOne) AddCourseVideos(v ...*Video) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.AddCourseVideoIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (cuo *CourseUpdateOne) ClearMedia() *CourseUpdateOne {
	cuo.mutation.ClearMedia()
	return cuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (cuo *CourseUpdateOne) ClearCreator() *CourseUpdateOne {
	cuo.mutation.ClearCreator()
	return cuo
}

// ClearCourseSections clears all "course_sections" edges to the CourseSection entity.
func (cuo *CourseUpdateOne) ClearCourseSections() *CourseUpdateOne {
	cuo.mutation.ClearCourseSections()
	return cuo
}

// RemoveCourseSectionIDs removes the "course_sections" edge to CourseSection entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseSectionIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.RemoveCourseSectionIDs(ids...)
	return cuo
}

// RemoveCourseSections removes "course_sections" edges to CourseSection entities.
func (cuo *CourseUpdateOne) RemoveCourseSections(c ...*CourseSection) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseSectionIDs(ids...)
}

// ClearCourseVideos clears all "course_videos" edges to the Video entity.
func (cuo *CourseUpdateOne) ClearCourseVideos() *CourseUpdateOne {
	cuo.mutation.ClearCourseVideos()
	return cuo
}

// RemoveCourseVideoIDs removes the "course_videos" edge to Video entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseVideoIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.RemoveCourseVideoIDs(ids...)
	return cuo
}

// RemoveCourseVideos removes "course_videos" edges to Video entities.
func (cuo *CourseUpdateOne) RemoveCourseVideos(v ...*Video) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.RemoveCourseVideoIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (cuo *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CourseUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if course.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized course.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := course.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CourseUpdateOne) check() error {
	if v, ok := cuo.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if cuo.mutation.CreatorCleared() && len(cuo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Course.creator"`)
	}
	return nil
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(course.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(course.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(course.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.IsPublished(); ok {
		_spec.SetField(course.FieldIsPublished, field.TypeBool, value)
	}
	if cuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.MediaTable,
			Columns: []string{course.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.MediaTable,
			Columns: []string{course.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CreatorTable,
			Columns: []string{course.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CreatorTable,
			Columns: []string{course.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionsTable,
			Columns: []string{course.CourseSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseSectionsIDs(); len(nodes) > 0 && !cuo.mutation.CourseSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionsTable,
			Columns: []string{course.CourseSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseSectionsTable,
			Columns: []string{course.CourseSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseVideosTable,
			Columns: []string{course.CourseVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseVideosIDs(); len(nodes) > 0 && !cuo.mutation.CourseVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseVideosTable,
			Columns: []string{course.CourseVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseVideosTable,
			Columns: []string{course.CourseVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
