// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/question"
	"template/internal/ent/video"
	"template/internal/ent/videoquestiontimestamp"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// VideoQuestionTimestamp is the model entity for the VideoQuestionTimestamp schema.
type VideoQuestionTimestamp struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID uuid.UUID `json:"video_id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID uuid.UUID `json:"question_id,omitempty"`
	// Timestamp in seconds when question should appear during video playback
	Timestamp int `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoQuestionTimestampQuery when eager-loading is set.
	Edges        VideoQuestionTimestampEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VideoQuestionTimestampEdges holds the relations/edges for other nodes in the graph.
type VideoQuestionTimestampEdges struct {
	// Video holds the value of the video edge.
	Video *Video `json:"video,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoQuestionTimestampEdges) VideoOrErr() (*Video, error) {
	if e.Video != nil {
		return e.Video, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: video.Label}
	}
	return nil, &NotLoadedError{edge: "video"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoQuestionTimestampEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VideoQuestionTimestamp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videoquestiontimestamp.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case videoquestiontimestamp.FieldCreatedAt, videoquestiontimestamp.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case videoquestiontimestamp.FieldID, videoquestiontimestamp.FieldVideoID, videoquestiontimestamp.FieldQuestionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VideoQuestionTimestamp fields.
func (vqt *VideoQuestionTimestamp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videoquestiontimestamp.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vqt.ID = *value
			}
		case videoquestiontimestamp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vqt.CreatedAt = value.Time
			}
		case videoquestiontimestamp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vqt.UpdatedAt = value.Time
			}
		case videoquestiontimestamp.FieldVideoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value != nil {
				vqt.VideoID = *value
			}
		case videoquestiontimestamp.FieldQuestionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value != nil {
				vqt.QuestionID = *value
			}
		case videoquestiontimestamp.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				vqt.Timestamp = int(value.Int64)
			}
		default:
			vqt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VideoQuestionTimestamp.
// This includes values selected through modifiers, order, etc.
func (vqt *VideoQuestionTimestamp) Value(name string) (ent.Value, error) {
	return vqt.selectValues.Get(name)
}

// QueryVideo queries the "video" edge of the VideoQuestionTimestamp entity.
func (vqt *VideoQuestionTimestamp) QueryVideo() *VideoQuery {
	return NewVideoQuestionTimestampClient(vqt.config).QueryVideo(vqt)
}

// QueryQuestion queries the "question" edge of the VideoQuestionTimestamp entity.
func (vqt *VideoQuestionTimestamp) QueryQuestion() *QuestionQuery {
	return NewVideoQuestionTimestampClient(vqt.config).QueryQuestion(vqt)
}

// Update returns a builder for updating this VideoQuestionTimestamp.
// Note that you need to call VideoQuestionTimestamp.Unwrap() before calling this method if this VideoQuestionTimestamp
// was returned from a transaction, and the transaction was committed or rolled back.
func (vqt *VideoQuestionTimestamp) Update() *VideoQuestionTimestampUpdateOne {
	return NewVideoQuestionTimestampClient(vqt.config).UpdateOne(vqt)
}

// Unwrap unwraps the VideoQuestionTimestamp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vqt *VideoQuestionTimestamp) Unwrap() *VideoQuestionTimestamp {
	_tx, ok := vqt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VideoQuestionTimestamp is not a transactional entity")
	}
	vqt.config.driver = _tx.drv
	return vqt
}

// String implements the fmt.Stringer.
func (vqt *VideoQuestionTimestamp) String() string {
	var builder strings.Builder
	builder.WriteString("VideoQuestionTimestamp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vqt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vqt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vqt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", vqt.VideoID))
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", vqt.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", vqt.Timestamp))
	builder.WriteByte(')')
	return builder.String()
}

// VideoQuestionTimestamps is a parsable slice of VideoQuestionTimestamp.
type VideoQuestionTimestamps []*VideoQuestionTimestamp
