// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/question"
	"template/internal/ent/video"
	"template/internal/ent/videoquestiontimestamp"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoQuestionTimestampCreate is the builder for creating a VideoQuestionTimestamp entity.
type VideoQuestionTimestampCreate struct {
	config
	mutation *VideoQuestionTimestampMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vqtc *VideoQuestionTimestampCreate) SetCreatedAt(t time.Time) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetCreatedAt(t)
	return vqtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vqtc *VideoQuestionTimestampCreate) SetNillableCreatedAt(t *time.Time) *VideoQuestionTimestampCreate {
	if t != nil {
		vqtc.SetCreatedAt(*t)
	}
	return vqtc
}

// SetUpdatedAt sets the "updated_at" field.
func (vqtc *VideoQuestionTimestampCreate) SetUpdatedAt(t time.Time) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetUpdatedAt(t)
	return vqtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vqtc *VideoQuestionTimestampCreate) SetNillableUpdatedAt(t *time.Time) *VideoQuestionTimestampCreate {
	if t != nil {
		vqtc.SetUpdatedAt(*t)
	}
	return vqtc
}

// SetDeletedAt sets the "deleted_at" field.
func (vqtc *VideoQuestionTimestampCreate) SetDeletedAt(t time.Time) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetDeletedAt(t)
	return vqtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vqtc *VideoQuestionTimestampCreate) SetNillableDeletedAt(t *time.Time) *VideoQuestionTimestampCreate {
	if t != nil {
		vqtc.SetDeletedAt(*t)
	}
	return vqtc
}

// SetVideoID sets the "video_id" field.
func (vqtc *VideoQuestionTimestampCreate) SetVideoID(s string) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetVideoID(s)
	return vqtc
}

// SetQuestionID sets the "question_id" field.
func (vqtc *VideoQuestionTimestampCreate) SetQuestionID(s string) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetQuestionID(s)
	return vqtc
}

// SetTimestamp sets the "timestamp" field.
func (vqtc *VideoQuestionTimestampCreate) SetTimestamp(i int) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetTimestamp(i)
	return vqtc
}

// SetID sets the "id" field.
func (vqtc *VideoQuestionTimestampCreate) SetID(s string) *VideoQuestionTimestampCreate {
	vqtc.mutation.SetID(s)
	return vqtc
}

// SetVideo sets the "video" edge to the Video entity.
func (vqtc *VideoQuestionTimestampCreate) SetVideo(v *Video) *VideoQuestionTimestampCreate {
	return vqtc.SetVideoID(v.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (vqtc *VideoQuestionTimestampCreate) SetQuestion(q *Question) *VideoQuestionTimestampCreate {
	return vqtc.SetQuestionID(q.ID)
}

// Mutation returns the VideoQuestionTimestampMutation object of the builder.
func (vqtc *VideoQuestionTimestampCreate) Mutation() *VideoQuestionTimestampMutation {
	return vqtc.mutation
}

// Save creates the VideoQuestionTimestamp in the database.
func (vqtc *VideoQuestionTimestampCreate) Save(ctx context.Context) (*VideoQuestionTimestamp, error) {
	if err := vqtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vqtc.sqlSave, vqtc.mutation, vqtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vqtc *VideoQuestionTimestampCreate) SaveX(ctx context.Context) *VideoQuestionTimestamp {
	v, err := vqtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vqtc *VideoQuestionTimestampCreate) Exec(ctx context.Context) error {
	_, err := vqtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vqtc *VideoQuestionTimestampCreate) ExecX(ctx context.Context) {
	if err := vqtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vqtc *VideoQuestionTimestampCreate) defaults() error {
	if _, ok := vqtc.mutation.CreatedAt(); !ok {
		if videoquestiontimestamp.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized videoquestiontimestamp.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := videoquestiontimestamp.DefaultCreatedAt()
		vqtc.mutation.SetCreatedAt(v)
	}
	if _, ok := vqtc.mutation.UpdatedAt(); !ok {
		if videoquestiontimestamp.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized videoquestiontimestamp.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := videoquestiontimestamp.DefaultUpdatedAt()
		vqtc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vqtc *VideoQuestionTimestampCreate) check() error {
	if _, ok := vqtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VideoQuestionTimestamp.created_at"`)}
	}
	if _, ok := vqtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VideoQuestionTimestamp.updated_at"`)}
	}
	if _, ok := vqtc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "VideoQuestionTimestamp.video_id"`)}
	}
	if v, ok := vqtc.mutation.VideoID(); ok {
		if err := videoquestiontimestamp.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "VideoQuestionTimestamp.video_id": %w`, err)}
		}
	}
	if _, ok := vqtc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "VideoQuestionTimestamp.question_id"`)}
	}
	if v, ok := vqtc.mutation.QuestionID(); ok {
		if err := videoquestiontimestamp.QuestionIDValidator(v); err != nil {
			return &ValidationError{Name: "question_id", err: fmt.Errorf(`ent: validator failed for field "VideoQuestionTimestamp.question_id": %w`, err)}
		}
	}
	if _, ok := vqtc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "VideoQuestionTimestamp.timestamp"`)}
	}
	if len(vqtc.mutation.VideoIDs()) == 0 {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required edge "VideoQuestionTimestamp.video"`)}
	}
	if len(vqtc.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "VideoQuestionTimestamp.question"`)}
	}
	return nil
}

func (vqtc *VideoQuestionTimestampCreate) sqlSave(ctx context.Context) (*VideoQuestionTimestamp, error) {
	if err := vqtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vqtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vqtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VideoQuestionTimestamp.ID type: %T", _spec.ID.Value)
		}
	}
	vqtc.mutation.id = &_node.ID
	vqtc.mutation.done = true
	return _node, nil
}

func (vqtc *VideoQuestionTimestampCreate) createSpec() (*VideoQuestionTimestamp, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoQuestionTimestamp{config: vqtc.config}
		_spec = sqlgraph.NewCreateSpec(videoquestiontimestamp.Table, sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString))
	)
	if id, ok := vqtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vqtc.mutation.CreatedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vqtc.mutation.UpdatedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vqtc.mutation.DeletedAt(); ok {
		_spec.SetField(videoquestiontimestamp.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vqtc.mutation.Timestamp(); ok {
		_spec.SetField(videoquestiontimestamp.FieldTimestamp, field.TypeInt, value)
		_node.Timestamp = value
	}
	if nodes := vqtc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.VideoTable,
			Columns: []string{videoquestiontimestamp.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vqtc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoquestiontimestamp.QuestionTable,
			Columns: []string{videoquestiontimestamp.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoQuestionTimestampCreateBulk is the builder for creating many VideoQuestionTimestamp entities in bulk.
type VideoQuestionTimestampCreateBulk struct {
	config
	err      error
	builders []*VideoQuestionTimestampCreate
}

// Save creates the VideoQuestionTimestamp entities in the database.
func (vqtcb *VideoQuestionTimestampCreateBulk) Save(ctx context.Context) ([]*VideoQuestionTimestamp, error) {
	if vqtcb.err != nil {
		return nil, vqtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vqtcb.builders))
	nodes := make([]*VideoQuestionTimestamp, len(vqtcb.builders))
	mutators := make([]Mutator, len(vqtcb.builders))
	for i := range vqtcb.builders {
		func(i int, root context.Context) {
			builder := vqtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoQuestionTimestampMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vqtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vqtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vqtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vqtcb *VideoQuestionTimestampCreateBulk) SaveX(ctx context.Context) []*VideoQuestionTimestamp {
	v, err := vqtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vqtcb *VideoQuestionTimestampCreateBulk) Exec(ctx context.Context) error {
	_, err := vqtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vqtcb *VideoQuestionTimestampCreateBulk) ExecX(ctx context.Context) {
	if err := vqtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
