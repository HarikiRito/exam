// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testsession"
	"template/internal/ent/user"
	"template/internal/ent/userquestionanswer"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserQuestionAnswerUpdate is the builder for updating UserQuestionAnswer entities.
type UserQuestionAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *UserQuestionAnswerMutation
}

// Where appends a list predicates to the UserQuestionAnswerUpdate builder.
func (uqau *UserQuestionAnswerUpdate) Where(ps ...predicate.UserQuestionAnswer) *UserQuestionAnswerUpdate {
	uqau.mutation.Where(ps...)
	return uqau
}

// SetCreatedAt sets the "created_at" field.
func (uqau *UserQuestionAnswerUpdate) SetCreatedAt(t time.Time) *UserQuestionAnswerUpdate {
	uqau.mutation.SetCreatedAt(t)
	return uqau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableCreatedAt(t *time.Time) *UserQuestionAnswerUpdate {
	if t != nil {
		uqau.SetCreatedAt(*t)
	}
	return uqau
}

// SetUpdatedAt sets the "updated_at" field.
func (uqau *UserQuestionAnswerUpdate) SetUpdatedAt(t time.Time) *UserQuestionAnswerUpdate {
	uqau.mutation.SetUpdatedAt(t)
	return uqau
}

// SetDeletedAt sets the "deleted_at" field.
func (uqau *UserQuestionAnswerUpdate) SetDeletedAt(t time.Time) *UserQuestionAnswerUpdate {
	uqau.mutation.SetDeletedAt(t)
	return uqau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableDeletedAt(t *time.Time) *UserQuestionAnswerUpdate {
	if t != nil {
		uqau.SetDeletedAt(*t)
	}
	return uqau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uqau *UserQuestionAnswerUpdate) ClearDeletedAt() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearDeletedAt()
	return uqau
}

// SetUserID sets the "user_id" field.
func (uqau *UserQuestionAnswerUpdate) SetUserID(u uuid.UUID) *UserQuestionAnswerUpdate {
	uqau.mutation.SetUserID(u)
	return uqau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableUserID(u *uuid.UUID) *UserQuestionAnswerUpdate {
	if u != nil {
		uqau.SetUserID(*u)
	}
	return uqau
}

// SetQuestionID sets the "question_id" field.
func (uqau *UserQuestionAnswerUpdate) SetQuestionID(u uuid.UUID) *UserQuestionAnswerUpdate {
	uqau.mutation.SetQuestionID(u)
	return uqau
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableQuestionID(u *uuid.UUID) *UserQuestionAnswerUpdate {
	if u != nil {
		uqau.SetQuestionID(*u)
	}
	return uqau
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (uqau *UserQuestionAnswerUpdate) SetSelectedOptionID(u uuid.UUID) *UserQuestionAnswerUpdate {
	uqau.mutation.SetSelectedOptionID(u)
	return uqau
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableSelectedOptionID(u *uuid.UUID) *UserQuestionAnswerUpdate {
	if u != nil {
		uqau.SetSelectedOptionID(*u)
	}
	return uqau
}

// ClearSelectedOptionID clears the value of the "selected_option_id" field.
func (uqau *UserQuestionAnswerUpdate) ClearSelectedOptionID() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearSelectedOptionID()
	return uqau
}

// SetSessionID sets the "session_id" field.
func (uqau *UserQuestionAnswerUpdate) SetSessionID(u uuid.UUID) *UserQuestionAnswerUpdate {
	uqau.mutation.SetSessionID(u)
	return uqau
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableSessionID(u *uuid.UUID) *UserQuestionAnswerUpdate {
	if u != nil {
		uqau.SetSessionID(*u)
	}
	return uqau
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (uqau *UserQuestionAnswerUpdate) SetSelectedOptionText(s string) *UserQuestionAnswerUpdate {
	uqau.mutation.SetSelectedOptionText(s)
	return uqau
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (uqau *UserQuestionAnswerUpdate) SetNillableSelectedOptionText(s *string) *UserQuestionAnswerUpdate {
	if s != nil {
		uqau.SetSelectedOptionText(*s)
	}
	return uqau
}

// ClearSelectedOptionText clears the value of the "selected_option_text" field.
func (uqau *UserQuestionAnswerUpdate) ClearSelectedOptionText() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearSelectedOptionText()
	return uqau
}

// SetUser sets the "user" edge to the User entity.
func (uqau *UserQuestionAnswerUpdate) SetUser(u *User) *UserQuestionAnswerUpdate {
	return uqau.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (uqau *UserQuestionAnswerUpdate) SetQuestion(q *Question) *UserQuestionAnswerUpdate {
	return uqau.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (uqau *UserQuestionAnswerUpdate) SetSelectedOption(q *QuestionOption) *UserQuestionAnswerUpdate {
	return uqau.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (uqau *UserQuestionAnswerUpdate) SetTestSessionID(id uuid.UUID) *UserQuestionAnswerUpdate {
	uqau.mutation.SetTestSessionID(id)
	return uqau
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (uqau *UserQuestionAnswerUpdate) SetTestSession(t *TestSession) *UserQuestionAnswerUpdate {
	return uqau.SetTestSessionID(t.ID)
}

// Mutation returns the UserQuestionAnswerMutation object of the builder.
func (uqau *UserQuestionAnswerUpdate) Mutation() *UserQuestionAnswerMutation {
	return uqau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uqau *UserQuestionAnswerUpdate) ClearUser() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearUser()
	return uqau
}

// ClearQuestion clears the "question" edge to the Question entity.
func (uqau *UserQuestionAnswerUpdate) ClearQuestion() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearQuestion()
	return uqau
}

// ClearSelectedOption clears the "selected_option" edge to the QuestionOption entity.
func (uqau *UserQuestionAnswerUpdate) ClearSelectedOption() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearSelectedOption()
	return uqau
}

// ClearTestSession clears the "test_session" edge to the TestSession entity.
func (uqau *UserQuestionAnswerUpdate) ClearTestSession() *UserQuestionAnswerUpdate {
	uqau.mutation.ClearTestSession()
	return uqau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uqau *UserQuestionAnswerUpdate) Save(ctx context.Context) (int, error) {
	if err := uqau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uqau.sqlSave, uqau.mutation, uqau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uqau *UserQuestionAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := uqau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uqau *UserQuestionAnswerUpdate) Exec(ctx context.Context) error {
	_, err := uqau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqau *UserQuestionAnswerUpdate) ExecX(ctx context.Context) {
	if err := uqau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uqau *UserQuestionAnswerUpdate) defaults() error {
	if _, ok := uqau.mutation.UpdatedAt(); !ok {
		if userquestionanswer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userquestionanswer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userquestionanswer.UpdateDefaultUpdatedAt()
		uqau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uqau *UserQuestionAnswerUpdate) check() error {
	if uqau.mutation.UserCleared() && len(uqau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserQuestionAnswer.user"`)
	}
	if uqau.mutation.QuestionCleared() && len(uqau.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserQuestionAnswer.question"`)
	}
	if uqau.mutation.TestSessionCleared() && len(uqau.mutation.TestSessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserQuestionAnswer.test_session"`)
	}
	return nil
}

func (uqau *UserQuestionAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uqau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userquestionanswer.Table, userquestionanswer.Columns, sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID))
	if ps := uqau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uqau.mutation.CreatedAt(); ok {
		_spec.SetField(userquestionanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uqau.mutation.UpdatedAt(); ok {
		_spec.SetField(userquestionanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uqau.mutation.DeletedAt(); ok {
		_spec.SetField(userquestionanswer.FieldDeletedAt, field.TypeTime, value)
	}
	if uqau.mutation.DeletedAtCleared() {
		_spec.ClearField(userquestionanswer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uqau.mutation.SelectedOptionText(); ok {
		_spec.SetField(userquestionanswer.FieldSelectedOptionText, field.TypeString, value)
	}
	if uqau.mutation.SelectedOptionTextCleared() {
		_spec.ClearField(userquestionanswer.FieldSelectedOptionText, field.TypeString)
	}
	if uqau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.UserTable,
			Columns: []string{userquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.UserTable,
			Columns: []string{userquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqau.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.QuestionTable,
			Columns: []string{userquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqau.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.QuestionTable,
			Columns: []string{userquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqau.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.SelectedOptionTable,
			Columns: []string{userquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqau.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.SelectedOptionTable,
			Columns: []string{userquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqau.mutation.TestSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.TestSessionTable,
			Columns: []string{userquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqau.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.TestSessionTable,
			Columns: []string{userquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uqau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userquestionanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uqau.mutation.done = true
	return n, nil
}

// UserQuestionAnswerUpdateOne is the builder for updating a single UserQuestionAnswer entity.
type UserQuestionAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserQuestionAnswerMutation
}

// SetCreatedAt sets the "created_at" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetCreatedAt(t time.Time) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetCreatedAt(t)
	return uqauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableCreatedAt(t *time.Time) *UserQuestionAnswerUpdateOne {
	if t != nil {
		uqauo.SetCreatedAt(*t)
	}
	return uqauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetUpdatedAt(t time.Time) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetUpdatedAt(t)
	return uqauo
}

// SetDeletedAt sets the "deleted_at" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetDeletedAt(t time.Time) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetDeletedAt(t)
	return uqauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableDeletedAt(t *time.Time) *UserQuestionAnswerUpdateOne {
	if t != nil {
		uqauo.SetDeletedAt(*t)
	}
	return uqauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uqauo *UserQuestionAnswerUpdateOne) ClearDeletedAt() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearDeletedAt()
	return uqauo
}

// SetUserID sets the "user_id" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetUserID(u uuid.UUID) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetUserID(u)
	return uqauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableUserID(u *uuid.UUID) *UserQuestionAnswerUpdateOne {
	if u != nil {
		uqauo.SetUserID(*u)
	}
	return uqauo
}

// SetQuestionID sets the "question_id" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetQuestionID(u uuid.UUID) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetQuestionID(u)
	return uqauo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableQuestionID(u *uuid.UUID) *UserQuestionAnswerUpdateOne {
	if u != nil {
		uqauo.SetQuestionID(*u)
	}
	return uqauo
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetSelectedOptionID(u uuid.UUID) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetSelectedOptionID(u)
	return uqauo
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableSelectedOptionID(u *uuid.UUID) *UserQuestionAnswerUpdateOne {
	if u != nil {
		uqauo.SetSelectedOptionID(*u)
	}
	return uqauo
}

// ClearSelectedOptionID clears the value of the "selected_option_id" field.
func (uqauo *UserQuestionAnswerUpdateOne) ClearSelectedOptionID() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearSelectedOptionID()
	return uqauo
}

// SetSessionID sets the "session_id" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetSessionID(u uuid.UUID) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetSessionID(u)
	return uqauo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableSessionID(u *uuid.UUID) *UserQuestionAnswerUpdateOne {
	if u != nil {
		uqauo.SetSessionID(*u)
	}
	return uqauo
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (uqauo *UserQuestionAnswerUpdateOne) SetSelectedOptionText(s string) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetSelectedOptionText(s)
	return uqauo
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (uqauo *UserQuestionAnswerUpdateOne) SetNillableSelectedOptionText(s *string) *UserQuestionAnswerUpdateOne {
	if s != nil {
		uqauo.SetSelectedOptionText(*s)
	}
	return uqauo
}

// ClearSelectedOptionText clears the value of the "selected_option_text" field.
func (uqauo *UserQuestionAnswerUpdateOne) ClearSelectedOptionText() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearSelectedOptionText()
	return uqauo
}

// SetUser sets the "user" edge to the User entity.
func (uqauo *UserQuestionAnswerUpdateOne) SetUser(u *User) *UserQuestionAnswerUpdateOne {
	return uqauo.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (uqauo *UserQuestionAnswerUpdateOne) SetQuestion(q *Question) *UserQuestionAnswerUpdateOne {
	return uqauo.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (uqauo *UserQuestionAnswerUpdateOne) SetSelectedOption(q *QuestionOption) *UserQuestionAnswerUpdateOne {
	return uqauo.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (uqauo *UserQuestionAnswerUpdateOne) SetTestSessionID(id uuid.UUID) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.SetTestSessionID(id)
	return uqauo
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (uqauo *UserQuestionAnswerUpdateOne) SetTestSession(t *TestSession) *UserQuestionAnswerUpdateOne {
	return uqauo.SetTestSessionID(t.ID)
}

// Mutation returns the UserQuestionAnswerMutation object of the builder.
func (uqauo *UserQuestionAnswerUpdateOne) Mutation() *UserQuestionAnswerMutation {
	return uqauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uqauo *UserQuestionAnswerUpdateOne) ClearUser() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearUser()
	return uqauo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (uqauo *UserQuestionAnswerUpdateOne) ClearQuestion() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearQuestion()
	return uqauo
}

// ClearSelectedOption clears the "selected_option" edge to the QuestionOption entity.
func (uqauo *UserQuestionAnswerUpdateOne) ClearSelectedOption() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearSelectedOption()
	return uqauo
}

// ClearTestSession clears the "test_session" edge to the TestSession entity.
func (uqauo *UserQuestionAnswerUpdateOne) ClearTestSession() *UserQuestionAnswerUpdateOne {
	uqauo.mutation.ClearTestSession()
	return uqauo
}

// Where appends a list predicates to the UserQuestionAnswerUpdate builder.
func (uqauo *UserQuestionAnswerUpdateOne) Where(ps ...predicate.UserQuestionAnswer) *UserQuestionAnswerUpdateOne {
	uqauo.mutation.Where(ps...)
	return uqauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uqauo *UserQuestionAnswerUpdateOne) Select(field string, fields ...string) *UserQuestionAnswerUpdateOne {
	uqauo.fields = append([]string{field}, fields...)
	return uqauo
}

// Save executes the query and returns the updated UserQuestionAnswer entity.
func (uqauo *UserQuestionAnswerUpdateOne) Save(ctx context.Context) (*UserQuestionAnswer, error) {
	if err := uqauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uqauo.sqlSave, uqauo.mutation, uqauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uqauo *UserQuestionAnswerUpdateOne) SaveX(ctx context.Context) *UserQuestionAnswer {
	node, err := uqauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uqauo *UserQuestionAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := uqauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqauo *UserQuestionAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := uqauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uqauo *UserQuestionAnswerUpdateOne) defaults() error {
	if _, ok := uqauo.mutation.UpdatedAt(); !ok {
		if userquestionanswer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userquestionanswer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userquestionanswer.UpdateDefaultUpdatedAt()
		uqauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uqauo *UserQuestionAnswerUpdateOne) check() error {
	if uqauo.mutation.UserCleared() && len(uqauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserQuestionAnswer.user"`)
	}
	if uqauo.mutation.QuestionCleared() && len(uqauo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserQuestionAnswer.question"`)
	}
	if uqauo.mutation.TestSessionCleared() && len(uqauo.mutation.TestSessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserQuestionAnswer.test_session"`)
	}
	return nil
}

func (uqauo *UserQuestionAnswerUpdateOne) sqlSave(ctx context.Context) (_node *UserQuestionAnswer, err error) {
	if err := uqauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userquestionanswer.Table, userquestionanswer.Columns, sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID))
	id, ok := uqauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserQuestionAnswer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uqauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userquestionanswer.FieldID)
		for _, f := range fields {
			if !userquestionanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userquestionanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uqauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uqauo.mutation.CreatedAt(); ok {
		_spec.SetField(userquestionanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uqauo.mutation.UpdatedAt(); ok {
		_spec.SetField(userquestionanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uqauo.mutation.DeletedAt(); ok {
		_spec.SetField(userquestionanswer.FieldDeletedAt, field.TypeTime, value)
	}
	if uqauo.mutation.DeletedAtCleared() {
		_spec.ClearField(userquestionanswer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uqauo.mutation.SelectedOptionText(); ok {
		_spec.SetField(userquestionanswer.FieldSelectedOptionText, field.TypeString, value)
	}
	if uqauo.mutation.SelectedOptionTextCleared() {
		_spec.ClearField(userquestionanswer.FieldSelectedOptionText, field.TypeString)
	}
	if uqauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.UserTable,
			Columns: []string{userquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.UserTable,
			Columns: []string{userquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqauo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.QuestionTable,
			Columns: []string{userquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqauo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.QuestionTable,
			Columns: []string{userquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqauo.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.SelectedOptionTable,
			Columns: []string{userquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqauo.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.SelectedOptionTable,
			Columns: []string{userquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqauo.mutation.TestSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.TestSessionTable,
			Columns: []string{userquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqauo.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.TestSessionTable,
			Columns: []string{userquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserQuestionAnswer{config: uqauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uqauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userquestionanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uqauo.mutation.done = true
	return _node, nil
}
