// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CourseSection is the model entity for the CourseSection schema.
type CourseSection struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID string `json:"course_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseSectionQuery when eager-loading is set.
	Edges        CourseSectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CourseSectionEdges holds the relations/edges for other nodes in the graph.
type CourseSectionEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// CourseVideos holds the value of the course_videos edge.
	CourseVideos []*Video `json:"course_videos,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseSectionEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// CourseVideosOrErr returns the CourseVideos value or an error if the edge
// was not loaded in eager-loading.
func (e CourseSectionEdges) CourseVideosOrErr() ([]*Video, error) {
	if e.loadedTypes[1] {
		return e.CourseVideos, nil
	}
	return nil, &NotLoadedError{edge: "course_videos"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e CourseSectionEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[2] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseSection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coursesection.FieldID, coursesection.FieldCourseID, coursesection.FieldTitle, coursesection.FieldDescription:
			values[i] = new(sql.NullString)
		case coursesection.FieldCreatedAt, coursesection.FieldUpdatedAt, coursesection.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseSection fields.
func (cs *CourseSection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coursesection.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cs.ID = value.String
			}
		case coursesection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case coursesection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case coursesection.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cs.DeletedAt = new(time.Time)
				*cs.DeletedAt = value.Time
			}
		case coursesection.FieldCourseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				cs.CourseID = value.String
			}
		case coursesection.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cs.Title = value.String
			}
		case coursesection.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cs.Description = value.String
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CourseSection.
// This includes values selected through modifiers, order, etc.
func (cs *CourseSection) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryCourse queries the "course" edge of the CourseSection entity.
func (cs *CourseSection) QueryCourse() *CourseQuery {
	return NewCourseSectionClient(cs.config).QueryCourse(cs)
}

// QueryCourseVideos queries the "course_videos" edge of the CourseSection entity.
func (cs *CourseSection) QueryCourseVideos() *VideoQuery {
	return NewCourseSectionClient(cs.config).QueryCourseVideos(cs)
}

// QueryQuestions queries the "questions" edge of the CourseSection entity.
func (cs *CourseSection) QueryQuestions() *QuestionQuery {
	return NewCourseSectionClient(cs.config).QueryQuestions(cs)
}

// Update returns a builder for updating this CourseSection.
// Note that you need to call CourseSection.Unwrap() before calling this method if this CourseSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CourseSection) Update() *CourseSectionUpdateOne {
	return NewCourseSectionClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CourseSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CourseSection) Unwrap() *CourseSection {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseSection is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CourseSection) String() string {
	var builder strings.Builder
	builder.WriteString("CourseSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cs.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("course_id=")
	builder.WriteString(cs.CourseID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(cs.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cs.Description)
	builder.WriteByte(')')
	return builder.String()
}

// CourseSections is a parsable slice of CourseSection.
type CourseSections []*CourseSection
