// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/test"
	"template/internal/ent/testquestioncount"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionCountCreate is the builder for creating a TestQuestionCount entity.
type TestQuestionCountCreate struct {
	config
	mutation *TestQuestionCountMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tqcc *TestQuestionCountCreate) SetCreatedAt(t time.Time) *TestQuestionCountCreate {
	tqcc.mutation.SetCreatedAt(t)
	return tqcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqcc *TestQuestionCountCreate) SetNillableCreatedAt(t *time.Time) *TestQuestionCountCreate {
	if t != nil {
		tqcc.SetCreatedAt(*t)
	}
	return tqcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqcc *TestQuestionCountCreate) SetUpdatedAt(t time.Time) *TestQuestionCountCreate {
	tqcc.mutation.SetUpdatedAt(t)
	return tqcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqcc *TestQuestionCountCreate) SetNillableUpdatedAt(t *time.Time) *TestQuestionCountCreate {
	if t != nil {
		tqcc.SetUpdatedAt(*t)
	}
	return tqcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tqcc *TestQuestionCountCreate) SetDeletedAt(t time.Time) *TestQuestionCountCreate {
	tqcc.mutation.SetDeletedAt(t)
	return tqcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqcc *TestQuestionCountCreate) SetNillableDeletedAt(t *time.Time) *TestQuestionCountCreate {
	if t != nil {
		tqcc.SetDeletedAt(*t)
	}
	return tqcc
}

// SetTestID sets the "test_id" field.
func (tqcc *TestQuestionCountCreate) SetTestID(u uuid.UUID) *TestQuestionCountCreate {
	tqcc.mutation.SetTestID(u)
	return tqcc
}

// SetNumberOfQuestions sets the "number_of_questions" field.
func (tqcc *TestQuestionCountCreate) SetNumberOfQuestions(i int) *TestQuestionCountCreate {
	tqcc.mutation.SetNumberOfQuestions(i)
	return tqcc
}

// SetNillableNumberOfQuestions sets the "number_of_questions" field if the given value is not nil.
func (tqcc *TestQuestionCountCreate) SetNillableNumberOfQuestions(i *int) *TestQuestionCountCreate {
	if i != nil {
		tqcc.SetNumberOfQuestions(*i)
	}
	return tqcc
}

// SetPointsPerQuestion sets the "points_per_question" field.
func (tqcc *TestQuestionCountCreate) SetPointsPerQuestion(i int) *TestQuestionCountCreate {
	tqcc.mutation.SetPointsPerQuestion(i)
	return tqcc
}

// SetNillablePointsPerQuestion sets the "points_per_question" field if the given value is not nil.
func (tqcc *TestQuestionCountCreate) SetNillablePointsPerQuestion(i *int) *TestQuestionCountCreate {
	if i != nil {
		tqcc.SetPointsPerQuestion(*i)
	}
	return tqcc
}

// SetID sets the "id" field.
func (tqcc *TestQuestionCountCreate) SetID(u uuid.UUID) *TestQuestionCountCreate {
	tqcc.mutation.SetID(u)
	return tqcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tqcc *TestQuestionCountCreate) SetNillableID(u *uuid.UUID) *TestQuestionCountCreate {
	if u != nil {
		tqcc.SetID(*u)
	}
	return tqcc
}

// SetTest sets the "test" edge to the Test entity.
func (tqcc *TestQuestionCountCreate) SetTest(t *Test) *TestQuestionCountCreate {
	return tqcc.SetTestID(t.ID)
}

// Mutation returns the TestQuestionCountMutation object of the builder.
func (tqcc *TestQuestionCountCreate) Mutation() *TestQuestionCountMutation {
	return tqcc.mutation
}

// Save creates the TestQuestionCount in the database.
func (tqcc *TestQuestionCountCreate) Save(ctx context.Context) (*TestQuestionCount, error) {
	if err := tqcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tqcc.sqlSave, tqcc.mutation, tqcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tqcc *TestQuestionCountCreate) SaveX(ctx context.Context) *TestQuestionCount {
	v, err := tqcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqcc *TestQuestionCountCreate) Exec(ctx context.Context) error {
	_, err := tqcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqcc *TestQuestionCountCreate) ExecX(ctx context.Context) {
	if err := tqcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqcc *TestQuestionCountCreate) defaults() error {
	if _, ok := tqcc.mutation.CreatedAt(); !ok {
		if testquestioncount.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestioncount.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testquestioncount.DefaultCreatedAt()
		tqcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqcc.mutation.UpdatedAt(); !ok {
		if testquestioncount.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestioncount.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestioncount.DefaultUpdatedAt()
		tqcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tqcc.mutation.NumberOfQuestions(); !ok {
		v := testquestioncount.DefaultNumberOfQuestions
		tqcc.mutation.SetNumberOfQuestions(v)
	}
	if _, ok := tqcc.mutation.PointsPerQuestion(); !ok {
		v := testquestioncount.DefaultPointsPerQuestion
		tqcc.mutation.SetPointsPerQuestion(v)
	}
	if _, ok := tqcc.mutation.ID(); !ok {
		if testquestioncount.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testquestioncount.DefaultID (forgotten import ent/runtime?)")
		}
		v := testquestioncount.DefaultID()
		tqcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqcc *TestQuestionCountCreate) check() error {
	if _, ok := tqcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestQuestionCount.created_at"`)}
	}
	if _, ok := tqcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestQuestionCount.updated_at"`)}
	}
	if _, ok := tqcc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "TestQuestionCount.test_id"`)}
	}
	if _, ok := tqcc.mutation.NumberOfQuestions(); !ok {
		return &ValidationError{Name: "number_of_questions", err: errors.New(`ent: missing required field "TestQuestionCount.number_of_questions"`)}
	}
	if _, ok := tqcc.mutation.PointsPerQuestion(); !ok {
		return &ValidationError{Name: "points_per_question", err: errors.New(`ent: missing required field "TestQuestionCount.points_per_question"`)}
	}
	if len(tqcc.mutation.TestIDs()) == 0 {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required edge "TestQuestionCount.test"`)}
	}
	return nil
}

func (tqcc *TestQuestionCountCreate) sqlSave(ctx context.Context) (*TestQuestionCount, error) {
	if err := tqcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tqcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tqcc.mutation.id = &_node.ID
	tqcc.mutation.done = true
	return _node, nil
}

func (tqcc *TestQuestionCountCreate) createSpec() (*TestQuestionCount, *sqlgraph.CreateSpec) {
	var (
		_node = &TestQuestionCount{config: tqcc.config}
		_spec = sqlgraph.NewCreateSpec(testquestioncount.Table, sqlgraph.NewFieldSpec(testquestioncount.FieldID, field.TypeUUID))
	)
	if id, ok := tqcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tqcc.mutation.CreatedAt(); ok {
		_spec.SetField(testquestioncount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tqcc.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestioncount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tqcc.mutation.DeletedAt(); ok {
		_spec.SetField(testquestioncount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tqcc.mutation.NumberOfQuestions(); ok {
		_spec.SetField(testquestioncount.FieldNumberOfQuestions, field.TypeInt, value)
		_node.NumberOfQuestions = value
	}
	if value, ok := tqcc.mutation.PointsPerQuestion(); ok {
		_spec.SetField(testquestioncount.FieldPointsPerQuestion, field.TypeInt, value)
		_node.PointsPerQuestion = value
	}
	if nodes := tqcc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestioncount.TestTable,
			Columns: []string{testquestioncount.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestQuestionCountCreateBulk is the builder for creating many TestQuestionCount entities in bulk.
type TestQuestionCountCreateBulk struct {
	config
	err      error
	builders []*TestQuestionCountCreate
}

// Save creates the TestQuestionCount entities in the database.
func (tqccb *TestQuestionCountCreateBulk) Save(ctx context.Context) ([]*TestQuestionCount, error) {
	if tqccb.err != nil {
		return nil, tqccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tqccb.builders))
	nodes := make([]*TestQuestionCount, len(tqccb.builders))
	mutators := make([]Mutator, len(tqccb.builders))
	for i := range tqccb.builders {
		func(i int, root context.Context) {
			builder := tqccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestQuestionCountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqccb *TestQuestionCountCreateBulk) SaveX(ctx context.Context) []*TestQuestionCount {
	v, err := tqccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqccb *TestQuestionCountCreateBulk) Exec(ctx context.Context) error {
	_, err := tqccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqccb *TestQuestionCountCreateBulk) ExecX(ctx context.Context) {
	if err := tqccb.Exec(ctx); err != nil {
		panic(err)
	}
}
