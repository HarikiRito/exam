// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questioncollection"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionCollectionUpdate is the builder for updating QuestionCollection entities.
type QuestionCollectionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionCollectionMutation
}

// Where appends a list predicates to the QuestionCollectionUpdate builder.
func (qcu *QuestionCollectionUpdate) Where(ps ...predicate.QuestionCollection) *QuestionCollectionUpdate {
	qcu.mutation.Where(ps...)
	return qcu
}

// SetCreatedAt sets the "created_at" field.
func (qcu *QuestionCollectionUpdate) SetCreatedAt(t time.Time) *QuestionCollectionUpdate {
	qcu.mutation.SetCreatedAt(t)
	return qcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcu *QuestionCollectionUpdate) SetNillableCreatedAt(t *time.Time) *QuestionCollectionUpdate {
	if t != nil {
		qcu.SetCreatedAt(*t)
	}
	return qcu
}

// SetUpdatedAt sets the "updated_at" field.
func (qcu *QuestionCollectionUpdate) SetUpdatedAt(t time.Time) *QuestionCollectionUpdate {
	qcu.mutation.SetUpdatedAt(t)
	return qcu
}

// SetDeletedAt sets the "deleted_at" field.
func (qcu *QuestionCollectionUpdate) SetDeletedAt(t time.Time) *QuestionCollectionUpdate {
	qcu.mutation.SetDeletedAt(t)
	return qcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qcu *QuestionCollectionUpdate) SetNillableDeletedAt(t *time.Time) *QuestionCollectionUpdate {
	if t != nil {
		qcu.SetDeletedAt(*t)
	}
	return qcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qcu *QuestionCollectionUpdate) ClearDeletedAt() *QuestionCollectionUpdate {
	qcu.mutation.ClearDeletedAt()
	return qcu
}

// SetTitle sets the "title" field.
func (qcu *QuestionCollectionUpdate) SetTitle(s string) *QuestionCollectionUpdate {
	qcu.mutation.SetTitle(s)
	return qcu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (qcu *QuestionCollectionUpdate) SetNillableTitle(s *string) *QuestionCollectionUpdate {
	if s != nil {
		qcu.SetTitle(*s)
	}
	return qcu
}

// SetDescription sets the "description" field.
func (qcu *QuestionCollectionUpdate) SetDescription(s string) *QuestionCollectionUpdate {
	qcu.mutation.SetDescription(s)
	return qcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcu *QuestionCollectionUpdate) SetNillableDescription(s *string) *QuestionCollectionUpdate {
	if s != nil {
		qcu.SetDescription(*s)
	}
	return qcu
}

// ClearDescription clears the value of the "description" field.
func (qcu *QuestionCollectionUpdate) ClearDescription() *QuestionCollectionUpdate {
	qcu.mutation.ClearDescription()
	return qcu
}

// SetCreatorID sets the "creator_id" field.
func (qcu *QuestionCollectionUpdate) SetCreatorID(u uuid.UUID) *QuestionCollectionUpdate {
	qcu.mutation.SetCreatorID(u)
	return qcu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (qcu *QuestionCollectionUpdate) SetNillableCreatorID(u *uuid.UUID) *QuestionCollectionUpdate {
	if u != nil {
		qcu.SetCreatorID(*u)
	}
	return qcu
}

// SetCourseSectionID sets the "course_section_id" field.
func (qcu *QuestionCollectionUpdate) SetCourseSectionID(u uuid.UUID) *QuestionCollectionUpdate {
	qcu.mutation.SetCourseSectionID(u)
	return qcu
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (qcu *QuestionCollectionUpdate) SetNillableCourseSectionID(u *uuid.UUID) *QuestionCollectionUpdate {
	if u != nil {
		qcu.SetCourseSectionID(*u)
	}
	return qcu
}

// ClearCourseSectionID clears the value of the "course_section_id" field.
func (qcu *QuestionCollectionUpdate) ClearCourseSectionID() *QuestionCollectionUpdate {
	qcu.mutation.ClearCourseSectionID()
	return qcu
}

// SetCreator sets the "creator" edge to the User entity.
func (qcu *QuestionCollectionUpdate) SetCreator(u *User) *QuestionCollectionUpdate {
	return qcu.SetCreatorID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcu *QuestionCollectionUpdate) AddQuestionIDs(ids ...uuid.UUID) *QuestionCollectionUpdate {
	qcu.mutation.AddQuestionIDs(ids...)
	return qcu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcu *QuestionCollectionUpdate) AddQuestions(q ...*Question) *QuestionCollectionUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.AddQuestionIDs(ids...)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (qcu *QuestionCollectionUpdate) SetCourseSection(c *CourseSection) *QuestionCollectionUpdate {
	return qcu.SetCourseSectionID(c.ID)
}

// Mutation returns the QuestionCollectionMutation object of the builder.
func (qcu *QuestionCollectionUpdate) Mutation() *QuestionCollectionMutation {
	return qcu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (qcu *QuestionCollectionUpdate) ClearCreator() *QuestionCollectionUpdate {
	qcu.mutation.ClearCreator()
	return qcu
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qcu *QuestionCollectionUpdate) ClearQuestions() *QuestionCollectionUpdate {
	qcu.mutation.ClearQuestions()
	return qcu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qcu *QuestionCollectionUpdate) RemoveQuestionIDs(ids ...uuid.UUID) *QuestionCollectionUpdate {
	qcu.mutation.RemoveQuestionIDs(ids...)
	return qcu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qcu *QuestionCollectionUpdate) RemoveQuestions(q ...*Question) *QuestionCollectionUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.RemoveQuestionIDs(ids...)
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (qcu *QuestionCollectionUpdate) ClearCourseSection() *QuestionCollectionUpdate {
	qcu.mutation.ClearCourseSection()
	return qcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcu *QuestionCollectionUpdate) Save(ctx context.Context) (int, error) {
	if err := qcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, qcu.sqlSave, qcu.mutation, qcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcu *QuestionCollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := qcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcu *QuestionCollectionUpdate) Exec(ctx context.Context) error {
	_, err := qcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcu *QuestionCollectionUpdate) ExecX(ctx context.Context) {
	if err := qcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcu *QuestionCollectionUpdate) defaults() error {
	if _, ok := qcu.mutation.UpdatedAt(); !ok {
		if questioncollection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized questioncollection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := questioncollection.UpdateDefaultUpdatedAt()
		qcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qcu *QuestionCollectionUpdate) check() error {
	if v, ok := qcu.mutation.Title(); ok {
		if err := questioncollection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "QuestionCollection.title": %w`, err)}
		}
	}
	if qcu.mutation.CreatorCleared() && len(qcu.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionCollection.creator"`)
	}
	return nil
}

func (qcu *QuestionCollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(questioncollection.Table, questioncollection.Columns, sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID))
	if ps := qcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcu.mutation.CreatedAt(); ok {
		_spec.SetField(questioncollection.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qcu.mutation.UpdatedAt(); ok {
		_spec.SetField(questioncollection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcu.mutation.DeletedAt(); ok {
		_spec.SetField(questioncollection.FieldDeletedAt, field.TypeTime, value)
	}
	if qcu.mutation.DeletedAtCleared() {
		_spec.ClearField(questioncollection.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qcu.mutation.Title(); ok {
		_spec.SetField(questioncollection.FieldTitle, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Description(); ok {
		_spec.SetField(questioncollection.FieldDescription, field.TypeString, value)
	}
	if qcu.mutation.DescriptionCleared() {
		_spec.ClearField(questioncollection.FieldDescription, field.TypeString)
	}
	if qcu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CreatorTable,
			Columns: []string{questioncollection.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CreatorTable,
			Columns: []string{questioncollection.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qcu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcu.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CourseSectionTable,
			Columns: []string{questioncollection.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CourseSectionTable,
			Columns: []string{questioncollection.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questioncollection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcu.mutation.done = true
	return n, nil
}

// QuestionCollectionUpdateOne is the builder for updating a single QuestionCollection entity.
type QuestionCollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionCollectionMutation
}

// SetCreatedAt sets the "created_at" field.
func (qcuo *QuestionCollectionUpdateOne) SetCreatedAt(t time.Time) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetCreatedAt(t)
	return qcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcuo *QuestionCollectionUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionCollectionUpdateOne {
	if t != nil {
		qcuo.SetCreatedAt(*t)
	}
	return qcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (qcuo *QuestionCollectionUpdateOne) SetUpdatedAt(t time.Time) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetUpdatedAt(t)
	return qcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (qcuo *QuestionCollectionUpdateOne) SetDeletedAt(t time.Time) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetDeletedAt(t)
	return qcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qcuo *QuestionCollectionUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionCollectionUpdateOne {
	if t != nil {
		qcuo.SetDeletedAt(*t)
	}
	return qcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qcuo *QuestionCollectionUpdateOne) ClearDeletedAt() *QuestionCollectionUpdateOne {
	qcuo.mutation.ClearDeletedAt()
	return qcuo
}

// SetTitle sets the "title" field.
func (qcuo *QuestionCollectionUpdateOne) SetTitle(s string) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetTitle(s)
	return qcuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (qcuo *QuestionCollectionUpdateOne) SetNillableTitle(s *string) *QuestionCollectionUpdateOne {
	if s != nil {
		qcuo.SetTitle(*s)
	}
	return qcuo
}

// SetDescription sets the "description" field.
func (qcuo *QuestionCollectionUpdateOne) SetDescription(s string) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetDescription(s)
	return qcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcuo *QuestionCollectionUpdateOne) SetNillableDescription(s *string) *QuestionCollectionUpdateOne {
	if s != nil {
		qcuo.SetDescription(*s)
	}
	return qcuo
}

// ClearDescription clears the value of the "description" field.
func (qcuo *QuestionCollectionUpdateOne) ClearDescription() *QuestionCollectionUpdateOne {
	qcuo.mutation.ClearDescription()
	return qcuo
}

// SetCreatorID sets the "creator_id" field.
func (qcuo *QuestionCollectionUpdateOne) SetCreatorID(u uuid.UUID) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetCreatorID(u)
	return qcuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (qcuo *QuestionCollectionUpdateOne) SetNillableCreatorID(u *uuid.UUID) *QuestionCollectionUpdateOne {
	if u != nil {
		qcuo.SetCreatorID(*u)
	}
	return qcuo
}

// SetCourseSectionID sets the "course_section_id" field.
func (qcuo *QuestionCollectionUpdateOne) SetCourseSectionID(u uuid.UUID) *QuestionCollectionUpdateOne {
	qcuo.mutation.SetCourseSectionID(u)
	return qcuo
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (qcuo *QuestionCollectionUpdateOne) SetNillableCourseSectionID(u *uuid.UUID) *QuestionCollectionUpdateOne {
	if u != nil {
		qcuo.SetCourseSectionID(*u)
	}
	return qcuo
}

// ClearCourseSectionID clears the value of the "course_section_id" field.
func (qcuo *QuestionCollectionUpdateOne) ClearCourseSectionID() *QuestionCollectionUpdateOne {
	qcuo.mutation.ClearCourseSectionID()
	return qcuo
}

// SetCreator sets the "creator" edge to the User entity.
func (qcuo *QuestionCollectionUpdateOne) SetCreator(u *User) *QuestionCollectionUpdateOne {
	return qcuo.SetCreatorID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcuo *QuestionCollectionUpdateOne) AddQuestionIDs(ids ...uuid.UUID) *QuestionCollectionUpdateOne {
	qcuo.mutation.AddQuestionIDs(ids...)
	return qcuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcuo *QuestionCollectionUpdateOne) AddQuestions(q ...*Question) *QuestionCollectionUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.AddQuestionIDs(ids...)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (qcuo *QuestionCollectionUpdateOne) SetCourseSection(c *CourseSection) *QuestionCollectionUpdateOne {
	return qcuo.SetCourseSectionID(c.ID)
}

// Mutation returns the QuestionCollectionMutation object of the builder.
func (qcuo *QuestionCollectionUpdateOne) Mutation() *QuestionCollectionMutation {
	return qcuo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (qcuo *QuestionCollectionUpdateOne) ClearCreator() *QuestionCollectionUpdateOne {
	qcuo.mutation.ClearCreator()
	return qcuo
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qcuo *QuestionCollectionUpdateOne) ClearQuestions() *QuestionCollectionUpdateOne {
	qcuo.mutation.ClearQuestions()
	return qcuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qcuo *QuestionCollectionUpdateOne) RemoveQuestionIDs(ids ...uuid.UUID) *QuestionCollectionUpdateOne {
	qcuo.mutation.RemoveQuestionIDs(ids...)
	return qcuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qcuo *QuestionCollectionUpdateOne) RemoveQuestions(q ...*Question) *QuestionCollectionUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.RemoveQuestionIDs(ids...)
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (qcuo *QuestionCollectionUpdateOne) ClearCourseSection() *QuestionCollectionUpdateOne {
	qcuo.mutation.ClearCourseSection()
	return qcuo
}

// Where appends a list predicates to the QuestionCollectionUpdate builder.
func (qcuo *QuestionCollectionUpdateOne) Where(ps ...predicate.QuestionCollection) *QuestionCollectionUpdateOne {
	qcuo.mutation.Where(ps...)
	return qcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcuo *QuestionCollectionUpdateOne) Select(field string, fields ...string) *QuestionCollectionUpdateOne {
	qcuo.fields = append([]string{field}, fields...)
	return qcuo
}

// Save executes the query and returns the updated QuestionCollection entity.
func (qcuo *QuestionCollectionUpdateOne) Save(ctx context.Context) (*QuestionCollection, error) {
	if err := qcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qcuo.sqlSave, qcuo.mutation, qcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcuo *QuestionCollectionUpdateOne) SaveX(ctx context.Context) *QuestionCollection {
	node, err := qcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcuo *QuestionCollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := qcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcuo *QuestionCollectionUpdateOne) ExecX(ctx context.Context) {
	if err := qcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcuo *QuestionCollectionUpdateOne) defaults() error {
	if _, ok := qcuo.mutation.UpdatedAt(); !ok {
		if questioncollection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized questioncollection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := questioncollection.UpdateDefaultUpdatedAt()
		qcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qcuo *QuestionCollectionUpdateOne) check() error {
	if v, ok := qcuo.mutation.Title(); ok {
		if err := questioncollection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "QuestionCollection.title": %w`, err)}
		}
	}
	if qcuo.mutation.CreatorCleared() && len(qcuo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionCollection.creator"`)
	}
	return nil
}

func (qcuo *QuestionCollectionUpdateOne) sqlSave(ctx context.Context) (_node *QuestionCollection, err error) {
	if err := qcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questioncollection.Table, questioncollection.Columns, sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID))
	id, ok := qcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionCollection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questioncollection.FieldID)
		for _, f := range fields {
			if !questioncollection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questioncollection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcuo.mutation.CreatedAt(); ok {
		_spec.SetField(questioncollection.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(questioncollection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcuo.mutation.DeletedAt(); ok {
		_spec.SetField(questioncollection.FieldDeletedAt, field.TypeTime, value)
	}
	if qcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(questioncollection.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qcuo.mutation.Title(); ok {
		_spec.SetField(questioncollection.FieldTitle, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Description(); ok {
		_spec.SetField(questioncollection.FieldDescription, field.TypeString, value)
	}
	if qcuo.mutation.DescriptionCleared() {
		_spec.ClearField(questioncollection.FieldDescription, field.TypeString)
	}
	if qcuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CreatorTable,
			Columns: []string{questioncollection.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CreatorTable,
			Columns: []string{questioncollection.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qcuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcuo.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CourseSectionTable,
			Columns: []string{questioncollection.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CourseSectionTable,
			Columns: []string{questioncollection.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionCollection{config: qcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questioncollection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcuo.mutation.done = true
	return _node, nil
}
