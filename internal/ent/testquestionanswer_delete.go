// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"template/internal/ent/predicate"
	"template/internal/ent/testquestionanswer"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestQuestionAnswerDelete is the builder for deleting a TestQuestionAnswer entity.
type TestQuestionAnswerDelete struct {
	config
	hooks    []Hook
	mutation *TestQuestionAnswerMutation
}

// Where appends a list predicates to the TestQuestionAnswerDelete builder.
func (tqad *TestQuestionAnswerDelete) Where(ps ...predicate.TestQuestionAnswer) *TestQuestionAnswerDelete {
	tqad.mutation.Where(ps...)
	return tqad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tqad *TestQuestionAnswerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tqad.sqlExec, tqad.mutation, tqad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tqad *TestQuestionAnswerDelete) ExecX(ctx context.Context) int {
	n, err := tqad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tqad *TestQuestionAnswerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testquestionanswer.Table, sqlgraph.NewFieldSpec(testquestionanswer.FieldID, field.TypeUUID))
	if ps := tqad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tqad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tqad.mutation.done = true
	return affected, err
}

// TestQuestionAnswerDeleteOne is the builder for deleting a single TestQuestionAnswer entity.
type TestQuestionAnswerDeleteOne struct {
	tqad *TestQuestionAnswerDelete
}

// Where appends a list predicates to the TestQuestionAnswerDelete builder.
func (tqado *TestQuestionAnswerDeleteOne) Where(ps ...predicate.TestQuestionAnswer) *TestQuestionAnswerDeleteOne {
	tqado.tqad.mutation.Where(ps...)
	return tqado
}

// Exec executes the deletion query.
func (tqado *TestQuestionAnswerDeleteOne) Exec(ctx context.Context) error {
	n, err := tqado.tqad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testquestionanswer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tqado *TestQuestionAnswerDeleteOne) ExecX(ctx context.Context) {
	if err := tqado.Exec(ctx); err != nil {
		panic(err)
	}
}
