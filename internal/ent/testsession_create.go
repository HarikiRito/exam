// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/test"
	"template/internal/ent/testsession"
	"template/internal/ent/testsessionanswer"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestSessionCreate is the builder for creating a TestSession entity.
type TestSessionCreate struct {
	config
	mutation *TestSessionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TestSessionCreate) SetCreatedAt(t time.Time) *TestSessionCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableCreatedAt(t *time.Time) *TestSessionCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TestSessionCreate) SetUpdatedAt(t time.Time) *TestSessionCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableUpdatedAt(t *time.Time) *TestSessionCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tsc *TestSessionCreate) SetDeletedAt(t time.Time) *TestSessionCreate {
	tsc.mutation.SetDeletedAt(t)
	return tsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableDeletedAt(t *time.Time) *TestSessionCreate {
	if t != nil {
		tsc.SetDeletedAt(*t)
	}
	return tsc
}

// SetUserID sets the "user_id" field.
func (tsc *TestSessionCreate) SetUserID(u uuid.UUID) *TestSessionCreate {
	tsc.mutation.SetUserID(u)
	return tsc
}

// SetCourseSectionID sets the "course_section_id" field.
func (tsc *TestSessionCreate) SetCourseSectionID(u uuid.UUID) *TestSessionCreate {
	tsc.mutation.SetCourseSectionID(u)
	return tsc
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableCourseSectionID(u *uuid.UUID) *TestSessionCreate {
	if u != nil {
		tsc.SetCourseSectionID(*u)
	}
	return tsc
}

// SetTestID sets the "test_id" field.
func (tsc *TestSessionCreate) SetTestID(u uuid.UUID) *TestSessionCreate {
	tsc.mutation.SetTestID(u)
	return tsc
}

// SetStartedAt sets the "started_at" field.
func (tsc *TestSessionCreate) SetStartedAt(t time.Time) *TestSessionCreate {
	tsc.mutation.SetStartedAt(t)
	return tsc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableStartedAt(t *time.Time) *TestSessionCreate {
	if t != nil {
		tsc.SetStartedAt(*t)
	}
	return tsc
}

// SetExpiredAt sets the "expired_at" field.
func (tsc *TestSessionCreate) SetExpiredAt(t time.Time) *TestSessionCreate {
	tsc.mutation.SetExpiredAt(t)
	return tsc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableExpiredAt(t *time.Time) *TestSessionCreate {
	if t != nil {
		tsc.SetExpiredAt(*t)
	}
	return tsc
}

// SetCompletedAt sets the "completed_at" field.
func (tsc *TestSessionCreate) SetCompletedAt(t time.Time) *TestSessionCreate {
	tsc.mutation.SetCompletedAt(t)
	return tsc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableCompletedAt(t *time.Time) *TestSessionCreate {
	if t != nil {
		tsc.SetCompletedAt(*t)
	}
	return tsc
}

// SetMaxPoints sets the "max_points" field.
func (tsc *TestSessionCreate) SetMaxPoints(i int) *TestSessionCreate {
	tsc.mutation.SetMaxPoints(i)
	return tsc
}

// SetNillableMaxPoints sets the "max_points" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableMaxPoints(i *int) *TestSessionCreate {
	if i != nil {
		tsc.SetMaxPoints(*i)
	}
	return tsc
}

// SetPointsEarned sets the "points_earned" field.
func (tsc *TestSessionCreate) SetPointsEarned(i int) *TestSessionCreate {
	tsc.mutation.SetPointsEarned(i)
	return tsc
}

// SetNillablePointsEarned sets the "points_earned" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillablePointsEarned(i *int) *TestSessionCreate {
	if i != nil {
		tsc.SetPointsEarned(*i)
	}
	return tsc
}

// SetStatus sets the "status" field.
func (tsc *TestSessionCreate) SetStatus(t testsession.Status) *TestSessionCreate {
	tsc.mutation.SetStatus(t)
	return tsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableStatus(t *testsession.Status) *TestSessionCreate {
	if t != nil {
		tsc.SetStatus(*t)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TestSessionCreate) SetID(u uuid.UUID) *TestSessionCreate {
	tsc.mutation.SetID(u)
	return tsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsc *TestSessionCreate) SetNillableID(u *uuid.UUID) *TestSessionCreate {
	if u != nil {
		tsc.SetID(*u)
	}
	return tsc
}

// SetUser sets the "user" edge to the User entity.
func (tsc *TestSessionCreate) SetUser(u *User) *TestSessionCreate {
	return tsc.SetUserID(u.ID)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (tsc *TestSessionCreate) SetCourseSection(c *CourseSection) *TestSessionCreate {
	return tsc.SetCourseSectionID(c.ID)
}

// SetTest sets the "test" edge to the Test entity.
func (tsc *TestSessionCreate) SetTest(t *Test) *TestSessionCreate {
	return tsc.SetTestID(t.ID)
}

// AddTestSessionQuestionAnswerIDs adds the "test_session_question_answers" edge to the TestSessionAnswer entity by IDs.
func (tsc *TestSessionCreate) AddTestSessionQuestionAnswerIDs(ids ...uuid.UUID) *TestSessionCreate {
	tsc.mutation.AddTestSessionQuestionAnswerIDs(ids...)
	return tsc
}

// AddTestSessionQuestionAnswers adds the "test_session_question_answers" edges to the TestSessionAnswer entity.
func (tsc *TestSessionCreate) AddTestSessionQuestionAnswers(t ...*TestSessionAnswer) *TestSessionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsc.AddTestSessionQuestionAnswerIDs(ids...)
}

// Mutation returns the TestSessionMutation object of the builder.
func (tsc *TestSessionCreate) Mutation() *TestSessionMutation {
	return tsc.mutation
}

// Save creates the TestSession in the database.
func (tsc *TestSessionCreate) Save(ctx context.Context) (*TestSession, error) {
	if err := tsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TestSessionCreate) SaveX(ctx context.Context) *TestSession {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TestSessionCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TestSessionCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TestSessionCreate) defaults() error {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		if testsession.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testsession.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testsession.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		if testsession.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testsession.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testsession.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.MaxPoints(); !ok {
		v := testsession.DefaultMaxPoints
		tsc.mutation.SetMaxPoints(v)
	}
	if _, ok := tsc.mutation.PointsEarned(); !ok {
		v := testsession.DefaultPointsEarned
		tsc.mutation.SetPointsEarned(v)
	}
	if _, ok := tsc.mutation.Status(); !ok {
		v := testsession.DefaultStatus
		tsc.mutation.SetStatus(v)
	}
	if _, ok := tsc.mutation.ID(); !ok {
		if testsession.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testsession.DefaultID (forgotten import ent/runtime?)")
		}
		v := testsession.DefaultID()
		tsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TestSessionCreate) check() error {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestSession.created_at"`)}
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestSession.updated_at"`)}
	}
	if _, ok := tsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TestSession.user_id"`)}
	}
	if _, ok := tsc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "TestSession.test_id"`)}
	}
	if _, ok := tsc.mutation.MaxPoints(); !ok {
		return &ValidationError{Name: "max_points", err: errors.New(`ent: missing required field "TestSession.max_points"`)}
	}
	if _, ok := tsc.mutation.PointsEarned(); !ok {
		return &ValidationError{Name: "points_earned", err: errors.New(`ent: missing required field "TestSession.points_earned"`)}
	}
	if _, ok := tsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TestSession.status"`)}
	}
	if v, ok := tsc.mutation.Status(); ok {
		if err := testsession.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TestSession.status": %w`, err)}
		}
	}
	if len(tsc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TestSession.user"`)}
	}
	if len(tsc.mutation.TestIDs()) == 0 {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required edge "TestSession.test"`)}
	}
	return nil
}

func (tsc *TestSessionCreate) sqlSave(ctx context.Context) (*TestSession, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TestSessionCreate) createSpec() (*TestSession, *sqlgraph.CreateSpec) {
	var (
		_node = &TestSession{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(testsession.Table, sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID))
	)
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(testsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.SetField(testsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tsc.mutation.DeletedAt(); ok {
		_spec.SetField(testsession.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tsc.mutation.StartedAt(); ok {
		_spec.SetField(testsession.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := tsc.mutation.ExpiredAt(); ok {
		_spec.SetField(testsession.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = &value
	}
	if value, ok := tsc.mutation.CompletedAt(); ok {
		_spec.SetField(testsession.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := tsc.mutation.MaxPoints(); ok {
		_spec.SetField(testsession.FieldMaxPoints, field.TypeInt, value)
		_node.MaxPoints = value
	}
	if value, ok := tsc.mutation.PointsEarned(); ok {
		_spec.SetField(testsession.FieldPointsEarned, field.TypeInt, value)
		_node.PointsEarned = value
	}
	if value, ok := tsc.mutation.Status(); ok {
		_spec.SetField(testsession.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := tsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.UserTable,
			Columns: []string{testsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.CourseSectionTable,
			Columns: []string{testsession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseSectionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.TestTable,
			Columns: []string{testsession.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tsc.mutation.TestSessionQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.TestSessionQuestionAnswersTable,
			Columns: []string{testsession.TestSessionQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsessionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestSessionCreateBulk is the builder for creating many TestSession entities in bulk.
type TestSessionCreateBulk struct {
	config
	err      error
	builders []*TestSessionCreate
}

// Save creates the TestSession entities in the database.
func (tscb *TestSessionCreateBulk) Save(ctx context.Context) ([]*TestSession, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TestSession, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TestSessionCreateBulk) SaveX(ctx context.Context) []*TestSession {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TestSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TestSessionCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
