// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"template/internal/ent/predicate"
	"template/internal/ent/testquestionpoint"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestQuestionPointDelete is the builder for deleting a TestQuestionPoint entity.
type TestQuestionPointDelete struct {
	config
	hooks    []Hook
	mutation *TestQuestionPointMutation
}

// Where appends a list predicates to the TestQuestionPointDelete builder.
func (tqpd *TestQuestionPointDelete) Where(ps ...predicate.TestQuestionPoint) *TestQuestionPointDelete {
	tqpd.mutation.Where(ps...)
	return tqpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tqpd *TestQuestionPointDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tqpd.sqlExec, tqpd.mutation, tqpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tqpd *TestQuestionPointDelete) ExecX(ctx context.Context) int {
	n, err := tqpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tqpd *TestQuestionPointDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testquestionpoint.Table, sqlgraph.NewFieldSpec(testquestionpoint.FieldID, field.TypeUUID))
	if ps := tqpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tqpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tqpd.mutation.done = true
	return affected, err
}

// TestQuestionPointDeleteOne is the builder for deleting a single TestQuestionPoint entity.
type TestQuestionPointDeleteOne struct {
	tqpd *TestQuestionPointDelete
}

// Where appends a list predicates to the TestQuestionPointDelete builder.
func (tqpdo *TestQuestionPointDeleteOne) Where(ps ...predicate.TestQuestionPoint) *TestQuestionPointDeleteOne {
	tqpdo.tqpd.mutation.Where(ps...)
	return tqpdo
}

// Exec executes the deletion query.
func (tqpdo *TestQuestionPointDeleteOne) Exec(ctx context.Context) error {
	n, err := tqpdo.tqpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testquestionpoint.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tqpdo *TestQuestionPointDeleteOne) ExecX(ctx context.Context) {
	if err := tqpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
