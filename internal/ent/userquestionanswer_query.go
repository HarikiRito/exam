// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testsession"
	"template/internal/ent/user"
	"template/internal/ent/userquestionanswer"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserQuestionAnswerQuery is the builder for querying UserQuestionAnswer entities.
type UserQuestionAnswerQuery struct {
	config
	ctx                *QueryContext
	order              []userquestionanswer.OrderOption
	inters             []Interceptor
	predicates         []predicate.UserQuestionAnswer
	withUser           *UserQuery
	withQuestion       *QuestionQuery
	withSelectedOption *QuestionOptionQuery
	withTestSession    *TestSessionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuestionAnswerQuery builder.
func (uqaq *UserQuestionAnswerQuery) Where(ps ...predicate.UserQuestionAnswer) *UserQuestionAnswerQuery {
	uqaq.predicates = append(uqaq.predicates, ps...)
	return uqaq
}

// Limit the number of records to be returned by this query.
func (uqaq *UserQuestionAnswerQuery) Limit(limit int) *UserQuestionAnswerQuery {
	uqaq.ctx.Limit = &limit
	return uqaq
}

// Offset to start from.
func (uqaq *UserQuestionAnswerQuery) Offset(offset int) *UserQuestionAnswerQuery {
	uqaq.ctx.Offset = &offset
	return uqaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uqaq *UserQuestionAnswerQuery) Unique(unique bool) *UserQuestionAnswerQuery {
	uqaq.ctx.Unique = &unique
	return uqaq
}

// Order specifies how the records should be ordered.
func (uqaq *UserQuestionAnswerQuery) Order(o ...userquestionanswer.OrderOption) *UserQuestionAnswerQuery {
	uqaq.order = append(uqaq.order, o...)
	return uqaq
}

// QueryUser chains the current query on the "user" edge.
func (uqaq *UserQuestionAnswerQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: uqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionanswer.Table, userquestionanswer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userquestionanswer.UserTable, userquestionanswer.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (uqaq *UserQuestionAnswerQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: uqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionanswer.Table, userquestionanswer.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userquestionanswer.QuestionTable, userquestionanswer.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySelectedOption chains the current query on the "selected_option" edge.
func (uqaq *UserQuestionAnswerQuery) QuerySelectedOption() *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: uqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionanswer.Table, userquestionanswer.FieldID, selector),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userquestionanswer.SelectedOptionTable, userquestionanswer.SelectedOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestSession chains the current query on the "test_session" edge.
func (uqaq *UserQuestionAnswerQuery) QueryTestSession() *TestSessionQuery {
	query := (&TestSessionClient{config: uqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionanswer.Table, userquestionanswer.FieldID, selector),
			sqlgraph.To(testsession.Table, testsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userquestionanswer.TestSessionTable, userquestionanswer.TestSessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserQuestionAnswer entity from the query.
// Returns a *NotFoundError when no UserQuestionAnswer was found.
func (uqaq *UserQuestionAnswerQuery) First(ctx context.Context) (*UserQuestionAnswer, error) {
	nodes, err := uqaq.Limit(1).All(setContextOp(ctx, uqaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userquestionanswer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) FirstX(ctx context.Context) *UserQuestionAnswer {
	node, err := uqaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserQuestionAnswer ID from the query.
// Returns a *NotFoundError when no UserQuestionAnswer ID was found.
func (uqaq *UserQuestionAnswerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uqaq.Limit(1).IDs(setContextOp(ctx, uqaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userquestionanswer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := uqaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserQuestionAnswer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserQuestionAnswer entity is found.
// Returns a *NotFoundError when no UserQuestionAnswer entities are found.
func (uqaq *UserQuestionAnswerQuery) Only(ctx context.Context) (*UserQuestionAnswer, error) {
	nodes, err := uqaq.Limit(2).All(setContextOp(ctx, uqaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userquestionanswer.Label}
	default:
		return nil, &NotSingularError{userquestionanswer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) OnlyX(ctx context.Context) *UserQuestionAnswer {
	node, err := uqaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserQuestionAnswer ID in the query.
// Returns a *NotSingularError when more than one UserQuestionAnswer ID is found.
// Returns a *NotFoundError when no entities are found.
func (uqaq *UserQuestionAnswerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uqaq.Limit(2).IDs(setContextOp(ctx, uqaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userquestionanswer.Label}
	default:
		err = &NotSingularError{userquestionanswer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := uqaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserQuestionAnswers.
func (uqaq *UserQuestionAnswerQuery) All(ctx context.Context) ([]*UserQuestionAnswer, error) {
	ctx = setContextOp(ctx, uqaq.ctx, ent.OpQueryAll)
	if err := uqaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserQuestionAnswer, *UserQuestionAnswerQuery]()
	return withInterceptors[[]*UserQuestionAnswer](ctx, uqaq, qr, uqaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) AllX(ctx context.Context) []*UserQuestionAnswer {
	nodes, err := uqaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserQuestionAnswer IDs.
func (uqaq *UserQuestionAnswerQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if uqaq.ctx.Unique == nil && uqaq.path != nil {
		uqaq.Unique(true)
	}
	ctx = setContextOp(ctx, uqaq.ctx, ent.OpQueryIDs)
	if err = uqaq.Select(userquestionanswer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := uqaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uqaq *UserQuestionAnswerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uqaq.ctx, ent.OpQueryCount)
	if err := uqaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uqaq, querierCount[*UserQuestionAnswerQuery](), uqaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) CountX(ctx context.Context) int {
	count, err := uqaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uqaq *UserQuestionAnswerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uqaq.ctx, ent.OpQueryExist)
	switch _, err := uqaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uqaq *UserQuestionAnswerQuery) ExistX(ctx context.Context) bool {
	exist, err := uqaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuestionAnswerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uqaq *UserQuestionAnswerQuery) Clone() *UserQuestionAnswerQuery {
	if uqaq == nil {
		return nil
	}
	return &UserQuestionAnswerQuery{
		config:             uqaq.config,
		ctx:                uqaq.ctx.Clone(),
		order:              append([]userquestionanswer.OrderOption{}, uqaq.order...),
		inters:             append([]Interceptor{}, uqaq.inters...),
		predicates:         append([]predicate.UserQuestionAnswer{}, uqaq.predicates...),
		withUser:           uqaq.withUser.Clone(),
		withQuestion:       uqaq.withQuestion.Clone(),
		withSelectedOption: uqaq.withSelectedOption.Clone(),
		withTestSession:    uqaq.withTestSession.Clone(),
		// clone intermediate query.
		sql:  uqaq.sql.Clone(),
		path: uqaq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (uqaq *UserQuestionAnswerQuery) WithUser(opts ...func(*UserQuery)) *UserQuestionAnswerQuery {
	query := (&UserClient{config: uqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqaq.withUser = query
	return uqaq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (uqaq *UserQuestionAnswerQuery) WithQuestion(opts ...func(*QuestionQuery)) *UserQuestionAnswerQuery {
	query := (&QuestionClient{config: uqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqaq.withQuestion = query
	return uqaq
}

// WithSelectedOption tells the query-builder to eager-load the nodes that are connected to
// the "selected_option" edge. The optional arguments are used to configure the query builder of the edge.
func (uqaq *UserQuestionAnswerQuery) WithSelectedOption(opts ...func(*QuestionOptionQuery)) *UserQuestionAnswerQuery {
	query := (&QuestionOptionClient{config: uqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqaq.withSelectedOption = query
	return uqaq
}

// WithTestSession tells the query-builder to eager-load the nodes that are connected to
// the "test_session" edge. The optional arguments are used to configure the query builder of the edge.
func (uqaq *UserQuestionAnswerQuery) WithTestSession(opts ...func(*TestSessionQuery)) *UserQuestionAnswerQuery {
	query := (&TestSessionClient{config: uqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqaq.withTestSession = query
	return uqaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserQuestionAnswer.Query().
//		GroupBy(userquestionanswer.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uqaq *UserQuestionAnswerQuery) GroupBy(field string, fields ...string) *UserQuestionAnswerGroupBy {
	uqaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserQuestionAnswerGroupBy{build: uqaq}
	grbuild.flds = &uqaq.ctx.Fields
	grbuild.label = userquestionanswer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserQuestionAnswer.Query().
//		Select(userquestionanswer.FieldCreatedAt).
//		Scan(ctx, &v)
func (uqaq *UserQuestionAnswerQuery) Select(fields ...string) *UserQuestionAnswerSelect {
	uqaq.ctx.Fields = append(uqaq.ctx.Fields, fields...)
	sbuild := &UserQuestionAnswerSelect{UserQuestionAnswerQuery: uqaq}
	sbuild.label = userquestionanswer.Label
	sbuild.flds, sbuild.scan = &uqaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserQuestionAnswerSelect configured with the given aggregations.
func (uqaq *UserQuestionAnswerQuery) Aggregate(fns ...AggregateFunc) *UserQuestionAnswerSelect {
	return uqaq.Select().Aggregate(fns...)
}

func (uqaq *UserQuestionAnswerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uqaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uqaq); err != nil {
				return err
			}
		}
	}
	for _, f := range uqaq.ctx.Fields {
		if !userquestionanswer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uqaq.path != nil {
		prev, err := uqaq.path(ctx)
		if err != nil {
			return err
		}
		uqaq.sql = prev
	}
	return nil
}

func (uqaq *UserQuestionAnswerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserQuestionAnswer, error) {
	var (
		nodes       = []*UserQuestionAnswer{}
		_spec       = uqaq.querySpec()
		loadedTypes = [4]bool{
			uqaq.withUser != nil,
			uqaq.withQuestion != nil,
			uqaq.withSelectedOption != nil,
			uqaq.withTestSession != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserQuestionAnswer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserQuestionAnswer{config: uqaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uqaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uqaq.withUser; query != nil {
		if err := uqaq.loadUser(ctx, query, nodes, nil,
			func(n *UserQuestionAnswer, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := uqaq.withQuestion; query != nil {
		if err := uqaq.loadQuestion(ctx, query, nodes, nil,
			func(n *UserQuestionAnswer, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	if query := uqaq.withSelectedOption; query != nil {
		if err := uqaq.loadSelectedOption(ctx, query, nodes, nil,
			func(n *UserQuestionAnswer, e *QuestionOption) { n.Edges.SelectedOption = e }); err != nil {
			return nil, err
		}
	}
	if query := uqaq.withTestSession; query != nil {
		if err := uqaq.loadTestSession(ctx, query, nodes, nil,
			func(n *UserQuestionAnswer, e *TestSession) { n.Edges.TestSession = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uqaq *UserQuestionAnswerQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserQuestionAnswer, init func(*UserQuestionAnswer), assign func(*UserQuestionAnswer, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserQuestionAnswer)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uqaq *UserQuestionAnswerQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*UserQuestionAnswer, init func(*UserQuestionAnswer), assign func(*UserQuestionAnswer, *Question)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserQuestionAnswer)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uqaq *UserQuestionAnswerQuery) loadSelectedOption(ctx context.Context, query *QuestionOptionQuery, nodes []*UserQuestionAnswer, init func(*UserQuestionAnswer), assign func(*UserQuestionAnswer, *QuestionOption)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserQuestionAnswer)
	for i := range nodes {
		if nodes[i].SelectedOptionID == nil {
			continue
		}
		fk := *nodes[i].SelectedOptionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(questionoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "selected_option_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uqaq *UserQuestionAnswerQuery) loadTestSession(ctx context.Context, query *TestSessionQuery, nodes []*UserQuestionAnswer, init func(*UserQuestionAnswer), assign func(*UserQuestionAnswer, *TestSession)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserQuestionAnswer)
	for i := range nodes {
		fk := nodes[i].SessionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(testsession.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "session_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (uqaq *UserQuestionAnswerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uqaq.querySpec()
	_spec.Node.Columns = uqaq.ctx.Fields
	if len(uqaq.ctx.Fields) > 0 {
		_spec.Unique = uqaq.ctx.Unique != nil && *uqaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uqaq.driver, _spec)
}

func (uqaq *UserQuestionAnswerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userquestionanswer.Table, userquestionanswer.Columns, sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID))
	_spec.From = uqaq.sql
	if unique := uqaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uqaq.path != nil {
		_spec.Unique = true
	}
	if fields := uqaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userquestionanswer.FieldID)
		for i := range fields {
			if fields[i] != userquestionanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if uqaq.withUser != nil {
			_spec.Node.AddColumnOnce(userquestionanswer.FieldUserID)
		}
		if uqaq.withQuestion != nil {
			_spec.Node.AddColumnOnce(userquestionanswer.FieldQuestionID)
		}
		if uqaq.withSelectedOption != nil {
			_spec.Node.AddColumnOnce(userquestionanswer.FieldSelectedOptionID)
		}
		if uqaq.withTestSession != nil {
			_spec.Node.AddColumnOnce(userquestionanswer.FieldSessionID)
		}
	}
	if ps := uqaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uqaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uqaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uqaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uqaq *UserQuestionAnswerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uqaq.driver.Dialect())
	t1 := builder.Table(userquestionanswer.Table)
	columns := uqaq.ctx.Fields
	if len(columns) == 0 {
		columns = userquestionanswer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uqaq.sql != nil {
		selector = uqaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uqaq.ctx.Unique != nil && *uqaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uqaq.predicates {
		p(selector)
	}
	for _, p := range uqaq.order {
		p(selector)
	}
	if offset := uqaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uqaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserQuestionAnswerGroupBy is the group-by builder for UserQuestionAnswer entities.
type UserQuestionAnswerGroupBy struct {
	selector
	build *UserQuestionAnswerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uqagb *UserQuestionAnswerGroupBy) Aggregate(fns ...AggregateFunc) *UserQuestionAnswerGroupBy {
	uqagb.fns = append(uqagb.fns, fns...)
	return uqagb
}

// Scan applies the selector query and scans the result into the given value.
func (uqagb *UserQuestionAnswerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uqagb.build.ctx, ent.OpQueryGroupBy)
	if err := uqagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuestionAnswerQuery, *UserQuestionAnswerGroupBy](ctx, uqagb.build, uqagb, uqagb.build.inters, v)
}

func (uqagb *UserQuestionAnswerGroupBy) sqlScan(ctx context.Context, root *UserQuestionAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uqagb.fns))
	for _, fn := range uqagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uqagb.flds)+len(uqagb.fns))
		for _, f := range *uqagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uqagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uqagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserQuestionAnswerSelect is the builder for selecting fields of UserQuestionAnswer entities.
type UserQuestionAnswerSelect struct {
	*UserQuestionAnswerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uqas *UserQuestionAnswerSelect) Aggregate(fns ...AggregateFunc) *UserQuestionAnswerSelect {
	uqas.fns = append(uqas.fns, fns...)
	return uqas
}

// Scan applies the selector query and scans the result into the given value.
func (uqas *UserQuestionAnswerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uqas.ctx, ent.OpQuerySelect)
	if err := uqas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuestionAnswerQuery, *UserQuestionAnswerSelect](ctx, uqas.UserQuestionAnswerQuery, uqas, uqas.inters, v)
}

func (uqas *UserQuestionAnswerSelect) sqlScan(ctx context.Context, root *UserQuestionAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uqas.fns))
	for _, fn := range uqas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uqas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uqas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
