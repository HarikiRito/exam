// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/question"
	"template/internal/ent/test"
	"template/internal/ent/testquestionpoint"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionPointCreate is the builder for creating a TestQuestionPoint entity.
type TestQuestionPointCreate struct {
	config
	mutation *TestQuestionPointMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tqpc *TestQuestionPointCreate) SetCreatedAt(t time.Time) *TestQuestionPointCreate {
	tqpc.mutation.SetCreatedAt(t)
	return tqpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqpc *TestQuestionPointCreate) SetNillableCreatedAt(t *time.Time) *TestQuestionPointCreate {
	if t != nil {
		tqpc.SetCreatedAt(*t)
	}
	return tqpc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqpc *TestQuestionPointCreate) SetUpdatedAt(t time.Time) *TestQuestionPointCreate {
	tqpc.mutation.SetUpdatedAt(t)
	return tqpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqpc *TestQuestionPointCreate) SetNillableUpdatedAt(t *time.Time) *TestQuestionPointCreate {
	if t != nil {
		tqpc.SetUpdatedAt(*t)
	}
	return tqpc
}

// SetDeletedAt sets the "deleted_at" field.
func (tqpc *TestQuestionPointCreate) SetDeletedAt(t time.Time) *TestQuestionPointCreate {
	tqpc.mutation.SetDeletedAt(t)
	return tqpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqpc *TestQuestionPointCreate) SetNillableDeletedAt(t *time.Time) *TestQuestionPointCreate {
	if t != nil {
		tqpc.SetDeletedAt(*t)
	}
	return tqpc
}

// SetTestID sets the "test_id" field.
func (tqpc *TestQuestionPointCreate) SetTestID(u uuid.UUID) *TestQuestionPointCreate {
	tqpc.mutation.SetTestID(u)
	return tqpc
}

// SetQuestionID sets the "question_id" field.
func (tqpc *TestQuestionPointCreate) SetQuestionID(u uuid.UUID) *TestQuestionPointCreate {
	tqpc.mutation.SetQuestionID(u)
	return tqpc
}

// SetPoints sets the "points" field.
func (tqpc *TestQuestionPointCreate) SetPoints(i int) *TestQuestionPointCreate {
	tqpc.mutation.SetPoints(i)
	return tqpc
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (tqpc *TestQuestionPointCreate) SetNillablePoints(i *int) *TestQuestionPointCreate {
	if i != nil {
		tqpc.SetPoints(*i)
	}
	return tqpc
}

// SetID sets the "id" field.
func (tqpc *TestQuestionPointCreate) SetID(u uuid.UUID) *TestQuestionPointCreate {
	tqpc.mutation.SetID(u)
	return tqpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tqpc *TestQuestionPointCreate) SetNillableID(u *uuid.UUID) *TestQuestionPointCreate {
	if u != nil {
		tqpc.SetID(*u)
	}
	return tqpc
}

// SetTest sets the "test" edge to the Test entity.
func (tqpc *TestQuestionPointCreate) SetTest(t *Test) *TestQuestionPointCreate {
	return tqpc.SetTestID(t.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqpc *TestQuestionPointCreate) SetQuestion(q *Question) *TestQuestionPointCreate {
	return tqpc.SetQuestionID(q.ID)
}

// Mutation returns the TestQuestionPointMutation object of the builder.
func (tqpc *TestQuestionPointCreate) Mutation() *TestQuestionPointMutation {
	return tqpc.mutation
}

// Save creates the TestQuestionPoint in the database.
func (tqpc *TestQuestionPointCreate) Save(ctx context.Context) (*TestQuestionPoint, error) {
	if err := tqpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tqpc.sqlSave, tqpc.mutation, tqpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tqpc *TestQuestionPointCreate) SaveX(ctx context.Context) *TestQuestionPoint {
	v, err := tqpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqpc *TestQuestionPointCreate) Exec(ctx context.Context) error {
	_, err := tqpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqpc *TestQuestionPointCreate) ExecX(ctx context.Context) {
	if err := tqpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqpc *TestQuestionPointCreate) defaults() error {
	if _, ok := tqpc.mutation.CreatedAt(); !ok {
		if testquestionpoint.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionpoint.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionpoint.DefaultCreatedAt()
		tqpc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqpc.mutation.UpdatedAt(); !ok {
		if testquestionpoint.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionpoint.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionpoint.DefaultUpdatedAt()
		tqpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tqpc.mutation.Points(); !ok {
		v := testquestionpoint.DefaultPoints
		tqpc.mutation.SetPoints(v)
	}
	if _, ok := tqpc.mutation.ID(); !ok {
		if testquestionpoint.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testquestionpoint.DefaultID (forgotten import ent/runtime?)")
		}
		v := testquestionpoint.DefaultID()
		tqpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqpc *TestQuestionPointCreate) check() error {
	if _, ok := tqpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestQuestionPoint.created_at"`)}
	}
	if _, ok := tqpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestQuestionPoint.updated_at"`)}
	}
	if _, ok := tqpc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "TestQuestionPoint.test_id"`)}
	}
	if _, ok := tqpc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "TestQuestionPoint.question_id"`)}
	}
	if _, ok := tqpc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "TestQuestionPoint.points"`)}
	}
	if v, ok := tqpc.mutation.Points(); ok {
		if err := testquestionpoint.PointsValidator(v); err != nil {
			return &ValidationError{Name: "points", err: fmt.Errorf(`ent: validator failed for field "TestQuestionPoint.points": %w`, err)}
		}
	}
	if len(tqpc.mutation.TestIDs()) == 0 {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required edge "TestQuestionPoint.test"`)}
	}
	if len(tqpc.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "TestQuestionPoint.question"`)}
	}
	return nil
}

func (tqpc *TestQuestionPointCreate) sqlSave(ctx context.Context) (*TestQuestionPoint, error) {
	if err := tqpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tqpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tqpc.mutation.id = &_node.ID
	tqpc.mutation.done = true
	return _node, nil
}

func (tqpc *TestQuestionPointCreate) createSpec() (*TestQuestionPoint, *sqlgraph.CreateSpec) {
	var (
		_node = &TestQuestionPoint{config: tqpc.config}
		_spec = sqlgraph.NewCreateSpec(testquestionpoint.Table, sqlgraph.NewFieldSpec(testquestionpoint.FieldID, field.TypeUUID))
	)
	if id, ok := tqpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tqpc.mutation.CreatedAt(); ok {
		_spec.SetField(testquestionpoint.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tqpc.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestionpoint.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tqpc.mutation.DeletedAt(); ok {
		_spec.SetField(testquestionpoint.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tqpc.mutation.Points(); ok {
		_spec.SetField(testquestionpoint.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if nodes := tqpc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.TestTable,
			Columns: []string{testquestionpoint.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqpc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.QuestionTable,
			Columns: []string{testquestionpoint.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestQuestionPointCreateBulk is the builder for creating many TestQuestionPoint entities in bulk.
type TestQuestionPointCreateBulk struct {
	config
	err      error
	builders []*TestQuestionPointCreate
}

// Save creates the TestQuestionPoint entities in the database.
func (tqpcb *TestQuestionPointCreateBulk) Save(ctx context.Context) ([]*TestQuestionPoint, error) {
	if tqpcb.err != nil {
		return nil, tqpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tqpcb.builders))
	nodes := make([]*TestQuestionPoint, len(tqpcb.builders))
	mutators := make([]Mutator, len(tqpcb.builders))
	for i := range tqpcb.builders {
		func(i int, root context.Context) {
			builder := tqpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestQuestionPointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqpcb *TestQuestionPointCreateBulk) SaveX(ctx context.Context) []*TestQuestionPoint {
	v, err := tqpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqpcb *TestQuestionPointCreateBulk) Exec(ctx context.Context) error {
	_, err := tqpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqpcb *TestQuestionPointCreateBulk) ExecX(ctx context.Context) {
	if err := tqpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
