// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questioncollection"
	"template/internal/ent/test"
	"template/internal/ent/testignorequestion"
	"template/internal/ent/testquestioncount"
	"template/internal/ent/testquestionpoint"
	"template/internal/ent/testsession"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuery is the builder for querying Test entities.
type TestQuery struct {
	config
	ctx                     *QueryContext
	order                   []test.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Test
	withCourseSection       *CourseSectionQuery
	withCourse              *CourseQuery
	withTestSessions        *TestSessionQuery
	withQuestions           *QuestionQuery
	withQuestionCollections *QuestionCollectionQuery
	withTestQuestionCounts  *TestQuestionCountQuery
	withTestIgnoreQuestions *TestIgnoreQuestionQuery
	withTestQuestionPoints  *TestQuestionPointQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestQuery builder.
func (tq *TestQuery) Where(ps ...predicate.Test) *TestQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TestQuery) Limit(limit int) *TestQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TestQuery) Offset(offset int) *TestQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TestQuery) Unique(unique bool) *TestQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TestQuery) Order(o ...test.OrderOption) *TestQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryCourseSection chains the current query on the "course_section" edge.
func (tq *TestQuery) QueryCourseSection() *CourseSectionQuery {
	query := (&CourseSectionClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, test.CourseSectionTable, test.CourseSectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourse chains the current query on the "course" edge.
func (tq *TestQuery) QueryCourse() *CourseQuery {
	query := (&CourseClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, test.CourseTable, test.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestSessions chains the current query on the "test_sessions" edge.
func (tq *TestQuery) QueryTestSessions() *TestSessionQuery {
	query := (&TestSessionClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(testsession.Table, testsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, test.TestSessionsTable, test.TestSessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestions chains the current query on the "questions" edge.
func (tq *TestQuery) QueryQuestions() *QuestionQuery {
	query := (&QuestionClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, test.QuestionsTable, test.QuestionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestionCollections chains the current query on the "question_collections" edge.
func (tq *TestQuery) QueryQuestionCollections() *QuestionCollectionQuery {
	query := (&QuestionCollectionClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(questioncollection.Table, questioncollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, test.QuestionCollectionsTable, test.QuestionCollectionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestQuestionCounts chains the current query on the "test_question_counts" edge.
func (tq *TestQuery) QueryTestQuestionCounts() *TestQuestionCountQuery {
	query := (&TestQuestionCountClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(testquestioncount.Table, testquestioncount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, test.TestQuestionCountsTable, test.TestQuestionCountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestIgnoreQuestions chains the current query on the "test_ignore_questions" edge.
func (tq *TestQuery) QueryTestIgnoreQuestions() *TestIgnoreQuestionQuery {
	query := (&TestIgnoreQuestionClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(testignorequestion.Table, testignorequestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, test.TestIgnoreQuestionsTable, test.TestIgnoreQuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestQuestionPoints chains the current query on the "test_question_points" edge.
func (tq *TestQuery) QueryTestQuestionPoints() *TestQuestionPointQuery {
	query := (&TestQuestionPointClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, selector),
			sqlgraph.To(testquestionpoint.Table, testquestionpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, test.TestQuestionPointsTable, test.TestQuestionPointsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Test entity from the query.
// Returns a *NotFoundError when no Test was found.
func (tq *TestQuery) First(ctx context.Context) (*Test, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{test.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TestQuery) FirstX(ctx context.Context) *Test {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Test ID from the query.
// Returns a *NotFoundError when no Test ID was found.
func (tq *TestQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{test.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TestQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Test entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Test entity is found.
// Returns a *NotFoundError when no Test entities are found.
func (tq *TestQuery) Only(ctx context.Context) (*Test, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{test.Label}
	default:
		return nil, &NotSingularError{test.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TestQuery) OnlyX(ctx context.Context) *Test {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Test ID in the query.
// Returns a *NotSingularError when more than one Test ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TestQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{test.Label}
	default:
		err = &NotSingularError{test.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TestQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Tests.
func (tq *TestQuery) All(ctx context.Context) ([]*Test, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryAll)
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Test, *TestQuery]()
	return withInterceptors[[]*Test](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TestQuery) AllX(ctx context.Context) []*Test {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Test IDs.
func (tq *TestQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryIDs)
	if err = tq.Select(test.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TestQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TestQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryCount)
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TestQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TestQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TestQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryExist)
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TestQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TestQuery) Clone() *TestQuery {
	if tq == nil {
		return nil
	}
	return &TestQuery{
		config:                  tq.config,
		ctx:                     tq.ctx.Clone(),
		order:                   append([]test.OrderOption{}, tq.order...),
		inters:                  append([]Interceptor{}, tq.inters...),
		predicates:              append([]predicate.Test{}, tq.predicates...),
		withCourseSection:       tq.withCourseSection.Clone(),
		withCourse:              tq.withCourse.Clone(),
		withTestSessions:        tq.withTestSessions.Clone(),
		withQuestions:           tq.withQuestions.Clone(),
		withQuestionCollections: tq.withQuestionCollections.Clone(),
		withTestQuestionCounts:  tq.withTestQuestionCounts.Clone(),
		withTestIgnoreQuestions: tq.withTestIgnoreQuestions.Clone(),
		withTestQuestionPoints:  tq.withTestQuestionPoints.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithCourseSection tells the query-builder to eager-load the nodes that are connected to
// the "course_section" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithCourseSection(opts ...func(*CourseSectionQuery)) *TestQuery {
	query := (&CourseSectionClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCourseSection = query
	return tq
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithCourse(opts ...func(*CourseQuery)) *TestQuery {
	query := (&CourseClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCourse = query
	return tq
}

// WithTestSessions tells the query-builder to eager-load the nodes that are connected to
// the "test_sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithTestSessions(opts ...func(*TestSessionQuery)) *TestQuery {
	query := (&TestSessionClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withTestSessions = query
	return tq
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithQuestions(opts ...func(*QuestionQuery)) *TestQuery {
	query := (&QuestionClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withQuestions = query
	return tq
}

// WithQuestionCollections tells the query-builder to eager-load the nodes that are connected to
// the "question_collections" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithQuestionCollections(opts ...func(*QuestionCollectionQuery)) *TestQuery {
	query := (&QuestionCollectionClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withQuestionCollections = query
	return tq
}

// WithTestQuestionCounts tells the query-builder to eager-load the nodes that are connected to
// the "test_question_counts" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithTestQuestionCounts(opts ...func(*TestQuestionCountQuery)) *TestQuery {
	query := (&TestQuestionCountClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withTestQuestionCounts = query
	return tq
}

// WithTestIgnoreQuestions tells the query-builder to eager-load the nodes that are connected to
// the "test_ignore_questions" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithTestIgnoreQuestions(opts ...func(*TestIgnoreQuestionQuery)) *TestQuery {
	query := (&TestIgnoreQuestionClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withTestIgnoreQuestions = query
	return tq
}

// WithTestQuestionPoints tells the query-builder to eager-load the nodes that are connected to
// the "test_question_points" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TestQuery) WithTestQuestionPoints(opts ...func(*TestQuestionPointQuery)) *TestQuery {
	query := (&TestQuestionPointClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withTestQuestionPoints = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Test.Query().
//		GroupBy(test.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TestQuery) GroupBy(field string, fields ...string) *TestGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = test.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Test.Query().
//		Select(test.FieldCreatedAt).
//		Scan(ctx, &v)
func (tq *TestQuery) Select(fields ...string) *TestSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TestSelect{TestQuery: tq}
	sbuild.label = test.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestSelect configured with the given aggregations.
func (tq *TestQuery) Aggregate(fns ...AggregateFunc) *TestSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TestQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !test.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TestQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Test, error) {
	var (
		nodes       = []*Test{}
		_spec       = tq.querySpec()
		loadedTypes = [8]bool{
			tq.withCourseSection != nil,
			tq.withCourse != nil,
			tq.withTestSessions != nil,
			tq.withQuestions != nil,
			tq.withQuestionCollections != nil,
			tq.withTestQuestionCounts != nil,
			tq.withTestIgnoreQuestions != nil,
			tq.withTestQuestionPoints != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Test).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Test{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withCourseSection; query != nil {
		if err := tq.loadCourseSection(ctx, query, nodes, nil,
			func(n *Test, e *CourseSection) { n.Edges.CourseSection = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withCourse; query != nil {
		if err := tq.loadCourse(ctx, query, nodes, nil,
			func(n *Test, e *Course) { n.Edges.Course = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withTestSessions; query != nil {
		if err := tq.loadTestSessions(ctx, query, nodes,
			func(n *Test) { n.Edges.TestSessions = []*TestSession{} },
			func(n *Test, e *TestSession) { n.Edges.TestSessions = append(n.Edges.TestSessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withQuestions; query != nil {
		if err := tq.loadQuestions(ctx, query, nodes,
			func(n *Test) { n.Edges.Questions = []*Question{} },
			func(n *Test, e *Question) { n.Edges.Questions = append(n.Edges.Questions, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withQuestionCollections; query != nil {
		if err := tq.loadQuestionCollections(ctx, query, nodes,
			func(n *Test) { n.Edges.QuestionCollections = []*QuestionCollection{} },
			func(n *Test, e *QuestionCollection) {
				n.Edges.QuestionCollections = append(n.Edges.QuestionCollections, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := tq.withTestQuestionCounts; query != nil {
		if err := tq.loadTestQuestionCounts(ctx, query, nodes,
			func(n *Test) { n.Edges.TestQuestionCounts = []*TestQuestionCount{} },
			func(n *Test, e *TestQuestionCount) {
				n.Edges.TestQuestionCounts = append(n.Edges.TestQuestionCounts, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := tq.withTestIgnoreQuestions; query != nil {
		if err := tq.loadTestIgnoreQuestions(ctx, query, nodes,
			func(n *Test) { n.Edges.TestIgnoreQuestions = []*TestIgnoreQuestion{} },
			func(n *Test, e *TestIgnoreQuestion) {
				n.Edges.TestIgnoreQuestions = append(n.Edges.TestIgnoreQuestions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := tq.withTestQuestionPoints; query != nil {
		if err := tq.loadTestQuestionPoints(ctx, query, nodes,
			func(n *Test) { n.Edges.TestQuestionPoints = []*TestQuestionPoint{} },
			func(n *Test, e *TestQuestionPoint) {
				n.Edges.TestQuestionPoints = append(n.Edges.TestQuestionPoints, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TestQuery) loadCourseSection(ctx context.Context, query *CourseSectionQuery, nodes []*Test, init func(*Test), assign func(*Test, *CourseSection)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Test)
	for i := range nodes {
		if nodes[i].CourseSectionID == nil {
			continue
		}
		fk := *nodes[i].CourseSectionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(coursesection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_section_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TestQuery) loadCourse(ctx context.Context, query *CourseQuery, nodes []*Test, init func(*Test), assign func(*Test, *Course)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Test)
	for i := range nodes {
		if nodes[i].CourseID == nil {
			continue
		}
		fk := *nodes[i].CourseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(course.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TestQuery) loadTestSessions(ctx context.Context, query *TestSessionQuery, nodes []*Test, init func(*Test), assign func(*Test, *TestSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Test)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(testsession.FieldTestID)
	}
	query.Where(predicate.TestSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(test.TestSessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TestID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "test_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TestQuery) loadQuestions(ctx context.Context, query *QuestionQuery, nodes []*Test, init func(*Test), assign func(*Test, *Question)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Test)
	nids := make(map[uuid.UUID]map[*Test]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(test.QuestionsTable)
		s.Join(joinT).On(s.C(question.FieldID), joinT.C(test.QuestionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(test.QuestionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(test.QuestionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Test]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Question](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "questions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TestQuery) loadQuestionCollections(ctx context.Context, query *QuestionCollectionQuery, nodes []*Test, init func(*Test), assign func(*Test, *QuestionCollection)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Test)
	nids := make(map[uuid.UUID]map[*Test]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(test.QuestionCollectionsTable)
		s.Join(joinT).On(s.C(questioncollection.FieldID), joinT.C(test.QuestionCollectionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(test.QuestionCollectionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(test.QuestionCollectionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Test]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*QuestionCollection](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "question_collections" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TestQuery) loadTestQuestionCounts(ctx context.Context, query *TestQuestionCountQuery, nodes []*Test, init func(*Test), assign func(*Test, *TestQuestionCount)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Test)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(testquestioncount.FieldTestID)
	}
	query.Where(predicate.TestQuestionCount(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(test.TestQuestionCountsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TestID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "test_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TestQuery) loadTestIgnoreQuestions(ctx context.Context, query *TestIgnoreQuestionQuery, nodes []*Test, init func(*Test), assign func(*Test, *TestIgnoreQuestion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Test)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(testignorequestion.FieldTestID)
	}
	query.Where(predicate.TestIgnoreQuestion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(test.TestIgnoreQuestionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TestID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "test_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TestQuery) loadTestQuestionPoints(ctx context.Context, query *TestQuestionPointQuery, nodes []*Test, init func(*Test), assign func(*Test, *TestQuestionPoint)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Test)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(testquestionpoint.FieldTestID)
	}
	query.Where(predicate.TestQuestionPoint(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(test.TestQuestionPointsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TestID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "test_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tq *TestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(test.Table, test.Columns, sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, test.FieldID)
		for i := range fields {
			if fields[i] != test.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tq.withCourseSection != nil {
			_spec.Node.AddColumnOnce(test.FieldCourseSectionID)
		}
		if tq.withCourse != nil {
			_spec.Node.AddColumnOnce(test.FieldCourseID)
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(test.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = test.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestGroupBy is the group-by builder for Test entities.
type TestGroupBy struct {
	selector
	build *TestQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TestGroupBy) Aggregate(fns ...AggregateFunc) *TestGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TestGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, ent.OpQueryGroupBy)
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestQuery, *TestGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TestGroupBy) sqlScan(ctx context.Context, root *TestQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestSelect is the builder for selecting fields of Test entities.
type TestSelect struct {
	*TestQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TestSelect) Aggregate(fns ...AggregateFunc) *TestSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TestSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, ent.OpQuerySelect)
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestQuery, *TestSelect](ctx, ts.TestQuery, ts, ts.inters, v)
}

func (ts *TestSelect) sqlScan(ctx context.Context, root *TestQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
