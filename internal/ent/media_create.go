// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/media"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation *MediaMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *MediaCreate) SetCreatedAt(t time.Time) *MediaCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableCreatedAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MediaCreate) SetUpdatedAt(t time.Time) *MediaCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableUpdatedAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MediaCreate) SetDeletedAt(t time.Time) *MediaCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableDeletedAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetFileName sets the "fileName" field.
func (mc *MediaCreate) SetFileName(s string) *MediaCreate {
	mc.mutation.SetFileName(s)
	return mc
}

// SetFileUrl sets the "fileUrl" field.
func (mc *MediaCreate) SetFileUrl(s string) *MediaCreate {
	mc.mutation.SetFileUrl(s)
	return mc
}

// SetMimeType sets the "mimeType" field.
func (mc *MediaCreate) SetMimeType(s string) *MediaCreate {
	mc.mutation.SetMimeType(s)
	return mc
}

// SetMetadata sets the "metadata" field.
func (mc *MediaCreate) SetMetadata(m map[string]interface{}) *MediaCreate {
	mc.mutation.SetMetadata(m)
	return mc
}

// SetID sets the "id" field.
func (mc *MediaCreate) SetID(s string) *MediaCreate {
	mc.mutation.SetID(s)
	return mc
}

// Mutation returns the MediaMutation object of the builder.
func (mc *MediaCreate) Mutation() *MediaMutation {
	return mc.mutation
}

// Save creates the Media in the database.
func (mc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MediaCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MediaCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MediaCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if media.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := media.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if media.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := media.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MediaCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Media.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Media.updated_at"`)}
	}
	if _, ok := mc.mutation.FileName(); !ok {
		return &ValidationError{Name: "fileName", err: errors.New(`ent: missing required field "Media.fileName"`)}
	}
	if v, ok := mc.mutation.FileName(); ok {
		if err := media.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "fileName", err: fmt.Errorf(`ent: validator failed for field "Media.fileName": %w`, err)}
		}
	}
	if _, ok := mc.mutation.FileUrl(); !ok {
		return &ValidationError{Name: "fileUrl", err: errors.New(`ent: missing required field "Media.fileUrl"`)}
	}
	if v, ok := mc.mutation.FileUrl(); ok {
		if err := media.FileUrlValidator(v); err != nil {
			return &ValidationError{Name: "fileUrl", err: fmt.Errorf(`ent: validator failed for field "Media.fileUrl": %w`, err)}
		}
	}
	if _, ok := mc.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mimeType", err: errors.New(`ent: missing required field "Media.mimeType"`)}
	}
	if v, ok := mc.mutation.MimeType(); ok {
		if err := media.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mimeType", err: fmt.Errorf(`ent: validator failed for field "Media.mimeType": %w`, err)}
		}
	}
	return nil
}

func (mc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Media.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(media.Table, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(media.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(media.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := mc.mutation.FileName(); ok {
		_spec.SetField(media.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := mc.mutation.FileUrl(); ok {
		_spec.SetField(media.FieldFileUrl, field.TypeString, value)
		_node.FileUrl = value
	}
	if value, ok := mc.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := mc.mutation.Metadata(); ok {
		_spec.SetField(media.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	err      error
	builders []*MediaCreate
}

// Save creates the Media entities in the database.
func (mcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Media, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MediaCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MediaCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
