// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldAvatarID holds the string denoting the avatar_id field in the database.
	FieldAvatarID = "avatar_id"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeMediaUploader holds the string denoting the media_uploader edge name in mutations.
	EdgeMediaUploader = "media_uploader"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeCourseCreator holds the string denoting the course_creator edge name in mutations.
	EdgeCourseCreator = "course_creator"
	// EdgeQuestionCollections holds the string denoting the question_collections edge name in mutations.
	EdgeQuestionCollections = "question_collections"
	// EdgeTestSessionAnswers holds the string denoting the test_session_answers edge name in mutations.
	EdgeTestSessionAnswers = "test_session_answers"
	// EdgeTestSessions holds the string denoting the test_sessions edge name in mutations.
	EdgeTestSessions = "test_sessions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "users"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "avatar_id"
	// MediaUploaderTable is the table that holds the media_uploader relation/edge.
	MediaUploaderTable = "media"
	// MediaUploaderInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaUploaderInverseTable = "media"
	// MediaUploaderColumn is the table column denoting the media_uploader relation/edge.
	MediaUploaderColumn = "uploader_id"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "user_roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// CourseCreatorTable is the table that holds the course_creator relation/edge.
	CourseCreatorTable = "courses"
	// CourseCreatorInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseCreatorInverseTable = "courses"
	// CourseCreatorColumn is the table column denoting the course_creator relation/edge.
	CourseCreatorColumn = "creator_id"
	// QuestionCollectionsTable is the table that holds the question_collections relation/edge.
	QuestionCollectionsTable = "question_collections"
	// QuestionCollectionsInverseTable is the table name for the QuestionCollection entity.
	// It exists in this package in order to avoid circular dependency with the "questioncollection" package.
	QuestionCollectionsInverseTable = "question_collections"
	// QuestionCollectionsColumn is the table column denoting the question_collections relation/edge.
	QuestionCollectionsColumn = "creator_id"
	// TestSessionAnswersTable is the table that holds the test_session_answers relation/edge.
	TestSessionAnswersTable = "test_session_answers"
	// TestSessionAnswersInverseTable is the table name for the TestSessionAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "testsessionanswer" package.
	TestSessionAnswersInverseTable = "test_session_answers"
	// TestSessionAnswersColumn is the table column denoting the test_session_answers relation/edge.
	TestSessionAnswersColumn = "user_id"
	// TestSessionsTable is the table that holds the test_sessions relation/edge.
	TestSessionsTable = "test_sessions"
	// TestSessionsInverseTable is the table name for the TestSession entity.
	// It exists in this package in order to avoid circular dependency with the "testsession" package.
	TestSessionsInverseTable = "test_sessions"
	// TestSessionsColumn is the table column denoting the test_sessions relation/edge.
	TestSessionsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUsername,
	FieldEmail,
	FieldPasswordHash,
	FieldFirstName,
	FieldLastName,
	FieldAvatarID,
	FieldIsActive,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "template/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByAvatarID orders the results by the avatar_id field.
func ByAvatarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarID, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByMediaField orders the results by media field.
func ByMediaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), sql.OrderByField(field, opts...))
	}
}

// ByMediaUploaderCount orders the results by media_uploader count.
func ByMediaUploaderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaUploaderStep(), opts...)
	}
}

// ByMediaUploader orders the results by media_uploader terms.
func ByMediaUploader(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaUploaderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCourseCreatorCount orders the results by course_creator count.
func ByCourseCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCourseCreatorStep(), opts...)
	}
}

// ByCourseCreator orders the results by course_creator terms.
func ByCourseCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQuestionCollectionsCount orders the results by question_collections count.
func ByQuestionCollectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionCollectionsStep(), opts...)
	}
}

// ByQuestionCollections orders the results by question_collections terms.
func ByQuestionCollections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionCollectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTestSessionAnswersCount orders the results by test_session_answers count.
func ByTestSessionAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestSessionAnswersStep(), opts...)
	}
}

// ByTestSessionAnswers orders the results by test_session_answers terms.
func ByTestSessionAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestSessionAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTestSessionsCount orders the results by test_sessions count.
func ByTestSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestSessionsStep(), opts...)
	}
}

// ByTestSessions orders the results by test_sessions terms.
func ByTestSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MediaTable, MediaColumn),
	)
}
func newMediaUploaderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaUploaderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MediaUploaderTable, MediaUploaderColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
	)
}
func newCourseCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseCreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CourseCreatorTable, CourseCreatorColumn),
	)
}
func newQuestionCollectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionCollectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionCollectionsTable, QuestionCollectionsColumn),
	)
}
func newTestSessionAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestSessionAnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestSessionAnswersTable, TestSessionAnswersColumn),
	)
}
func newTestSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestSessionsTable, TestSessionsColumn),
	)
}
