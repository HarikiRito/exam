// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/video"
	"template/internal/ent/videoquestiontimestamp"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoQuestionTimestampQuery is the builder for querying VideoQuestionTimestamp entities.
type VideoQuestionTimestampQuery struct {
	config
	ctx          *QueryContext
	order        []videoquestiontimestamp.OrderOption
	inters       []Interceptor
	predicates   []predicate.VideoQuestionTimestamp
	withVideo    *VideoQuery
	withQuestion *QuestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VideoQuestionTimestampQuery builder.
func (vqtq *VideoQuestionTimestampQuery) Where(ps ...predicate.VideoQuestionTimestamp) *VideoQuestionTimestampQuery {
	vqtq.predicates = append(vqtq.predicates, ps...)
	return vqtq
}

// Limit the number of records to be returned by this query.
func (vqtq *VideoQuestionTimestampQuery) Limit(limit int) *VideoQuestionTimestampQuery {
	vqtq.ctx.Limit = &limit
	return vqtq
}

// Offset to start from.
func (vqtq *VideoQuestionTimestampQuery) Offset(offset int) *VideoQuestionTimestampQuery {
	vqtq.ctx.Offset = &offset
	return vqtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vqtq *VideoQuestionTimestampQuery) Unique(unique bool) *VideoQuestionTimestampQuery {
	vqtq.ctx.Unique = &unique
	return vqtq
}

// Order specifies how the records should be ordered.
func (vqtq *VideoQuestionTimestampQuery) Order(o ...videoquestiontimestamp.OrderOption) *VideoQuestionTimestampQuery {
	vqtq.order = append(vqtq.order, o...)
	return vqtq
}

// QueryVideo chains the current query on the "video" edge.
func (vqtq *VideoQuestionTimestampQuery) QueryVideo() *VideoQuery {
	query := (&VideoClient{config: vqtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vqtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vqtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videoquestiontimestamp.Table, videoquestiontimestamp.FieldID, selector),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, videoquestiontimestamp.VideoTable, videoquestiontimestamp.VideoColumn),
		)
		fromU = sqlgraph.SetNeighbors(vqtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (vqtq *VideoQuestionTimestampQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: vqtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vqtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vqtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videoquestiontimestamp.Table, videoquestiontimestamp.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, videoquestiontimestamp.QuestionTable, videoquestiontimestamp.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(vqtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VideoQuestionTimestamp entity from the query.
// Returns a *NotFoundError when no VideoQuestionTimestamp was found.
func (vqtq *VideoQuestionTimestampQuery) First(ctx context.Context) (*VideoQuestionTimestamp, error) {
	nodes, err := vqtq.Limit(1).All(setContextOp(ctx, vqtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{videoquestiontimestamp.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) FirstX(ctx context.Context) *VideoQuestionTimestamp {
	node, err := vqtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VideoQuestionTimestamp ID from the query.
// Returns a *NotFoundError when no VideoQuestionTimestamp ID was found.
func (vqtq *VideoQuestionTimestampQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vqtq.Limit(1).IDs(setContextOp(ctx, vqtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{videoquestiontimestamp.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) FirstIDX(ctx context.Context) string {
	id, err := vqtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VideoQuestionTimestamp entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VideoQuestionTimestamp entity is found.
// Returns a *NotFoundError when no VideoQuestionTimestamp entities are found.
func (vqtq *VideoQuestionTimestampQuery) Only(ctx context.Context) (*VideoQuestionTimestamp, error) {
	nodes, err := vqtq.Limit(2).All(setContextOp(ctx, vqtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{videoquestiontimestamp.Label}
	default:
		return nil, &NotSingularError{videoquestiontimestamp.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) OnlyX(ctx context.Context) *VideoQuestionTimestamp {
	node, err := vqtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VideoQuestionTimestamp ID in the query.
// Returns a *NotSingularError when more than one VideoQuestionTimestamp ID is found.
// Returns a *NotFoundError when no entities are found.
func (vqtq *VideoQuestionTimestampQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vqtq.Limit(2).IDs(setContextOp(ctx, vqtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{videoquestiontimestamp.Label}
	default:
		err = &NotSingularError{videoquestiontimestamp.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) OnlyIDX(ctx context.Context) string {
	id, err := vqtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VideoQuestionTimestamps.
func (vqtq *VideoQuestionTimestampQuery) All(ctx context.Context) ([]*VideoQuestionTimestamp, error) {
	ctx = setContextOp(ctx, vqtq.ctx, ent.OpQueryAll)
	if err := vqtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VideoQuestionTimestamp, *VideoQuestionTimestampQuery]()
	return withInterceptors[[]*VideoQuestionTimestamp](ctx, vqtq, qr, vqtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) AllX(ctx context.Context) []*VideoQuestionTimestamp {
	nodes, err := vqtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VideoQuestionTimestamp IDs.
func (vqtq *VideoQuestionTimestampQuery) IDs(ctx context.Context) (ids []string, err error) {
	if vqtq.ctx.Unique == nil && vqtq.path != nil {
		vqtq.Unique(true)
	}
	ctx = setContextOp(ctx, vqtq.ctx, ent.OpQueryIDs)
	if err = vqtq.Select(videoquestiontimestamp.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) IDsX(ctx context.Context) []string {
	ids, err := vqtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vqtq *VideoQuestionTimestampQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vqtq.ctx, ent.OpQueryCount)
	if err := vqtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vqtq, querierCount[*VideoQuestionTimestampQuery](), vqtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) CountX(ctx context.Context) int {
	count, err := vqtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vqtq *VideoQuestionTimestampQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vqtq.ctx, ent.OpQueryExist)
	switch _, err := vqtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vqtq *VideoQuestionTimestampQuery) ExistX(ctx context.Context) bool {
	exist, err := vqtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VideoQuestionTimestampQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vqtq *VideoQuestionTimestampQuery) Clone() *VideoQuestionTimestampQuery {
	if vqtq == nil {
		return nil
	}
	return &VideoQuestionTimestampQuery{
		config:       vqtq.config,
		ctx:          vqtq.ctx.Clone(),
		order:        append([]videoquestiontimestamp.OrderOption{}, vqtq.order...),
		inters:       append([]Interceptor{}, vqtq.inters...),
		predicates:   append([]predicate.VideoQuestionTimestamp{}, vqtq.predicates...),
		withVideo:    vqtq.withVideo.Clone(),
		withQuestion: vqtq.withQuestion.Clone(),
		// clone intermediate query.
		sql:  vqtq.sql.Clone(),
		path: vqtq.path,
	}
}

// WithVideo tells the query-builder to eager-load the nodes that are connected to
// the "video" edge. The optional arguments are used to configure the query builder of the edge.
func (vqtq *VideoQuestionTimestampQuery) WithVideo(opts ...func(*VideoQuery)) *VideoQuestionTimestampQuery {
	query := (&VideoClient{config: vqtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vqtq.withVideo = query
	return vqtq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (vqtq *VideoQuestionTimestampQuery) WithQuestion(opts ...func(*QuestionQuery)) *VideoQuestionTimestampQuery {
	query := (&QuestionClient{config: vqtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vqtq.withQuestion = query
	return vqtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VideoQuestionTimestamp.Query().
//		GroupBy(videoquestiontimestamp.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vqtq *VideoQuestionTimestampQuery) GroupBy(field string, fields ...string) *VideoQuestionTimestampGroupBy {
	vqtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VideoQuestionTimestampGroupBy{build: vqtq}
	grbuild.flds = &vqtq.ctx.Fields
	grbuild.label = videoquestiontimestamp.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VideoQuestionTimestamp.Query().
//		Select(videoquestiontimestamp.FieldCreatedAt).
//		Scan(ctx, &v)
func (vqtq *VideoQuestionTimestampQuery) Select(fields ...string) *VideoQuestionTimestampSelect {
	vqtq.ctx.Fields = append(vqtq.ctx.Fields, fields...)
	sbuild := &VideoQuestionTimestampSelect{VideoQuestionTimestampQuery: vqtq}
	sbuild.label = videoquestiontimestamp.Label
	sbuild.flds, sbuild.scan = &vqtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VideoQuestionTimestampSelect configured with the given aggregations.
func (vqtq *VideoQuestionTimestampQuery) Aggregate(fns ...AggregateFunc) *VideoQuestionTimestampSelect {
	return vqtq.Select().Aggregate(fns...)
}

func (vqtq *VideoQuestionTimestampQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vqtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vqtq); err != nil {
				return err
			}
		}
	}
	for _, f := range vqtq.ctx.Fields {
		if !videoquestiontimestamp.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vqtq.path != nil {
		prev, err := vqtq.path(ctx)
		if err != nil {
			return err
		}
		vqtq.sql = prev
	}
	return nil
}

func (vqtq *VideoQuestionTimestampQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VideoQuestionTimestamp, error) {
	var (
		nodes       = []*VideoQuestionTimestamp{}
		_spec       = vqtq.querySpec()
		loadedTypes = [2]bool{
			vqtq.withVideo != nil,
			vqtq.withQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VideoQuestionTimestamp).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VideoQuestionTimestamp{config: vqtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vqtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vqtq.withVideo; query != nil {
		if err := vqtq.loadVideo(ctx, query, nodes, nil,
			func(n *VideoQuestionTimestamp, e *Video) { n.Edges.Video = e }); err != nil {
			return nil, err
		}
	}
	if query := vqtq.withQuestion; query != nil {
		if err := vqtq.loadQuestion(ctx, query, nodes, nil,
			func(n *VideoQuestionTimestamp, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vqtq *VideoQuestionTimestampQuery) loadVideo(ctx context.Context, query *VideoQuery, nodes []*VideoQuestionTimestamp, init func(*VideoQuestionTimestamp), assign func(*VideoQuestionTimestamp, *Video)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VideoQuestionTimestamp)
	for i := range nodes {
		fk := nodes[i].VideoID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(video.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "video_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vqtq *VideoQuestionTimestampQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*VideoQuestionTimestamp, init func(*VideoQuestionTimestamp), assign func(*VideoQuestionTimestamp, *Question)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VideoQuestionTimestamp)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vqtq *VideoQuestionTimestampQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vqtq.querySpec()
	_spec.Node.Columns = vqtq.ctx.Fields
	if len(vqtq.ctx.Fields) > 0 {
		_spec.Unique = vqtq.ctx.Unique != nil && *vqtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vqtq.driver, _spec)
}

func (vqtq *VideoQuestionTimestampQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(videoquestiontimestamp.Table, videoquestiontimestamp.Columns, sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString))
	_spec.From = vqtq.sql
	if unique := vqtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vqtq.path != nil {
		_spec.Unique = true
	}
	if fields := vqtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videoquestiontimestamp.FieldID)
		for i := range fields {
			if fields[i] != videoquestiontimestamp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vqtq.withVideo != nil {
			_spec.Node.AddColumnOnce(videoquestiontimestamp.FieldVideoID)
		}
		if vqtq.withQuestion != nil {
			_spec.Node.AddColumnOnce(videoquestiontimestamp.FieldQuestionID)
		}
	}
	if ps := vqtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vqtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vqtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vqtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vqtq *VideoQuestionTimestampQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vqtq.driver.Dialect())
	t1 := builder.Table(videoquestiontimestamp.Table)
	columns := vqtq.ctx.Fields
	if len(columns) == 0 {
		columns = videoquestiontimestamp.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vqtq.sql != nil {
		selector = vqtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vqtq.ctx.Unique != nil && *vqtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vqtq.predicates {
		p(selector)
	}
	for _, p := range vqtq.order {
		p(selector)
	}
	if offset := vqtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vqtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VideoQuestionTimestampGroupBy is the group-by builder for VideoQuestionTimestamp entities.
type VideoQuestionTimestampGroupBy struct {
	selector
	build *VideoQuestionTimestampQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vqtgb *VideoQuestionTimestampGroupBy) Aggregate(fns ...AggregateFunc) *VideoQuestionTimestampGroupBy {
	vqtgb.fns = append(vqtgb.fns, fns...)
	return vqtgb
}

// Scan applies the selector query and scans the result into the given value.
func (vqtgb *VideoQuestionTimestampGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vqtgb.build.ctx, ent.OpQueryGroupBy)
	if err := vqtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideoQuestionTimestampQuery, *VideoQuestionTimestampGroupBy](ctx, vqtgb.build, vqtgb, vqtgb.build.inters, v)
}

func (vqtgb *VideoQuestionTimestampGroupBy) sqlScan(ctx context.Context, root *VideoQuestionTimestampQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vqtgb.fns))
	for _, fn := range vqtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vqtgb.flds)+len(vqtgb.fns))
		for _, f := range *vqtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vqtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vqtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VideoQuestionTimestampSelect is the builder for selecting fields of VideoQuestionTimestamp entities.
type VideoQuestionTimestampSelect struct {
	*VideoQuestionTimestampQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vqts *VideoQuestionTimestampSelect) Aggregate(fns ...AggregateFunc) *VideoQuestionTimestampSelect {
	vqts.fns = append(vqts.fns, fns...)
	return vqts
}

// Scan applies the selector query and scans the result into the given value.
func (vqts *VideoQuestionTimestampSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vqts.ctx, ent.OpQuerySelect)
	if err := vqts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideoQuestionTimestampQuery, *VideoQuestionTimestampSelect](ctx, vqts.VideoQuestionTimestampQuery, vqts, vqts.inters, v)
}

func (vqts *VideoQuestionTimestampSelect) sqlScan(ctx context.Context, root *VideoQuestionTimestampQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vqts.fns))
	for _, fn := range vqts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vqts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vqts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
