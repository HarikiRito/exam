// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"template/internal/ent/predicate"
	"template/internal/ent/testsessionanswer"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestSessionAnswerDelete is the builder for deleting a TestSessionAnswer entity.
type TestSessionAnswerDelete struct {
	config
	hooks    []Hook
	mutation *TestSessionAnswerMutation
}

// Where appends a list predicates to the TestSessionAnswerDelete builder.
func (tsad *TestSessionAnswerDelete) Where(ps ...predicate.TestSessionAnswer) *TestSessionAnswerDelete {
	tsad.mutation.Where(ps...)
	return tsad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tsad *TestSessionAnswerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tsad.sqlExec, tsad.mutation, tsad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tsad *TestSessionAnswerDelete) ExecX(ctx context.Context) int {
	n, err := tsad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tsad *TestSessionAnswerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testsessionanswer.Table, sqlgraph.NewFieldSpec(testsessionanswer.FieldID, field.TypeUUID))
	if ps := tsad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tsad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tsad.mutation.done = true
	return affected, err
}

// TestSessionAnswerDeleteOne is the builder for deleting a single TestSessionAnswer entity.
type TestSessionAnswerDeleteOne struct {
	tsad *TestSessionAnswerDelete
}

// Where appends a list predicates to the TestSessionAnswerDelete builder.
func (tsado *TestSessionAnswerDeleteOne) Where(ps ...predicate.TestSessionAnswer) *TestSessionAnswerDeleteOne {
	tsado.tsad.mutation.Where(ps...)
	return tsado
}

// Exec executes the deletion query.
func (tsado *TestSessionAnswerDeleteOne) Exec(ctx context.Context) error {
	n, err := tsado.tsad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testsessionanswer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tsado *TestSessionAnswerDeleteOne) ExecX(ctx context.Context) {
	if err := tsado.Exec(ctx); err != nil {
		panic(err)
	}
}
