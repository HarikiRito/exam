// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testsession"
	"template/internal/ent/testsessionanswer"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestSessionAnswerUpdate is the builder for updating TestSessionAnswer entities.
type TestSessionAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *TestSessionAnswerMutation
}

// Where appends a list predicates to the TestSessionAnswerUpdate builder.
func (tsau *TestSessionAnswerUpdate) Where(ps ...predicate.TestSessionAnswer) *TestSessionAnswerUpdate {
	tsau.mutation.Where(ps...)
	return tsau
}

// SetCreatedAt sets the "created_at" field.
func (tsau *TestSessionAnswerUpdate) SetCreatedAt(t time.Time) *TestSessionAnswerUpdate {
	tsau.mutation.SetCreatedAt(t)
	return tsau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableCreatedAt(t *time.Time) *TestSessionAnswerUpdate {
	if t != nil {
		tsau.SetCreatedAt(*t)
	}
	return tsau
}

// SetUpdatedAt sets the "updated_at" field.
func (tsau *TestSessionAnswerUpdate) SetUpdatedAt(t time.Time) *TestSessionAnswerUpdate {
	tsau.mutation.SetUpdatedAt(t)
	return tsau
}

// SetDeletedAt sets the "deleted_at" field.
func (tsau *TestSessionAnswerUpdate) SetDeletedAt(t time.Time) *TestSessionAnswerUpdate {
	tsau.mutation.SetDeletedAt(t)
	return tsau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableDeletedAt(t *time.Time) *TestSessionAnswerUpdate {
	if t != nil {
		tsau.SetDeletedAt(*t)
	}
	return tsau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsau *TestSessionAnswerUpdate) ClearDeletedAt() *TestSessionAnswerUpdate {
	tsau.mutation.ClearDeletedAt()
	return tsau
}

// SetUserID sets the "user_id" field.
func (tsau *TestSessionAnswerUpdate) SetUserID(u uuid.UUID) *TestSessionAnswerUpdate {
	tsau.mutation.SetUserID(u)
	return tsau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableUserID(u *uuid.UUID) *TestSessionAnswerUpdate {
	if u != nil {
		tsau.SetUserID(*u)
	}
	return tsau
}

// SetQuestionID sets the "question_id" field.
func (tsau *TestSessionAnswerUpdate) SetQuestionID(u uuid.UUID) *TestSessionAnswerUpdate {
	tsau.mutation.SetQuestionID(u)
	return tsau
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableQuestionID(u *uuid.UUID) *TestSessionAnswerUpdate {
	if u != nil {
		tsau.SetQuestionID(*u)
	}
	return tsau
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (tsau *TestSessionAnswerUpdate) SetSelectedOptionID(u uuid.UUID) *TestSessionAnswerUpdate {
	tsau.mutation.SetSelectedOptionID(u)
	return tsau
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableSelectedOptionID(u *uuid.UUID) *TestSessionAnswerUpdate {
	if u != nil {
		tsau.SetSelectedOptionID(*u)
	}
	return tsau
}

// ClearSelectedOptionID clears the value of the "selected_option_id" field.
func (tsau *TestSessionAnswerUpdate) ClearSelectedOptionID() *TestSessionAnswerUpdate {
	tsau.mutation.ClearSelectedOptionID()
	return tsau
}

// SetSessionID sets the "session_id" field.
func (tsau *TestSessionAnswerUpdate) SetSessionID(u uuid.UUID) *TestSessionAnswerUpdate {
	tsau.mutation.SetSessionID(u)
	return tsau
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableSessionID(u *uuid.UUID) *TestSessionAnswerUpdate {
	if u != nil {
		tsau.SetSessionID(*u)
	}
	return tsau
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (tsau *TestSessionAnswerUpdate) SetSelectedOptionText(s string) *TestSessionAnswerUpdate {
	tsau.mutation.SetSelectedOptionText(s)
	return tsau
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (tsau *TestSessionAnswerUpdate) SetNillableSelectedOptionText(s *string) *TestSessionAnswerUpdate {
	if s != nil {
		tsau.SetSelectedOptionText(*s)
	}
	return tsau
}

// ClearSelectedOptionText clears the value of the "selected_option_text" field.
func (tsau *TestSessionAnswerUpdate) ClearSelectedOptionText() *TestSessionAnswerUpdate {
	tsau.mutation.ClearSelectedOptionText()
	return tsau
}

// SetUser sets the "user" edge to the User entity.
func (tsau *TestSessionAnswerUpdate) SetUser(u *User) *TestSessionAnswerUpdate {
	return tsau.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tsau *TestSessionAnswerUpdate) SetQuestion(q *Question) *TestSessionAnswerUpdate {
	return tsau.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (tsau *TestSessionAnswerUpdate) SetSelectedOption(q *QuestionOption) *TestSessionAnswerUpdate {
	return tsau.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (tsau *TestSessionAnswerUpdate) SetTestSessionID(id uuid.UUID) *TestSessionAnswerUpdate {
	tsau.mutation.SetTestSessionID(id)
	return tsau
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (tsau *TestSessionAnswerUpdate) SetTestSession(t *TestSession) *TestSessionAnswerUpdate {
	return tsau.SetTestSessionID(t.ID)
}

// Mutation returns the TestSessionAnswerMutation object of the builder.
func (tsau *TestSessionAnswerUpdate) Mutation() *TestSessionAnswerMutation {
	return tsau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tsau *TestSessionAnswerUpdate) ClearUser() *TestSessionAnswerUpdate {
	tsau.mutation.ClearUser()
	return tsau
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tsau *TestSessionAnswerUpdate) ClearQuestion() *TestSessionAnswerUpdate {
	tsau.mutation.ClearQuestion()
	return tsau
}

// ClearSelectedOption clears the "selected_option" edge to the QuestionOption entity.
func (tsau *TestSessionAnswerUpdate) ClearSelectedOption() *TestSessionAnswerUpdate {
	tsau.mutation.ClearSelectedOption()
	return tsau
}

// ClearTestSession clears the "test_session" edge to the TestSession entity.
func (tsau *TestSessionAnswerUpdate) ClearTestSession() *TestSessionAnswerUpdate {
	tsau.mutation.ClearTestSession()
	return tsau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsau *TestSessionAnswerUpdate) Save(ctx context.Context) (int, error) {
	if err := tsau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tsau.sqlSave, tsau.mutation, tsau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsau *TestSessionAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := tsau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsau *TestSessionAnswerUpdate) Exec(ctx context.Context) error {
	_, err := tsau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsau *TestSessionAnswerUpdate) ExecX(ctx context.Context) {
	if err := tsau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsau *TestSessionAnswerUpdate) defaults() error {
	if _, ok := tsau.mutation.UpdatedAt(); !ok {
		if testsessionanswer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testsessionanswer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testsessionanswer.UpdateDefaultUpdatedAt()
		tsau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tsau *TestSessionAnswerUpdate) check() error {
	if tsau.mutation.UserCleared() && len(tsau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSessionAnswer.user"`)
	}
	if tsau.mutation.QuestionCleared() && len(tsau.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSessionAnswer.question"`)
	}
	if tsau.mutation.TestSessionCleared() && len(tsau.mutation.TestSessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSessionAnswer.test_session"`)
	}
	return nil
}

func (tsau *TestSessionAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testsessionanswer.Table, testsessionanswer.Columns, sqlgraph.NewFieldSpec(testsessionanswer.FieldID, field.TypeUUID))
	if ps := tsau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsau.mutation.CreatedAt(); ok {
		_spec.SetField(testsessionanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsau.mutation.UpdatedAt(); ok {
		_spec.SetField(testsessionanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsau.mutation.DeletedAt(); ok {
		_spec.SetField(testsessionanswer.FieldDeletedAt, field.TypeTime, value)
	}
	if tsau.mutation.DeletedAtCleared() {
		_spec.ClearField(testsessionanswer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsau.mutation.SelectedOptionText(); ok {
		_spec.SetField(testsessionanswer.FieldSelectedOptionText, field.TypeString, value)
	}
	if tsau.mutation.SelectedOptionTextCleared() {
		_spec.ClearField(testsessionanswer.FieldSelectedOptionText, field.TypeString)
	}
	if tsau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.UserTable,
			Columns: []string{testsessionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.UserTable,
			Columns: []string{testsessionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsau.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.QuestionTable,
			Columns: []string{testsessionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsau.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.QuestionTable,
			Columns: []string{testsessionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsau.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.SelectedOptionTable,
			Columns: []string{testsessionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsau.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.SelectedOptionTable,
			Columns: []string{testsessionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsau.mutation.TestSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.TestSessionTable,
			Columns: []string{testsessionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsau.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.TestSessionTable,
			Columns: []string{testsessionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testsessionanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsau.mutation.done = true
	return n, nil
}

// TestSessionAnswerUpdateOne is the builder for updating a single TestSessionAnswer entity.
type TestSessionAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestSessionAnswerMutation
}

// SetCreatedAt sets the "created_at" field.
func (tsauo *TestSessionAnswerUpdateOne) SetCreatedAt(t time.Time) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetCreatedAt(t)
	return tsauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableCreatedAt(t *time.Time) *TestSessionAnswerUpdateOne {
	if t != nil {
		tsauo.SetCreatedAt(*t)
	}
	return tsauo
}

// SetUpdatedAt sets the "updated_at" field.
func (tsauo *TestSessionAnswerUpdateOne) SetUpdatedAt(t time.Time) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetUpdatedAt(t)
	return tsauo
}

// SetDeletedAt sets the "deleted_at" field.
func (tsauo *TestSessionAnswerUpdateOne) SetDeletedAt(t time.Time) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetDeletedAt(t)
	return tsauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableDeletedAt(t *time.Time) *TestSessionAnswerUpdateOne {
	if t != nil {
		tsauo.SetDeletedAt(*t)
	}
	return tsauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsauo *TestSessionAnswerUpdateOne) ClearDeletedAt() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearDeletedAt()
	return tsauo
}

// SetUserID sets the "user_id" field.
func (tsauo *TestSessionAnswerUpdateOne) SetUserID(u uuid.UUID) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetUserID(u)
	return tsauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableUserID(u *uuid.UUID) *TestSessionAnswerUpdateOne {
	if u != nil {
		tsauo.SetUserID(*u)
	}
	return tsauo
}

// SetQuestionID sets the "question_id" field.
func (tsauo *TestSessionAnswerUpdateOne) SetQuestionID(u uuid.UUID) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetQuestionID(u)
	return tsauo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableQuestionID(u *uuid.UUID) *TestSessionAnswerUpdateOne {
	if u != nil {
		tsauo.SetQuestionID(*u)
	}
	return tsauo
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (tsauo *TestSessionAnswerUpdateOne) SetSelectedOptionID(u uuid.UUID) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetSelectedOptionID(u)
	return tsauo
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableSelectedOptionID(u *uuid.UUID) *TestSessionAnswerUpdateOne {
	if u != nil {
		tsauo.SetSelectedOptionID(*u)
	}
	return tsauo
}

// ClearSelectedOptionID clears the value of the "selected_option_id" field.
func (tsauo *TestSessionAnswerUpdateOne) ClearSelectedOptionID() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearSelectedOptionID()
	return tsauo
}

// SetSessionID sets the "session_id" field.
func (tsauo *TestSessionAnswerUpdateOne) SetSessionID(u uuid.UUID) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetSessionID(u)
	return tsauo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableSessionID(u *uuid.UUID) *TestSessionAnswerUpdateOne {
	if u != nil {
		tsauo.SetSessionID(*u)
	}
	return tsauo
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (tsauo *TestSessionAnswerUpdateOne) SetSelectedOptionText(s string) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetSelectedOptionText(s)
	return tsauo
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (tsauo *TestSessionAnswerUpdateOne) SetNillableSelectedOptionText(s *string) *TestSessionAnswerUpdateOne {
	if s != nil {
		tsauo.SetSelectedOptionText(*s)
	}
	return tsauo
}

// ClearSelectedOptionText clears the value of the "selected_option_text" field.
func (tsauo *TestSessionAnswerUpdateOne) ClearSelectedOptionText() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearSelectedOptionText()
	return tsauo
}

// SetUser sets the "user" edge to the User entity.
func (tsauo *TestSessionAnswerUpdateOne) SetUser(u *User) *TestSessionAnswerUpdateOne {
	return tsauo.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tsauo *TestSessionAnswerUpdateOne) SetQuestion(q *Question) *TestSessionAnswerUpdateOne {
	return tsauo.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (tsauo *TestSessionAnswerUpdateOne) SetSelectedOption(q *QuestionOption) *TestSessionAnswerUpdateOne {
	return tsauo.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (tsauo *TestSessionAnswerUpdateOne) SetTestSessionID(id uuid.UUID) *TestSessionAnswerUpdateOne {
	tsauo.mutation.SetTestSessionID(id)
	return tsauo
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (tsauo *TestSessionAnswerUpdateOne) SetTestSession(t *TestSession) *TestSessionAnswerUpdateOne {
	return tsauo.SetTestSessionID(t.ID)
}

// Mutation returns the TestSessionAnswerMutation object of the builder.
func (tsauo *TestSessionAnswerUpdateOne) Mutation() *TestSessionAnswerMutation {
	return tsauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tsauo *TestSessionAnswerUpdateOne) ClearUser() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearUser()
	return tsauo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tsauo *TestSessionAnswerUpdateOne) ClearQuestion() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearQuestion()
	return tsauo
}

// ClearSelectedOption clears the "selected_option" edge to the QuestionOption entity.
func (tsauo *TestSessionAnswerUpdateOne) ClearSelectedOption() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearSelectedOption()
	return tsauo
}

// ClearTestSession clears the "test_session" edge to the TestSession entity.
func (tsauo *TestSessionAnswerUpdateOne) ClearTestSession() *TestSessionAnswerUpdateOne {
	tsauo.mutation.ClearTestSession()
	return tsauo
}

// Where appends a list predicates to the TestSessionAnswerUpdate builder.
func (tsauo *TestSessionAnswerUpdateOne) Where(ps ...predicate.TestSessionAnswer) *TestSessionAnswerUpdateOne {
	tsauo.mutation.Where(ps...)
	return tsauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsauo *TestSessionAnswerUpdateOne) Select(field string, fields ...string) *TestSessionAnswerUpdateOne {
	tsauo.fields = append([]string{field}, fields...)
	return tsauo
}

// Save executes the query and returns the updated TestSessionAnswer entity.
func (tsauo *TestSessionAnswerUpdateOne) Save(ctx context.Context) (*TestSessionAnswer, error) {
	if err := tsauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tsauo.sqlSave, tsauo.mutation, tsauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsauo *TestSessionAnswerUpdateOne) SaveX(ctx context.Context) *TestSessionAnswer {
	node, err := tsauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsauo *TestSessionAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := tsauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsauo *TestSessionAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := tsauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsauo *TestSessionAnswerUpdateOne) defaults() error {
	if _, ok := tsauo.mutation.UpdatedAt(); !ok {
		if testsessionanswer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testsessionanswer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testsessionanswer.UpdateDefaultUpdatedAt()
		tsauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tsauo *TestSessionAnswerUpdateOne) check() error {
	if tsauo.mutation.UserCleared() && len(tsauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSessionAnswer.user"`)
	}
	if tsauo.mutation.QuestionCleared() && len(tsauo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSessionAnswer.question"`)
	}
	if tsauo.mutation.TestSessionCleared() && len(tsauo.mutation.TestSessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSessionAnswer.test_session"`)
	}
	return nil
}

func (tsauo *TestSessionAnswerUpdateOne) sqlSave(ctx context.Context) (_node *TestSessionAnswer, err error) {
	if err := tsauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testsessionanswer.Table, testsessionanswer.Columns, sqlgraph.NewFieldSpec(testsessionanswer.FieldID, field.TypeUUID))
	id, ok := tsauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestSessionAnswer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testsessionanswer.FieldID)
		for _, f := range fields {
			if !testsessionanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testsessionanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsauo.mutation.CreatedAt(); ok {
		_spec.SetField(testsessionanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsauo.mutation.UpdatedAt(); ok {
		_spec.SetField(testsessionanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsauo.mutation.DeletedAt(); ok {
		_spec.SetField(testsessionanswer.FieldDeletedAt, field.TypeTime, value)
	}
	if tsauo.mutation.DeletedAtCleared() {
		_spec.ClearField(testsessionanswer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsauo.mutation.SelectedOptionText(); ok {
		_spec.SetField(testsessionanswer.FieldSelectedOptionText, field.TypeString, value)
	}
	if tsauo.mutation.SelectedOptionTextCleared() {
		_spec.ClearField(testsessionanswer.FieldSelectedOptionText, field.TypeString)
	}
	if tsauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.UserTable,
			Columns: []string{testsessionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.UserTable,
			Columns: []string{testsessionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsauo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.QuestionTable,
			Columns: []string{testsessionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsauo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.QuestionTable,
			Columns: []string{testsessionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsauo.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.SelectedOptionTable,
			Columns: []string{testsessionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsauo.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.SelectedOptionTable,
			Columns: []string{testsessionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsauo.mutation.TestSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.TestSessionTable,
			Columns: []string{testsessionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsauo.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsessionanswer.TestSessionTable,
			Columns: []string{testsessionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestSessionAnswer{config: tsauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testsessionanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsauo.mutation.done = true
	return _node, nil
}
