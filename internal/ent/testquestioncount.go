// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/test"
	"template/internal/ent/testquestioncount"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestQuestionCount is the model entity for the TestQuestionCount schema.
type TestQuestionCount struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// TestID holds the value of the "test_id" field.
	TestID uuid.UUID `json:"test_id,omitempty"`
	// NumberOfQuestions holds the value of the "number_of_questions" field.
	NumberOfQuestions int `json:"number_of_questions,omitempty"`
	// PointsPerQuestion holds the value of the "points_per_question" field.
	PointsPerQuestion int `json:"points_per_question,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestQuestionCountQuery when eager-loading is set.
	Edges        TestQuestionCountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestQuestionCountEdges holds the relations/edges for other nodes in the graph.
type TestQuestionCountEdges struct {
	// Test holds the value of the test edge.
	Test *Test `json:"test,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestQuestionCountEdges) TestOrErr() (*Test, error) {
	if e.Test != nil {
		return e.Test, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: test.Label}
	}
	return nil, &NotLoadedError{edge: "test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestQuestionCount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testquestioncount.FieldNumberOfQuestions, testquestioncount.FieldPointsPerQuestion:
			values[i] = new(sql.NullInt64)
		case testquestioncount.FieldCreatedAt, testquestioncount.FieldUpdatedAt, testquestioncount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case testquestioncount.FieldID, testquestioncount.FieldTestID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestQuestionCount fields.
func (tqc *TestQuestionCount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testquestioncount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tqc.ID = *value
			}
		case testquestioncount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tqc.CreatedAt = value.Time
			}
		case testquestioncount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tqc.UpdatedAt = value.Time
			}
		case testquestioncount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tqc.DeletedAt = new(time.Time)
				*tqc.DeletedAt = value.Time
			}
		case testquestioncount.FieldTestID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field test_id", values[i])
			} else if value != nil {
				tqc.TestID = *value
			}
		case testquestioncount.FieldNumberOfQuestions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_questions", values[i])
			} else if value.Valid {
				tqc.NumberOfQuestions = int(value.Int64)
			}
		case testquestioncount.FieldPointsPerQuestion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points_per_question", values[i])
			} else if value.Valid {
				tqc.PointsPerQuestion = int(value.Int64)
			}
		default:
			tqc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestQuestionCount.
// This includes values selected through modifiers, order, etc.
func (tqc *TestQuestionCount) Value(name string) (ent.Value, error) {
	return tqc.selectValues.Get(name)
}

// QueryTest queries the "test" edge of the TestQuestionCount entity.
func (tqc *TestQuestionCount) QueryTest() *TestQuery {
	return NewTestQuestionCountClient(tqc.config).QueryTest(tqc)
}

// Update returns a builder for updating this TestQuestionCount.
// Note that you need to call TestQuestionCount.Unwrap() before calling this method if this TestQuestionCount
// was returned from a transaction, and the transaction was committed or rolled back.
func (tqc *TestQuestionCount) Update() *TestQuestionCountUpdateOne {
	return NewTestQuestionCountClient(tqc.config).UpdateOne(tqc)
}

// Unwrap unwraps the TestQuestionCount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tqc *TestQuestionCount) Unwrap() *TestQuestionCount {
	_tx, ok := tqc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestQuestionCount is not a transactional entity")
	}
	tqc.config.driver = _tx.drv
	return tqc
}

// String implements the fmt.Stringer.
func (tqc *TestQuestionCount) String() string {
	var builder strings.Builder
	builder.WriteString("TestQuestionCount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tqc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tqc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tqc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tqc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("test_id=")
	builder.WriteString(fmt.Sprintf("%v", tqc.TestID))
	builder.WriteString(", ")
	builder.WriteString("number_of_questions=")
	builder.WriteString(fmt.Sprintf("%v", tqc.NumberOfQuestions))
	builder.WriteString(", ")
	builder.WriteString("points_per_question=")
	builder.WriteString(fmt.Sprintf("%v", tqc.PointsPerQuestion))
	builder.WriteByte(')')
	return builder.String()
}

// TestQuestionCounts is a parsable slice of TestQuestionCount.
type TestQuestionCounts []*TestQuestionCount
