// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/question"
	"template/internal/ent/questioncollection"
	"template/internal/ent/questionoption"
	"template/internal/ent/test"
	"template/internal/ent/testignorequestion"
	"template/internal/ent/testquestionanswer"
	"template/internal/ent/testquestionpoint"
	"template/internal/ent/videoquestiontimestamp"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionCreate) SetCreatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableCreatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuestionCreate) SetUpdatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableUpdatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetDeletedAt sets the "deleted_at" field.
func (qc *QuestionCreate) SetDeletedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetDeletedAt(t)
	return qc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableDeletedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetDeletedAt(*t)
	}
	return qc
}

// SetCollectionID sets the "collection_id" field.
func (qc *QuestionCreate) SetCollectionID(u uuid.UUID) *QuestionCreate {
	qc.mutation.SetCollectionID(u)
	return qc
}

// SetQuestionText sets the "question_text" field.
func (qc *QuestionCreate) SetQuestionText(s string) *QuestionCreate {
	qc.mutation.SetQuestionText(s)
	return qc
}

// SetID sets the "id" field.
func (qc *QuestionCreate) SetID(u uuid.UUID) *QuestionCreate {
	qc.mutation.SetID(u)
	return qc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableID(u *uuid.UUID) *QuestionCreate {
	if u != nil {
		qc.SetID(*u)
	}
	return qc
}

// SetCollection sets the "collection" edge to the QuestionCollection entity.
func (qc *QuestionCreate) SetCollection(q *QuestionCollection) *QuestionCreate {
	return qc.SetCollectionID(q.ID)
}

// AddQuestionOptionIDs adds the "question_options" edge to the QuestionOption entity by IDs.
func (qc *QuestionCreate) AddQuestionOptionIDs(ids ...uuid.UUID) *QuestionCreate {
	qc.mutation.AddQuestionOptionIDs(ids...)
	return qc
}

// AddQuestionOptions adds the "question_options" edges to the QuestionOption entity.
func (qc *QuestionCreate) AddQuestionOptions(q ...*QuestionOption) *QuestionCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qc.AddQuestionOptionIDs(ids...)
}

// AddVideoQuestionTimestampsQuestionIDs adds the "video_question_timestamps_question" edge to the VideoQuestionTimestamp entity by IDs.
func (qc *QuestionCreate) AddVideoQuestionTimestampsQuestionIDs(ids ...uuid.UUID) *QuestionCreate {
	qc.mutation.AddVideoQuestionTimestampsQuestionIDs(ids...)
	return qc
}

// AddVideoQuestionTimestampsQuestion adds the "video_question_timestamps_question" edges to the VideoQuestionTimestamp entity.
func (qc *QuestionCreate) AddVideoQuestionTimestampsQuestion(v ...*VideoQuestionTimestamp) *QuestionCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return qc.AddVideoQuestionTimestampsQuestionIDs(ids...)
}

// AddUserQuestionAnswerIDs adds the "user_question_answers" edge to the TestQuestionAnswer entity by IDs.
func (qc *QuestionCreate) AddUserQuestionAnswerIDs(ids ...uuid.UUID) *QuestionCreate {
	qc.mutation.AddUserQuestionAnswerIDs(ids...)
	return qc
}

// AddUserQuestionAnswers adds the "user_question_answers" edges to the TestQuestionAnswer entity.
func (qc *QuestionCreate) AddUserQuestionAnswers(t ...*TestQuestionAnswer) *QuestionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qc.AddUserQuestionAnswerIDs(ids...)
}

// AddTestIDs adds the "tests" edge to the Test entity by IDs.
func (qc *QuestionCreate) AddTestIDs(ids ...uuid.UUID) *QuestionCreate {
	qc.mutation.AddTestIDs(ids...)
	return qc
}

// AddTests adds the "tests" edges to the Test entity.
func (qc *QuestionCreate) AddTests(t ...*Test) *QuestionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qc.AddTestIDs(ids...)
}

// AddTestIgnoreQuestionIDs adds the "test_ignore_questions" edge to the TestIgnoreQuestion entity by IDs.
func (qc *QuestionCreate) AddTestIgnoreQuestionIDs(ids ...uuid.UUID) *QuestionCreate {
	qc.mutation.AddTestIgnoreQuestionIDs(ids...)
	return qc
}

// AddTestIgnoreQuestions adds the "test_ignore_questions" edges to the TestIgnoreQuestion entity.
func (qc *QuestionCreate) AddTestIgnoreQuestions(t ...*TestIgnoreQuestion) *QuestionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qc.AddTestIgnoreQuestionIDs(ids...)
}

// AddTestQuestionPointIDs adds the "test_question_points" edge to the TestQuestionPoint entity by IDs.
func (qc *QuestionCreate) AddTestQuestionPointIDs(ids ...uuid.UUID) *QuestionCreate {
	qc.mutation.AddTestQuestionPointIDs(ids...)
	return qc
}

// AddTestQuestionPoints adds the "test_question_points" edges to the TestQuestionPoint entity.
func (qc *QuestionCreate) AddTestQuestionPoints(t ...*TestQuestionPoint) *QuestionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qc.AddTestQuestionPointIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qc *QuestionCreate) Mutation() *QuestionMutation {
	return qc.mutation
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	if err := qc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionCreate) defaults() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		if question.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := question.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		if question.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := question.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qc.mutation.ID(); !ok {
		if question.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized question.DefaultID (forgotten import ent/runtime?)")
		}
		v := question.DefaultID()
		qc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Question.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Question.updated_at"`)}
	}
	if _, ok := qc.mutation.CollectionID(); !ok {
		return &ValidationError{Name: "collection_id", err: errors.New(`ent: missing required field "Question.collection_id"`)}
	}
	if _, ok := qc.mutation.QuestionText(); !ok {
		return &ValidationError{Name: "question_text", err: errors.New(`ent: missing required field "Question.question_text"`)}
	}
	if v, ok := qc.mutation.QuestionText(); ok {
		if err := question.QuestionTextValidator(v); err != nil {
			return &ValidationError{Name: "question_text", err: fmt.Errorf(`ent: validator failed for field "Question.question_text": %w`, err)}
		}
	}
	if len(qc.mutation.CollectionIDs()) == 0 {
		return &ValidationError{Name: "collection", err: errors.New(`ent: missing required edge "Question.collection"`)}
	}
	return nil
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID))
	)
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := qc.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
		_node.QuestionText = value
	}
	if nodes := qc.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CollectionTable,
			Columns: []string{question.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CollectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.QuestionOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.VideoQuestionTimestampsQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.UserQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.UserQuestionAnswersTable,
			Columns: []string{question.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.TestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TestsTable,
			Columns: question.TestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.TestIgnoreQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.TestIgnoreQuestionsTable,
			Columns: []string{question.TestIgnoreQuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testignorequestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.TestQuestionPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   question.TestQuestionPointsTable,
			Columns: []string{question.TestQuestionPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testquestionpoint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
}

// Save creates the Question entities in the database.
func (qcb *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Question, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
