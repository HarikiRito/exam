// Code generated by ent, DO NOT EDIT.

package testquestioncount

import (
	"template/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldDeletedAt, v))
}

// TestID applies equality check predicate on the "test_id" field. It's identical to TestIDEQ.
func TestID(v uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldTestID, v))
}

// NumberOfQuestions applies equality check predicate on the "number_of_questions" field. It's identical to NumberOfQuestionsEQ.
func NumberOfQuestions(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldNumberOfQuestions, v))
}

// PointsPerQuestion applies equality check predicate on the "points_per_question" field. It's identical to PointsPerQuestionEQ.
func PointsPerQuestion(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldPointsPerQuestion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotNull(FieldDeletedAt))
}

// TestIDEQ applies the EQ predicate on the "test_id" field.
func TestIDEQ(v uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldTestID, v))
}

// TestIDNEQ applies the NEQ predicate on the "test_id" field.
func TestIDNEQ(v uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldTestID, v))
}

// TestIDIn applies the In predicate on the "test_id" field.
func TestIDIn(vs ...uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldTestID, vs...))
}

// TestIDNotIn applies the NotIn predicate on the "test_id" field.
func TestIDNotIn(vs ...uuid.UUID) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldTestID, vs...))
}

// NumberOfQuestionsEQ applies the EQ predicate on the "number_of_questions" field.
func NumberOfQuestionsEQ(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsNEQ applies the NEQ predicate on the "number_of_questions" field.
func NumberOfQuestionsNEQ(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsIn applies the In predicate on the "number_of_questions" field.
func NumberOfQuestionsIn(vs ...int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldNumberOfQuestions, vs...))
}

// NumberOfQuestionsNotIn applies the NotIn predicate on the "number_of_questions" field.
func NumberOfQuestionsNotIn(vs ...int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldNumberOfQuestions, vs...))
}

// NumberOfQuestionsGT applies the GT predicate on the "number_of_questions" field.
func NumberOfQuestionsGT(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGT(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsGTE applies the GTE predicate on the "number_of_questions" field.
func NumberOfQuestionsGTE(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGTE(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsLT applies the LT predicate on the "number_of_questions" field.
func NumberOfQuestionsLT(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLT(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsLTE applies the LTE predicate on the "number_of_questions" field.
func NumberOfQuestionsLTE(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLTE(FieldNumberOfQuestions, v))
}

// PointsPerQuestionEQ applies the EQ predicate on the "points_per_question" field.
func PointsPerQuestionEQ(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldEQ(FieldPointsPerQuestion, v))
}

// PointsPerQuestionNEQ applies the NEQ predicate on the "points_per_question" field.
func PointsPerQuestionNEQ(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNEQ(FieldPointsPerQuestion, v))
}

// PointsPerQuestionIn applies the In predicate on the "points_per_question" field.
func PointsPerQuestionIn(vs ...int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldIn(FieldPointsPerQuestion, vs...))
}

// PointsPerQuestionNotIn applies the NotIn predicate on the "points_per_question" field.
func PointsPerQuestionNotIn(vs ...int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldNotIn(FieldPointsPerQuestion, vs...))
}

// PointsPerQuestionGT applies the GT predicate on the "points_per_question" field.
func PointsPerQuestionGT(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGT(FieldPointsPerQuestion, v))
}

// PointsPerQuestionGTE applies the GTE predicate on the "points_per_question" field.
func PointsPerQuestionGTE(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldGTE(FieldPointsPerQuestion, v))
}

// PointsPerQuestionLT applies the LT predicate on the "points_per_question" field.
func PointsPerQuestionLT(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLT(FieldPointsPerQuestion, v))
}

// PointsPerQuestionLTE applies the LTE predicate on the "points_per_question" field.
func PointsPerQuestionLTE(v int) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.FieldLTE(FieldPointsPerQuestion, v))
}

// HasTest applies the HasEdge predicate on the "test" edge.
func HasTest() predicate.TestQuestionCount {
	return predicate.TestQuestionCount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TestTable, TestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestWith applies the HasEdge predicate on the "test" edge with a given conditions (other predicates).
func HasTestWith(preds ...predicate.Test) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(func(s *sql.Selector) {
		step := newTestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestQuestionCount) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestQuestionCount) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestQuestionCount) predicate.TestQuestionCount {
	return predicate.TestQuestionCount(sql.NotPredicates(p))
}
