// Code generated by ent, DO NOT EDIT.

package testquestioncount

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the testquestioncount type in the database.
	Label = "test_question_count"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTestID holds the string denoting the test_id field in the database.
	FieldTestID = "test_id"
	// FieldNumberOfQuestions holds the string denoting the number_of_questions field in the database.
	FieldNumberOfQuestions = "number_of_questions"
	// FieldPointsPerQuestion holds the string denoting the points_per_question field in the database.
	FieldPointsPerQuestion = "points_per_question"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "test"
	// Table holds the table name of the testquestioncount in the database.
	Table = "test_question_counts"
	// TestTable is the table that holds the test relation/edge.
	TestTable = "test_question_counts"
	// TestInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestInverseTable = "tests"
	// TestColumn is the table column denoting the test relation/edge.
	TestColumn = "test_id"
)

// Columns holds all SQL columns for testquestioncount fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTestID,
	FieldNumberOfQuestions,
	FieldPointsPerQuestion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "template/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultNumberOfQuestions holds the default value on creation for the "number_of_questions" field.
	DefaultNumberOfQuestions int
	// DefaultPointsPerQuestion holds the default value on creation for the "points_per_question" field.
	DefaultPointsPerQuestion int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TestQuestionCount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTestID orders the results by the test_id field.
func ByTestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestID, opts...).ToFunc()
}

// ByNumberOfQuestions orders the results by the number_of_questions field.
func ByNumberOfQuestions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberOfQuestions, opts...).ToFunc()
}

// ByPointsPerQuestion orders the results by the points_per_question field.
func ByPointsPerQuestion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointsPerQuestion, opts...).ToFunc()
}

// ByTestField orders the results by test field.
func ByTestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestStep(), sql.OrderByField(field, opts...))
	}
}
func newTestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TestTable, TestColumn),
	)
}
