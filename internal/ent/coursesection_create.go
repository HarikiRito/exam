// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/question"
	"template/internal/ent/testsession"
	"template/internal/ent/video"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseSectionCreate is the builder for creating a CourseSection entity.
type CourseSectionCreate struct {
	config
	mutation *CourseSectionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (csc *CourseSectionCreate) SetCreatedAt(t time.Time) *CourseSectionCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableCreatedAt(t *time.Time) *CourseSectionCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CourseSectionCreate) SetUpdatedAt(t time.Time) *CourseSectionCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableUpdatedAt(t *time.Time) *CourseSectionCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetDeletedAt sets the "deleted_at" field.
func (csc *CourseSectionCreate) SetDeletedAt(t time.Time) *CourseSectionCreate {
	csc.mutation.SetDeletedAt(t)
	return csc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableDeletedAt(t *time.Time) *CourseSectionCreate {
	if t != nil {
		csc.SetDeletedAt(*t)
	}
	return csc
}

// SetCourseID sets the "course_id" field.
func (csc *CourseSectionCreate) SetCourseID(u uuid.UUID) *CourseSectionCreate {
	csc.mutation.SetCourseID(u)
	return csc
}

// SetTitle sets the "title" field.
func (csc *CourseSectionCreate) SetTitle(s string) *CourseSectionCreate {
	csc.mutation.SetTitle(s)
	return csc
}

// SetDescription sets the "description" field.
func (csc *CourseSectionCreate) SetDescription(s string) *CourseSectionCreate {
	csc.mutation.SetDescription(s)
	return csc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableDescription(s *string) *CourseSectionCreate {
	if s != nil {
		csc.SetDescription(*s)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CourseSectionCreate) SetID(u uuid.UUID) *CourseSectionCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *CourseSectionCreate) SetNillableID(u *uuid.UUID) *CourseSectionCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// SetCourse sets the "course" edge to the Course entity.
func (csc *CourseSectionCreate) SetCourse(c *Course) *CourseSectionCreate {
	return csc.SetCourseID(c.ID)
}

// AddCourseSectionVideoIDs adds the "course_section_videos" edge to the Video entity by IDs.
func (csc *CourseSectionCreate) AddCourseSectionVideoIDs(ids ...uuid.UUID) *CourseSectionCreate {
	csc.mutation.AddCourseSectionVideoIDs(ids...)
	return csc
}

// AddCourseSectionVideos adds the "course_section_videos" edges to the Video entity.
func (csc *CourseSectionCreate) AddCourseSectionVideos(v ...*Video) *CourseSectionCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return csc.AddCourseSectionVideoIDs(ids...)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (csc *CourseSectionCreate) AddQuestionIDs(ids ...uuid.UUID) *CourseSectionCreate {
	csc.mutation.AddQuestionIDs(ids...)
	return csc
}

// AddQuestions adds the "questions" edges to the Question entity.
func (csc *CourseSectionCreate) AddQuestions(q ...*Question) *CourseSectionCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return csc.AddQuestionIDs(ids...)
}

// AddTestSessionIDs adds the "test_sessions" edge to the TestSession entity by IDs.
func (csc *CourseSectionCreate) AddTestSessionIDs(ids ...uuid.UUID) *CourseSectionCreate {
	csc.mutation.AddTestSessionIDs(ids...)
	return csc
}

// AddTestSessions adds the "test_sessions" edges to the TestSession entity.
func (csc *CourseSectionCreate) AddTestSessions(t ...*TestSession) *CourseSectionCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return csc.AddTestSessionIDs(ids...)
}

// Mutation returns the CourseSectionMutation object of the builder.
func (csc *CourseSectionCreate) Mutation() *CourseSectionMutation {
	return csc.mutation
}

// Save creates the CourseSection in the database.
func (csc *CourseSectionCreate) Save(ctx context.Context) (*CourseSection, error) {
	if err := csc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CourseSectionCreate) SaveX(ctx context.Context) *CourseSection {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CourseSectionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CourseSectionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CourseSectionCreate) defaults() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		if coursesection.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coursesection.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coursesection.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		if coursesection.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coursesection.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coursesection.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		if coursesection.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized coursesection.DefaultID (forgotten import ent/runtime?)")
		}
		v := coursesection.DefaultID()
		csc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csc *CourseSectionCreate) check() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CourseSection.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CourseSection.updated_at"`)}
	}
	if _, ok := csc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "CourseSection.course_id"`)}
	}
	if _, ok := csc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "CourseSection.title"`)}
	}
	if v, ok := csc.mutation.Title(); ok {
		if err := coursesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CourseSection.title": %w`, err)}
		}
	}
	if len(csc.mutation.CourseIDs()) == 0 {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "CourseSection.course"`)}
	}
	return nil
}

func (csc *CourseSectionCreate) sqlSave(ctx context.Context) (*CourseSection, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CourseSectionCreate) createSpec() (*CourseSection, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseSection{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(coursesection.Table, sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(coursesection.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(coursesection.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.DeletedAt(); ok {
		_spec.SetField(coursesection.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := csc.mutation.Title(); ok {
		_spec.SetField(coursesection.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := csc.mutation.Description(); ok {
		_spec.SetField(coursesection.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := csc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CourseSectionVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.TestSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.TestSessionsTable,
			Columns: []string{coursesection.TestSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseSectionCreateBulk is the builder for creating many CourseSection entities in bulk.
type CourseSectionCreateBulk struct {
	config
	err      error
	builders []*CourseSectionCreate
}

// Save creates the CourseSection entities in the database.
func (cscb *CourseSectionCreateBulk) Save(ctx context.Context) ([]*CourseSection, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CourseSection, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CourseSectionCreateBulk) SaveX(ctx context.Context) []*CourseSection {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CourseSectionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CourseSectionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
