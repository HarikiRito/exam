// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/coursesection"
	"template/internal/ent/test"
	"template/internal/ent/testsession"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestSession is the model entity for the TestSession schema.
type TestSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CourseSectionID holds the value of the "course_section_id" field.
	CourseSectionID *uuid.UUID `json:"course_section_id,omitempty"`
	// TestID holds the value of the "test_id" field.
	TestID uuid.UUID `json:"test_id,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// TotalScore holds the value of the "total_score" field.
	TotalScore int `json:"total_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestSessionQuery when eager-loading is set.
	Edges        TestSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestSessionEdges holds the relations/edges for other nodes in the graph.
type TestSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CourseSection holds the value of the course_section edge.
	CourseSection *CourseSection `json:"course_section,omitempty"`
	// Test holds the value of the test edge.
	Test *Test `json:"test,omitempty"`
	// UserQuestionAnswers holds the value of the user_question_answers edge.
	UserQuestionAnswers []*TestQuestionAnswer `json:"user_question_answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionEdges) CourseSectionOrErr() (*CourseSection, error) {
	if e.CourseSection != nil {
		return e.CourseSection, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: coursesection.Label}
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionEdges) TestOrErr() (*Test, error) {
	if e.Test != nil {
		return e.Test, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: test.Label}
	}
	return nil, &NotLoadedError{edge: "test"}
}

// UserQuestionAnswersOrErr returns the UserQuestionAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e TestSessionEdges) UserQuestionAnswersOrErr() ([]*TestQuestionAnswer, error) {
	if e.loadedTypes[3] {
		return e.UserQuestionAnswers, nil
	}
	return nil, &NotLoadedError{edge: "user_question_answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testsession.FieldCourseSectionID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case testsession.FieldTotalScore:
			values[i] = new(sql.NullInt64)
		case testsession.FieldCreatedAt, testsession.FieldUpdatedAt, testsession.FieldDeletedAt, testsession.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case testsession.FieldID, testsession.FieldUserID, testsession.FieldTestID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestSession fields.
func (ts *TestSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testsession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ts.ID = *value
			}
		case testsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = value.Time
			}
		case testsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ts.UpdatedAt = value.Time
			}
		case testsession.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ts.DeletedAt = new(time.Time)
				*ts.DeletedAt = value.Time
			}
		case testsession.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ts.UserID = *value
			}
		case testsession.FieldCourseSectionID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field course_section_id", values[i])
			} else if value.Valid {
				ts.CourseSectionID = new(uuid.UUID)
				*ts.CourseSectionID = *value.S.(*uuid.UUID)
			}
		case testsession.FieldTestID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field test_id", values[i])
			} else if value != nil {
				ts.TestID = *value
			}
		case testsession.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				ts.CompletedAt = new(time.Time)
				*ts.CompletedAt = value.Time
			}
		case testsession.FieldTotalScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[i])
			} else if value.Valid {
				ts.TotalScore = int(value.Int64)
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestSession.
// This includes values selected through modifiers, order, etc.
func (ts *TestSession) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TestSession entity.
func (ts *TestSession) QueryUser() *UserQuery {
	return NewTestSessionClient(ts.config).QueryUser(ts)
}

// QueryCourseSection queries the "course_section" edge of the TestSession entity.
func (ts *TestSession) QueryCourseSection() *CourseSectionQuery {
	return NewTestSessionClient(ts.config).QueryCourseSection(ts)
}

// QueryTest queries the "test" edge of the TestSession entity.
func (ts *TestSession) QueryTest() *TestQuery {
	return NewTestSessionClient(ts.config).QueryTest(ts)
}

// QueryUserQuestionAnswers queries the "user_question_answers" edge of the TestSession entity.
func (ts *TestSession) QueryUserQuestionAnswers() *TestQuestionAnswerQuery {
	return NewTestSessionClient(ts.config).QueryUserQuestionAnswers(ts)
}

// Update returns a builder for updating this TestSession.
// Note that you need to call TestSession.Unwrap() before calling this method if this TestSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TestSession) Update() *TestSessionUpdateOne {
	return NewTestSessionClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TestSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TestSession) Unwrap() *TestSession {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestSession is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TestSession) String() string {
	var builder strings.Builder
	builder.WriteString("TestSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ts.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ts.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.UserID))
	builder.WriteString(", ")
	if v := ts.CourseSectionID; v != nil {
		builder.WriteString("course_section_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("test_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.TestID))
	builder.WriteString(", ")
	if v := ts.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("total_score=")
	builder.WriteString(fmt.Sprintf("%v", ts.TotalScore))
	builder.WriteByte(')')
	return builder.String()
}

// TestSessions is a parsable slice of TestSession.
type TestSessions []*TestSession
