// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/coursesection"
	"template/internal/ent/questioncollection"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// QuestionCollection is the model entity for the QuestionCollection schema.
type QuestionCollection struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID uuid.UUID `json:"creator_id,omitempty"`
	// CourseSectionID holds the value of the "course_section_id" field.
	CourseSectionID *uuid.UUID `json:"course_section_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionCollectionQuery when eager-loading is set.
	Edges        QuestionCollectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionCollectionEdges holds the relations/edges for other nodes in the graph.
type QuestionCollectionEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// CourseSection holds the value of the course_section edge.
	CourseSection *CourseSection `json:"course_section,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionCollectionEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionCollectionEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[1] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionCollectionEdges) CourseSectionOrErr() (*CourseSection, error) {
	if e.CourseSection != nil {
		return e.CourseSection, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: coursesection.Label}
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionCollection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questioncollection.FieldCourseSectionID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case questioncollection.FieldTitle, questioncollection.FieldDescription:
			values[i] = new(sql.NullString)
		case questioncollection.FieldCreatedAt, questioncollection.FieldUpdatedAt, questioncollection.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case questioncollection.FieldID, questioncollection.FieldCreatorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionCollection fields.
func (qc *QuestionCollection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questioncollection.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				qc.ID = *value
			}
		case questioncollection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qc.CreatedAt = value.Time
			}
		case questioncollection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				qc.UpdatedAt = value.Time
			}
		case questioncollection.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				qc.DeletedAt = new(time.Time)
				*qc.DeletedAt = value.Time
			}
		case questioncollection.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				qc.Title = value.String
			}
		case questioncollection.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				qc.Description = new(string)
				*qc.Description = value.String
			}
		case questioncollection.FieldCreatorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value != nil {
				qc.CreatorID = *value
			}
		case questioncollection.FieldCourseSectionID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field course_section_id", values[i])
			} else if value.Valid {
				qc.CourseSectionID = new(uuid.UUID)
				*qc.CourseSectionID = *value.S.(*uuid.UUID)
			}
		default:
			qc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QuestionCollection.
// This includes values selected through modifiers, order, etc.
func (qc *QuestionCollection) Value(name string) (ent.Value, error) {
	return qc.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the QuestionCollection entity.
func (qc *QuestionCollection) QueryCreator() *UserQuery {
	return NewQuestionCollectionClient(qc.config).QueryCreator(qc)
}

// QueryQuestions queries the "questions" edge of the QuestionCollection entity.
func (qc *QuestionCollection) QueryQuestions() *QuestionQuery {
	return NewQuestionCollectionClient(qc.config).QueryQuestions(qc)
}

// QueryCourseSection queries the "course_section" edge of the QuestionCollection entity.
func (qc *QuestionCollection) QueryCourseSection() *CourseSectionQuery {
	return NewQuestionCollectionClient(qc.config).QueryCourseSection(qc)
}

// Update returns a builder for updating this QuestionCollection.
// Note that you need to call QuestionCollection.Unwrap() before calling this method if this QuestionCollection
// was returned from a transaction, and the transaction was committed or rolled back.
func (qc *QuestionCollection) Update() *QuestionCollectionUpdateOne {
	return NewQuestionCollectionClient(qc.config).UpdateOne(qc)
}

// Unwrap unwraps the QuestionCollection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qc *QuestionCollection) Unwrap() *QuestionCollection {
	_tx, ok := qc.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionCollection is not a transactional entity")
	}
	qc.config.driver = _tx.drv
	return qc
}

// String implements the fmt.Stringer.
func (qc *QuestionCollection) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionCollection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(qc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(qc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := qc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(qc.Title)
	builder.WriteString(", ")
	if v := qc.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", qc.CreatorID))
	builder.WriteString(", ")
	if v := qc.CourseSectionID; v != nil {
		builder.WriteString("course_section_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// QuestionCollections is a parsable slice of QuestionCollection.
type QuestionCollections []*QuestionCollection
