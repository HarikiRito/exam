// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/predicate"
	"template/internal/ent/test"
	"template/internal/ent/testsession"
	"template/internal/ent/user"
	"template/internal/ent/userquestionanswer"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestSessionUpdate is the builder for updating TestSession entities.
type TestSessionUpdate struct {
	config
	hooks    []Hook
	mutation *TestSessionMutation
}

// Where appends a list predicates to the TestSessionUpdate builder.
func (tsu *TestSessionUpdate) Where(ps ...predicate.TestSession) *TestSessionUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetCreatedAt sets the "created_at" field.
func (tsu *TestSessionUpdate) SetCreatedAt(t time.Time) *TestSessionUpdate {
	tsu.mutation.SetCreatedAt(t)
	return tsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableCreatedAt(t *time.Time) *TestSessionUpdate {
	if t != nil {
		tsu.SetCreatedAt(*t)
	}
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TestSessionUpdate) SetUpdatedAt(t time.Time) *TestSessionUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tsu *TestSessionUpdate) SetDeletedAt(t time.Time) *TestSessionUpdate {
	tsu.mutation.SetDeletedAt(t)
	return tsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableDeletedAt(t *time.Time) *TestSessionUpdate {
	if t != nil {
		tsu.SetDeletedAt(*t)
	}
	return tsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsu *TestSessionUpdate) ClearDeletedAt() *TestSessionUpdate {
	tsu.mutation.ClearDeletedAt()
	return tsu
}

// SetUserID sets the "user_id" field.
func (tsu *TestSessionUpdate) SetUserID(u uuid.UUID) *TestSessionUpdate {
	tsu.mutation.SetUserID(u)
	return tsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableUserID(u *uuid.UUID) *TestSessionUpdate {
	if u != nil {
		tsu.SetUserID(*u)
	}
	return tsu
}

// SetCourseSectionID sets the "course_section_id" field.
func (tsu *TestSessionUpdate) SetCourseSectionID(u uuid.UUID) *TestSessionUpdate {
	tsu.mutation.SetCourseSectionID(u)
	return tsu
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableCourseSectionID(u *uuid.UUID) *TestSessionUpdate {
	if u != nil {
		tsu.SetCourseSectionID(*u)
	}
	return tsu
}

// ClearCourseSectionID clears the value of the "course_section_id" field.
func (tsu *TestSessionUpdate) ClearCourseSectionID() *TestSessionUpdate {
	tsu.mutation.ClearCourseSectionID()
	return tsu
}

// SetTestID sets the "test_id" field.
func (tsu *TestSessionUpdate) SetTestID(u uuid.UUID) *TestSessionUpdate {
	tsu.mutation.SetTestID(u)
	return tsu
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableTestID(u *uuid.UUID) *TestSessionUpdate {
	if u != nil {
		tsu.SetTestID(*u)
	}
	return tsu
}

// SetCompletedAt sets the "completed_at" field.
func (tsu *TestSessionUpdate) SetCompletedAt(t time.Time) *TestSessionUpdate {
	tsu.mutation.SetCompletedAt(t)
	return tsu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableCompletedAt(t *time.Time) *TestSessionUpdate {
	if t != nil {
		tsu.SetCompletedAt(*t)
	}
	return tsu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tsu *TestSessionUpdate) ClearCompletedAt() *TestSessionUpdate {
	tsu.mutation.ClearCompletedAt()
	return tsu
}

// SetTotalScore sets the "total_score" field.
func (tsu *TestSessionUpdate) SetTotalScore(i int) *TestSessionUpdate {
	tsu.mutation.ResetTotalScore()
	tsu.mutation.SetTotalScore(i)
	return tsu
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (tsu *TestSessionUpdate) SetNillableTotalScore(i *int) *TestSessionUpdate {
	if i != nil {
		tsu.SetTotalScore(*i)
	}
	return tsu
}

// AddTotalScore adds i to the "total_score" field.
func (tsu *TestSessionUpdate) AddTotalScore(i int) *TestSessionUpdate {
	tsu.mutation.AddTotalScore(i)
	return tsu
}

// SetUser sets the "user" edge to the User entity.
func (tsu *TestSessionUpdate) SetUser(u *User) *TestSessionUpdate {
	return tsu.SetUserID(u.ID)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (tsu *TestSessionUpdate) SetCourseSection(c *CourseSection) *TestSessionUpdate {
	return tsu.SetCourseSectionID(c.ID)
}

// SetTest sets the "test" edge to the Test entity.
func (tsu *TestSessionUpdate) SetTest(t *Test) *TestSessionUpdate {
	return tsu.SetTestID(t.ID)
}

// AddUserQuestionAnswerIDs adds the "user_question_answers" edge to the UserQuestionAnswer entity by IDs.
func (tsu *TestSessionUpdate) AddUserQuestionAnswerIDs(ids ...uuid.UUID) *TestSessionUpdate {
	tsu.mutation.AddUserQuestionAnswerIDs(ids...)
	return tsu
}

// AddUserQuestionAnswers adds the "user_question_answers" edges to the UserQuestionAnswer entity.
func (tsu *TestSessionUpdate) AddUserQuestionAnswers(u ...*UserQuestionAnswer) *TestSessionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tsu.AddUserQuestionAnswerIDs(ids...)
}

// Mutation returns the TestSessionMutation object of the builder.
func (tsu *TestSessionUpdate) Mutation() *TestSessionMutation {
	return tsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tsu *TestSessionUpdate) ClearUser() *TestSessionUpdate {
	tsu.mutation.ClearUser()
	return tsu
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (tsu *TestSessionUpdate) ClearCourseSection() *TestSessionUpdate {
	tsu.mutation.ClearCourseSection()
	return tsu
}

// ClearTest clears the "test" edge to the Test entity.
func (tsu *TestSessionUpdate) ClearTest() *TestSessionUpdate {
	tsu.mutation.ClearTest()
	return tsu
}

// ClearUserQuestionAnswers clears all "user_question_answers" edges to the UserQuestionAnswer entity.
func (tsu *TestSessionUpdate) ClearUserQuestionAnswers() *TestSessionUpdate {
	tsu.mutation.ClearUserQuestionAnswers()
	return tsu
}

// RemoveUserQuestionAnswerIDs removes the "user_question_answers" edge to UserQuestionAnswer entities by IDs.
func (tsu *TestSessionUpdate) RemoveUserQuestionAnswerIDs(ids ...uuid.UUID) *TestSessionUpdate {
	tsu.mutation.RemoveUserQuestionAnswerIDs(ids...)
	return tsu
}

// RemoveUserQuestionAnswers removes "user_question_answers" edges to UserQuestionAnswer entities.
func (tsu *TestSessionUpdate) RemoveUserQuestionAnswers(u ...*UserQuestionAnswer) *TestSessionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tsu.RemoveUserQuestionAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TestSessionUpdate) Save(ctx context.Context) (int, error) {
	if err := tsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TestSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TestSessionUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TestSessionUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TestSessionUpdate) defaults() error {
	if _, ok := tsu.mutation.UpdatedAt(); !ok {
		if testsession.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testsession.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testsession.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TestSessionUpdate) check() error {
	if tsu.mutation.UserCleared() && len(tsu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSession.user"`)
	}
	if tsu.mutation.TestCleared() && len(tsu.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSession.test"`)
	}
	return nil
}

func (tsu *TestSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testsession.Table, testsession.Columns, sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.CreatedAt(); ok {
		_spec.SetField(testsession.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(testsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.DeletedAt(); ok {
		_spec.SetField(testsession.FieldDeletedAt, field.TypeTime, value)
	}
	if tsu.mutation.DeletedAtCleared() {
		_spec.ClearField(testsession.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsu.mutation.CompletedAt(); ok {
		_spec.SetField(testsession.FieldCompletedAt, field.TypeTime, value)
	}
	if tsu.mutation.CompletedAtCleared() {
		_spec.ClearField(testsession.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := tsu.mutation.TotalScore(); ok {
		_spec.SetField(testsession.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := tsu.mutation.AddedTotalScore(); ok {
		_spec.AddField(testsession.FieldTotalScore, field.TypeInt, value)
	}
	if tsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.UserTable,
			Columns: []string{testsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.UserTable,
			Columns: []string{testsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.CourseSectionTable,
			Columns: []string{testsession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.CourseSectionTable,
			Columns: []string{testsession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.TestTable,
			Columns: []string{testsession.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.TestTable,
			Columns: []string{testsession.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.UserQuestionAnswersTable,
			Columns: []string{testsession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedUserQuestionAnswersIDs(); len(nodes) > 0 && !tsu.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.UserQuestionAnswersTable,
			Columns: []string{testsession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.UserQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.UserQuestionAnswersTable,
			Columns: []string{testsession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TestSessionUpdateOne is the builder for updating a single TestSession entity.
type TestSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestSessionMutation
}

// SetCreatedAt sets the "created_at" field.
func (tsuo *TestSessionUpdateOne) SetCreatedAt(t time.Time) *TestSessionUpdateOne {
	tsuo.mutation.SetCreatedAt(t)
	return tsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *TestSessionUpdateOne {
	if t != nil {
		tsuo.SetCreatedAt(*t)
	}
	return tsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TestSessionUpdateOne) SetUpdatedAt(t time.Time) *TestSessionUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tsuo *TestSessionUpdateOne) SetDeletedAt(t time.Time) *TestSessionUpdateOne {
	tsuo.mutation.SetDeletedAt(t)
	return tsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableDeletedAt(t *time.Time) *TestSessionUpdateOne {
	if t != nil {
		tsuo.SetDeletedAt(*t)
	}
	return tsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsuo *TestSessionUpdateOne) ClearDeletedAt() *TestSessionUpdateOne {
	tsuo.mutation.ClearDeletedAt()
	return tsuo
}

// SetUserID sets the "user_id" field.
func (tsuo *TestSessionUpdateOne) SetUserID(u uuid.UUID) *TestSessionUpdateOne {
	tsuo.mutation.SetUserID(u)
	return tsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableUserID(u *uuid.UUID) *TestSessionUpdateOne {
	if u != nil {
		tsuo.SetUserID(*u)
	}
	return tsuo
}

// SetCourseSectionID sets the "course_section_id" field.
func (tsuo *TestSessionUpdateOne) SetCourseSectionID(u uuid.UUID) *TestSessionUpdateOne {
	tsuo.mutation.SetCourseSectionID(u)
	return tsuo
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableCourseSectionID(u *uuid.UUID) *TestSessionUpdateOne {
	if u != nil {
		tsuo.SetCourseSectionID(*u)
	}
	return tsuo
}

// ClearCourseSectionID clears the value of the "course_section_id" field.
func (tsuo *TestSessionUpdateOne) ClearCourseSectionID() *TestSessionUpdateOne {
	tsuo.mutation.ClearCourseSectionID()
	return tsuo
}

// SetTestID sets the "test_id" field.
func (tsuo *TestSessionUpdateOne) SetTestID(u uuid.UUID) *TestSessionUpdateOne {
	tsuo.mutation.SetTestID(u)
	return tsuo
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableTestID(u *uuid.UUID) *TestSessionUpdateOne {
	if u != nil {
		tsuo.SetTestID(*u)
	}
	return tsuo
}

// SetCompletedAt sets the "completed_at" field.
func (tsuo *TestSessionUpdateOne) SetCompletedAt(t time.Time) *TestSessionUpdateOne {
	tsuo.mutation.SetCompletedAt(t)
	return tsuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableCompletedAt(t *time.Time) *TestSessionUpdateOne {
	if t != nil {
		tsuo.SetCompletedAt(*t)
	}
	return tsuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tsuo *TestSessionUpdateOne) ClearCompletedAt() *TestSessionUpdateOne {
	tsuo.mutation.ClearCompletedAt()
	return tsuo
}

// SetTotalScore sets the "total_score" field.
func (tsuo *TestSessionUpdateOne) SetTotalScore(i int) *TestSessionUpdateOne {
	tsuo.mutation.ResetTotalScore()
	tsuo.mutation.SetTotalScore(i)
	return tsuo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (tsuo *TestSessionUpdateOne) SetNillableTotalScore(i *int) *TestSessionUpdateOne {
	if i != nil {
		tsuo.SetTotalScore(*i)
	}
	return tsuo
}

// AddTotalScore adds i to the "total_score" field.
func (tsuo *TestSessionUpdateOne) AddTotalScore(i int) *TestSessionUpdateOne {
	tsuo.mutation.AddTotalScore(i)
	return tsuo
}

// SetUser sets the "user" edge to the User entity.
func (tsuo *TestSessionUpdateOne) SetUser(u *User) *TestSessionUpdateOne {
	return tsuo.SetUserID(u.ID)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (tsuo *TestSessionUpdateOne) SetCourseSection(c *CourseSection) *TestSessionUpdateOne {
	return tsuo.SetCourseSectionID(c.ID)
}

// SetTest sets the "test" edge to the Test entity.
func (tsuo *TestSessionUpdateOne) SetTest(t *Test) *TestSessionUpdateOne {
	return tsuo.SetTestID(t.ID)
}

// AddUserQuestionAnswerIDs adds the "user_question_answers" edge to the UserQuestionAnswer entity by IDs.
func (tsuo *TestSessionUpdateOne) AddUserQuestionAnswerIDs(ids ...uuid.UUID) *TestSessionUpdateOne {
	tsuo.mutation.AddUserQuestionAnswerIDs(ids...)
	return tsuo
}

// AddUserQuestionAnswers adds the "user_question_answers" edges to the UserQuestionAnswer entity.
func (tsuo *TestSessionUpdateOne) AddUserQuestionAnswers(u ...*UserQuestionAnswer) *TestSessionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tsuo.AddUserQuestionAnswerIDs(ids...)
}

// Mutation returns the TestSessionMutation object of the builder.
func (tsuo *TestSessionUpdateOne) Mutation() *TestSessionMutation {
	return tsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tsuo *TestSessionUpdateOne) ClearUser() *TestSessionUpdateOne {
	tsuo.mutation.ClearUser()
	return tsuo
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (tsuo *TestSessionUpdateOne) ClearCourseSection() *TestSessionUpdateOne {
	tsuo.mutation.ClearCourseSection()
	return tsuo
}

// ClearTest clears the "test" edge to the Test entity.
func (tsuo *TestSessionUpdateOne) ClearTest() *TestSessionUpdateOne {
	tsuo.mutation.ClearTest()
	return tsuo
}

// ClearUserQuestionAnswers clears all "user_question_answers" edges to the UserQuestionAnswer entity.
func (tsuo *TestSessionUpdateOne) ClearUserQuestionAnswers() *TestSessionUpdateOne {
	tsuo.mutation.ClearUserQuestionAnswers()
	return tsuo
}

// RemoveUserQuestionAnswerIDs removes the "user_question_answers" edge to UserQuestionAnswer entities by IDs.
func (tsuo *TestSessionUpdateOne) RemoveUserQuestionAnswerIDs(ids ...uuid.UUID) *TestSessionUpdateOne {
	tsuo.mutation.RemoveUserQuestionAnswerIDs(ids...)
	return tsuo
}

// RemoveUserQuestionAnswers removes "user_question_answers" edges to UserQuestionAnswer entities.
func (tsuo *TestSessionUpdateOne) RemoveUserQuestionAnswers(u ...*UserQuestionAnswer) *TestSessionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tsuo.RemoveUserQuestionAnswerIDs(ids...)
}

// Where appends a list predicates to the TestSessionUpdate builder.
func (tsuo *TestSessionUpdateOne) Where(ps ...predicate.TestSession) *TestSessionUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TestSessionUpdateOne) Select(field string, fields ...string) *TestSessionUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TestSession entity.
func (tsuo *TestSessionUpdateOne) Save(ctx context.Context) (*TestSession, error) {
	if err := tsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TestSessionUpdateOne) SaveX(ctx context.Context) *TestSession {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TestSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TestSessionUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TestSessionUpdateOne) defaults() error {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok {
		if testsession.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testsession.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testsession.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TestSessionUpdateOne) check() error {
	if tsuo.mutation.UserCleared() && len(tsuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSession.user"`)
	}
	if tsuo.mutation.TestCleared() && len(tsuo.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestSession.test"`)
	}
	return nil
}

func (tsuo *TestSessionUpdateOne) sqlSave(ctx context.Context) (_node *TestSession, err error) {
	if err := tsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testsession.Table, testsession.Columns, sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testsession.FieldID)
		for _, f := range fields {
			if !testsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.CreatedAt(); ok {
		_spec.SetField(testsession.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.DeletedAt(); ok {
		_spec.SetField(testsession.FieldDeletedAt, field.TypeTime, value)
	}
	if tsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(testsession.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsuo.mutation.CompletedAt(); ok {
		_spec.SetField(testsession.FieldCompletedAt, field.TypeTime, value)
	}
	if tsuo.mutation.CompletedAtCleared() {
		_spec.ClearField(testsession.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := tsuo.mutation.TotalScore(); ok {
		_spec.SetField(testsession.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := tsuo.mutation.AddedTotalScore(); ok {
		_spec.AddField(testsession.FieldTotalScore, field.TypeInt, value)
	}
	if tsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.UserTable,
			Columns: []string{testsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.UserTable,
			Columns: []string{testsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.CourseSectionTable,
			Columns: []string{testsession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.CourseSectionTable,
			Columns: []string{testsession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.TestTable,
			Columns: []string{testsession.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testsession.TestTable,
			Columns: []string{testsession.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.UserQuestionAnswersTable,
			Columns: []string{testsession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedUserQuestionAnswersIDs(); len(nodes) > 0 && !tsuo.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.UserQuestionAnswersTable,
			Columns: []string{testsession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.UserQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testsession.UserQuestionAnswersTable,
			Columns: []string{testsession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestSession{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
