// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"template/internal/ent/coursesection"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questioncollection"
	"template/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionCollectionQuery is the builder for querying QuestionCollection entities.
type QuestionCollectionQuery struct {
	config
	ctx               *QueryContext
	order             []questioncollection.OrderOption
	inters            []Interceptor
	predicates        []predicate.QuestionCollection
	withCreator       *UserQuery
	withQuestions     *QuestionQuery
	withCourseSection *CourseSectionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuestionCollectionQuery builder.
func (qcq *QuestionCollectionQuery) Where(ps ...predicate.QuestionCollection) *QuestionCollectionQuery {
	qcq.predicates = append(qcq.predicates, ps...)
	return qcq
}

// Limit the number of records to be returned by this query.
func (qcq *QuestionCollectionQuery) Limit(limit int) *QuestionCollectionQuery {
	qcq.ctx.Limit = &limit
	return qcq
}

// Offset to start from.
func (qcq *QuestionCollectionQuery) Offset(offset int) *QuestionCollectionQuery {
	qcq.ctx.Offset = &offset
	return qcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qcq *QuestionCollectionQuery) Unique(unique bool) *QuestionCollectionQuery {
	qcq.ctx.Unique = &unique
	return qcq
}

// Order specifies how the records should be ordered.
func (qcq *QuestionCollectionQuery) Order(o ...questioncollection.OrderOption) *QuestionCollectionQuery {
	qcq.order = append(qcq.order, o...)
	return qcq
}

// QueryCreator chains the current query on the "creator" edge.
func (qcq *QuestionCollectionQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: qcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questioncollection.Table, questioncollection.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questioncollection.CreatorTable, questioncollection.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(qcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestions chains the current query on the "questions" edge.
func (qcq *QuestionCollectionQuery) QueryQuestions() *QuestionQuery {
	query := (&QuestionClient{config: qcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questioncollection.Table, questioncollection.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, questioncollection.QuestionsTable, questioncollection.QuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(qcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourseSection chains the current query on the "course_section" edge.
func (qcq *QuestionCollectionQuery) QueryCourseSection() *CourseSectionQuery {
	query := (&CourseSectionClient{config: qcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questioncollection.Table, questioncollection.FieldID, selector),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questioncollection.CourseSectionTable, questioncollection.CourseSectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(qcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QuestionCollection entity from the query.
// Returns a *NotFoundError when no QuestionCollection was found.
func (qcq *QuestionCollectionQuery) First(ctx context.Context) (*QuestionCollection, error) {
	nodes, err := qcq.Limit(1).All(setContextOp(ctx, qcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{questioncollection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) FirstX(ctx context.Context) *QuestionCollection {
	node, err := qcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QuestionCollection ID from the query.
// Returns a *NotFoundError when no QuestionCollection ID was found.
func (qcq *QuestionCollectionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = qcq.Limit(1).IDs(setContextOp(ctx, qcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{questioncollection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := qcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QuestionCollection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QuestionCollection entity is found.
// Returns a *NotFoundError when no QuestionCollection entities are found.
func (qcq *QuestionCollectionQuery) Only(ctx context.Context) (*QuestionCollection, error) {
	nodes, err := qcq.Limit(2).All(setContextOp(ctx, qcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{questioncollection.Label}
	default:
		return nil, &NotSingularError{questioncollection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) OnlyX(ctx context.Context) *QuestionCollection {
	node, err := qcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QuestionCollection ID in the query.
// Returns a *NotSingularError when more than one QuestionCollection ID is found.
// Returns a *NotFoundError when no entities are found.
func (qcq *QuestionCollectionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = qcq.Limit(2).IDs(setContextOp(ctx, qcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{questioncollection.Label}
	default:
		err = &NotSingularError{questioncollection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := qcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QuestionCollections.
func (qcq *QuestionCollectionQuery) All(ctx context.Context) ([]*QuestionCollection, error) {
	ctx = setContextOp(ctx, qcq.ctx, ent.OpQueryAll)
	if err := qcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*QuestionCollection, *QuestionCollectionQuery]()
	return withInterceptors[[]*QuestionCollection](ctx, qcq, qr, qcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) AllX(ctx context.Context) []*QuestionCollection {
	nodes, err := qcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QuestionCollection IDs.
func (qcq *QuestionCollectionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if qcq.ctx.Unique == nil && qcq.path != nil {
		qcq.Unique(true)
	}
	ctx = setContextOp(ctx, qcq.ctx, ent.OpQueryIDs)
	if err = qcq.Select(questioncollection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := qcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qcq *QuestionCollectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qcq.ctx, ent.OpQueryCount)
	if err := qcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qcq, querierCount[*QuestionCollectionQuery](), qcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) CountX(ctx context.Context) int {
	count, err := qcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qcq *QuestionCollectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qcq.ctx, ent.OpQueryExist)
	switch _, err := qcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qcq *QuestionCollectionQuery) ExistX(ctx context.Context) bool {
	exist, err := qcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuestionCollectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qcq *QuestionCollectionQuery) Clone() *QuestionCollectionQuery {
	if qcq == nil {
		return nil
	}
	return &QuestionCollectionQuery{
		config:            qcq.config,
		ctx:               qcq.ctx.Clone(),
		order:             append([]questioncollection.OrderOption{}, qcq.order...),
		inters:            append([]Interceptor{}, qcq.inters...),
		predicates:        append([]predicate.QuestionCollection{}, qcq.predicates...),
		withCreator:       qcq.withCreator.Clone(),
		withQuestions:     qcq.withQuestions.Clone(),
		withCourseSection: qcq.withCourseSection.Clone(),
		// clone intermediate query.
		sql:  qcq.sql.Clone(),
		path: qcq.path,
	}
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (qcq *QuestionCollectionQuery) WithCreator(opts ...func(*UserQuery)) *QuestionCollectionQuery {
	query := (&UserClient{config: qcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qcq.withCreator = query
	return qcq
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (qcq *QuestionCollectionQuery) WithQuestions(opts ...func(*QuestionQuery)) *QuestionCollectionQuery {
	query := (&QuestionClient{config: qcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qcq.withQuestions = query
	return qcq
}

// WithCourseSection tells the query-builder to eager-load the nodes that are connected to
// the "course_section" edge. The optional arguments are used to configure the query builder of the edge.
func (qcq *QuestionCollectionQuery) WithCourseSection(opts ...func(*CourseSectionQuery)) *QuestionCollectionQuery {
	query := (&CourseSectionClient{config: qcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qcq.withCourseSection = query
	return qcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QuestionCollection.Query().
//		GroupBy(questioncollection.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qcq *QuestionCollectionQuery) GroupBy(field string, fields ...string) *QuestionCollectionGroupBy {
	qcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuestionCollectionGroupBy{build: qcq}
	grbuild.flds = &qcq.ctx.Fields
	grbuild.label = questioncollection.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.QuestionCollection.Query().
//		Select(questioncollection.FieldCreatedAt).
//		Scan(ctx, &v)
func (qcq *QuestionCollectionQuery) Select(fields ...string) *QuestionCollectionSelect {
	qcq.ctx.Fields = append(qcq.ctx.Fields, fields...)
	sbuild := &QuestionCollectionSelect{QuestionCollectionQuery: qcq}
	sbuild.label = questioncollection.Label
	sbuild.flds, sbuild.scan = &qcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuestionCollectionSelect configured with the given aggregations.
func (qcq *QuestionCollectionQuery) Aggregate(fns ...AggregateFunc) *QuestionCollectionSelect {
	return qcq.Select().Aggregate(fns...)
}

func (qcq *QuestionCollectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qcq); err != nil {
				return err
			}
		}
	}
	for _, f := range qcq.ctx.Fields {
		if !questioncollection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qcq.path != nil {
		prev, err := qcq.path(ctx)
		if err != nil {
			return err
		}
		qcq.sql = prev
	}
	return nil
}

func (qcq *QuestionCollectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QuestionCollection, error) {
	var (
		nodes       = []*QuestionCollection{}
		_spec       = qcq.querySpec()
		loadedTypes = [3]bool{
			qcq.withCreator != nil,
			qcq.withQuestions != nil,
			qcq.withCourseSection != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*QuestionCollection).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &QuestionCollection{config: qcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qcq.withCreator; query != nil {
		if err := qcq.loadCreator(ctx, query, nodes, nil,
			func(n *QuestionCollection, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	if query := qcq.withQuestions; query != nil {
		if err := qcq.loadQuestions(ctx, query, nodes,
			func(n *QuestionCollection) { n.Edges.Questions = []*Question{} },
			func(n *QuestionCollection, e *Question) { n.Edges.Questions = append(n.Edges.Questions, e) }); err != nil {
			return nil, err
		}
	}
	if query := qcq.withCourseSection; query != nil {
		if err := qcq.loadCourseSection(ctx, query, nodes, nil,
			func(n *QuestionCollection, e *CourseSection) { n.Edges.CourseSection = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qcq *QuestionCollectionQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*QuestionCollection, init func(*QuestionCollection), assign func(*QuestionCollection, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*QuestionCollection)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (qcq *QuestionCollectionQuery) loadQuestions(ctx context.Context, query *QuestionQuery, nodes []*QuestionCollection, init func(*QuestionCollection), assign func(*QuestionCollection, *Question)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*QuestionCollection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(question.FieldCollectionID)
	}
	query.Where(predicate.Question(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(questioncollection.QuestionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CollectionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "collection_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (qcq *QuestionCollectionQuery) loadCourseSection(ctx context.Context, query *CourseSectionQuery, nodes []*QuestionCollection, init func(*QuestionCollection), assign func(*QuestionCollection, *CourseSection)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*QuestionCollection)
	for i := range nodes {
		if nodes[i].CourseSectionID == nil {
			continue
		}
		fk := *nodes[i].CourseSectionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(coursesection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_section_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (qcq *QuestionCollectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qcq.querySpec()
	_spec.Node.Columns = qcq.ctx.Fields
	if len(qcq.ctx.Fields) > 0 {
		_spec.Unique = qcq.ctx.Unique != nil && *qcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qcq.driver, _spec)
}

func (qcq *QuestionCollectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(questioncollection.Table, questioncollection.Columns, sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID))
	_spec.From = qcq.sql
	if unique := qcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qcq.path != nil {
		_spec.Unique = true
	}
	if fields := qcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questioncollection.FieldID)
		for i := range fields {
			if fields[i] != questioncollection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if qcq.withCreator != nil {
			_spec.Node.AddColumnOnce(questioncollection.FieldCreatorID)
		}
		if qcq.withCourseSection != nil {
			_spec.Node.AddColumnOnce(questioncollection.FieldCourseSectionID)
		}
	}
	if ps := qcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qcq *QuestionCollectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qcq.driver.Dialect())
	t1 := builder.Table(questioncollection.Table)
	columns := qcq.ctx.Fields
	if len(columns) == 0 {
		columns = questioncollection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qcq.sql != nil {
		selector = qcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qcq.ctx.Unique != nil && *qcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range qcq.predicates {
		p(selector)
	}
	for _, p := range qcq.order {
		p(selector)
	}
	if offset := qcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuestionCollectionGroupBy is the group-by builder for QuestionCollection entities.
type QuestionCollectionGroupBy struct {
	selector
	build *QuestionCollectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qcgb *QuestionCollectionGroupBy) Aggregate(fns ...AggregateFunc) *QuestionCollectionGroupBy {
	qcgb.fns = append(qcgb.fns, fns...)
	return qcgb
}

// Scan applies the selector query and scans the result into the given value.
func (qcgb *QuestionCollectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qcgb.build.ctx, ent.OpQueryGroupBy)
	if err := qcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionCollectionQuery, *QuestionCollectionGroupBy](ctx, qcgb.build, qcgb, qcgb.build.inters, v)
}

func (qcgb *QuestionCollectionGroupBy) sqlScan(ctx context.Context, root *QuestionCollectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qcgb.fns))
	for _, fn := range qcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qcgb.flds)+len(qcgb.fns))
		for _, f := range *qcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuestionCollectionSelect is the builder for selecting fields of QuestionCollection entities.
type QuestionCollectionSelect struct {
	*QuestionCollectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qcs *QuestionCollectionSelect) Aggregate(fns ...AggregateFunc) *QuestionCollectionSelect {
	qcs.fns = append(qcs.fns, fns...)
	return qcs
}

// Scan applies the selector query and scans the result into the given value.
func (qcs *QuestionCollectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qcs.ctx, ent.OpQuerySelect)
	if err := qcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionCollectionQuery, *QuestionCollectionSelect](ctx, qcs.QuestionCollectionQuery, qcs, qcs.inters, v)
}

func (qcs *QuestionCollectionSelect) sqlScan(ctx context.Context, root *QuestionCollectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qcs.fns))
	for _, fn := range qcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
