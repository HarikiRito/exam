// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/videoquestiontimestamp"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetCreatedAt sets the "created_at" field.
func (qu *QuestionUpdate) SetCreatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCreatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetCreatedAt(*t)
	}
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetDeletedAt sets the "deleted_at" field.
func (qu *QuestionUpdate) SetDeletedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetDeletedAt(t)
	return qu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableDeletedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetDeletedAt(*t)
	}
	return qu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qu *QuestionUpdate) ClearDeletedAt() *QuestionUpdate {
	qu.mutation.ClearDeletedAt()
	return qu
}

// SetSectionID sets the "section_id" field.
func (qu *QuestionUpdate) SetSectionID(s string) *QuestionUpdate {
	qu.mutation.SetSectionID(s)
	return qu
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableSectionID(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetSectionID(*s)
	}
	return qu
}

// SetQuestionText sets the "question_text" field.
func (qu *QuestionUpdate) SetQuestionText(s string) *QuestionUpdate {
	qu.mutation.SetQuestionText(s)
	return qu
}

// SetNillableQuestionText sets the "question_text" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableQuestionText(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetQuestionText(*s)
	}
	return qu
}

// SetSection sets the "section" edge to the CourseSection entity.
func (qu *QuestionUpdate) SetSection(c *CourseSection) *QuestionUpdate {
	return qu.SetSectionID(c.ID)
}

// AddQuestionOptionIDs adds the "question_options" edge to the QuestionOption entity by IDs.
func (qu *QuestionUpdate) AddQuestionOptionIDs(ids ...string) *QuestionUpdate {
	qu.mutation.AddQuestionOptionIDs(ids...)
	return qu
}

// AddQuestionOptions adds the "question_options" edges to the QuestionOption entity.
func (qu *QuestionUpdate) AddQuestionOptions(q ...*QuestionOption) *QuestionUpdate {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddQuestionOptionIDs(ids...)
}

// AddVideoQuestionTimestampsQuestionIDs adds the "video_question_timestamps_question" edge to the VideoQuestionTimestamp entity by IDs.
func (qu *QuestionUpdate) AddVideoQuestionTimestampsQuestionIDs(ids ...string) *QuestionUpdate {
	qu.mutation.AddVideoQuestionTimestampsQuestionIDs(ids...)
	return qu
}

// AddVideoQuestionTimestampsQuestion adds the "video_question_timestamps_question" edges to the VideoQuestionTimestamp entity.
func (qu *QuestionUpdate) AddVideoQuestionTimestampsQuestion(v ...*VideoQuestionTimestamp) *QuestionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return qu.AddVideoQuestionTimestampsQuestionIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearSection clears the "section" edge to the CourseSection entity.
func (qu *QuestionUpdate) ClearSection() *QuestionUpdate {
	qu.mutation.ClearSection()
	return qu
}

// ClearQuestionOptions clears all "question_options" edges to the QuestionOption entity.
func (qu *QuestionUpdate) ClearQuestionOptions() *QuestionUpdate {
	qu.mutation.ClearQuestionOptions()
	return qu
}

// RemoveQuestionOptionIDs removes the "question_options" edge to QuestionOption entities by IDs.
func (qu *QuestionUpdate) RemoveQuestionOptionIDs(ids ...string) *QuestionUpdate {
	qu.mutation.RemoveQuestionOptionIDs(ids...)
	return qu
}

// RemoveQuestionOptions removes "question_options" edges to QuestionOption entities.
func (qu *QuestionUpdate) RemoveQuestionOptions(q ...*QuestionOption) *QuestionUpdate {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveQuestionOptionIDs(ids...)
}

// ClearVideoQuestionTimestampsQuestion clears all "video_question_timestamps_question" edges to the VideoQuestionTimestamp entity.
func (qu *QuestionUpdate) ClearVideoQuestionTimestampsQuestion() *QuestionUpdate {
	qu.mutation.ClearVideoQuestionTimestampsQuestion()
	return qu
}

// RemoveVideoQuestionTimestampsQuestionIDs removes the "video_question_timestamps_question" edge to VideoQuestionTimestamp entities by IDs.
func (qu *QuestionUpdate) RemoveVideoQuestionTimestampsQuestionIDs(ids ...string) *QuestionUpdate {
	qu.mutation.RemoveVideoQuestionTimestampsQuestionIDs(ids...)
	return qu
}

// RemoveVideoQuestionTimestampsQuestion removes "video_question_timestamps_question" edges to VideoQuestionTimestamp entities.
func (qu *QuestionUpdate) RemoveVideoQuestionTimestampsQuestion(v ...*VideoQuestionTimestamp) *QuestionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return qu.RemoveVideoQuestionTimestampsQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	if err := qu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() error {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		if question.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.SectionID(); ok {
		if err := question.SectionIDValidator(v); err != nil {
			return &ValidationError{Name: "section_id", err: fmt.Errorf(`ent: validator failed for field "Question.section_id": %w`, err)}
		}
	}
	if v, ok := qu.mutation.QuestionText(); ok {
		if err := question.QuestionTextValidator(v); err != nil {
			return &ValidationError{Name: "question_text", err: fmt.Errorf(`ent: validator failed for field "Question.question_text": %w`, err)}
		}
	}
	if qu.mutation.SectionCleared() && len(qu.mutation.SectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.section"`)
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeString))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
	}
	if qu.mutation.DeletedAtCleared() {
		_spec.ClearField(question.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qu.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
	}
	if qu.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.SectionTable,
			Columns: []string{question.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.SectionTable,
			Columns: []string{question.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.QuestionOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedQuestionOptionsIDs(); len(nodes) > 0 && !qu.mutation.QuestionOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.QuestionOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.VideoQuestionTimestampsQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedVideoQuestionTimestampsQuestionIDs(); len(nodes) > 0 && !qu.mutation.VideoQuestionTimestampsQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.VideoQuestionTimestampsQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetCreatedAt sets the "created_at" field.
func (quo *QuestionUpdateOne) SetCreatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetCreatedAt(*t)
	}
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetDeletedAt sets the "deleted_at" field.
func (quo *QuestionUpdateOne) SetDeletedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetDeletedAt(t)
	return quo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetDeletedAt(*t)
	}
	return quo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (quo *QuestionUpdateOne) ClearDeletedAt() *QuestionUpdateOne {
	quo.mutation.ClearDeletedAt()
	return quo
}

// SetSectionID sets the "section_id" field.
func (quo *QuestionUpdateOne) SetSectionID(s string) *QuestionUpdateOne {
	quo.mutation.SetSectionID(s)
	return quo
}

// SetNillableSectionID sets the "section_id" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableSectionID(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetSectionID(*s)
	}
	return quo
}

// SetQuestionText sets the "question_text" field.
func (quo *QuestionUpdateOne) SetQuestionText(s string) *QuestionUpdateOne {
	quo.mutation.SetQuestionText(s)
	return quo
}

// SetNillableQuestionText sets the "question_text" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableQuestionText(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetQuestionText(*s)
	}
	return quo
}

// SetSection sets the "section" edge to the CourseSection entity.
func (quo *QuestionUpdateOne) SetSection(c *CourseSection) *QuestionUpdateOne {
	return quo.SetSectionID(c.ID)
}

// AddQuestionOptionIDs adds the "question_options" edge to the QuestionOption entity by IDs.
func (quo *QuestionUpdateOne) AddQuestionOptionIDs(ids ...string) *QuestionUpdateOne {
	quo.mutation.AddQuestionOptionIDs(ids...)
	return quo
}

// AddQuestionOptions adds the "question_options" edges to the QuestionOption entity.
func (quo *QuestionUpdateOne) AddQuestionOptions(q ...*QuestionOption) *QuestionUpdateOne {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddQuestionOptionIDs(ids...)
}

// AddVideoQuestionTimestampsQuestionIDs adds the "video_question_timestamps_question" edge to the VideoQuestionTimestamp entity by IDs.
func (quo *QuestionUpdateOne) AddVideoQuestionTimestampsQuestionIDs(ids ...string) *QuestionUpdateOne {
	quo.mutation.AddVideoQuestionTimestampsQuestionIDs(ids...)
	return quo
}

// AddVideoQuestionTimestampsQuestion adds the "video_question_timestamps_question" edges to the VideoQuestionTimestamp entity.
func (quo *QuestionUpdateOne) AddVideoQuestionTimestampsQuestion(v ...*VideoQuestionTimestamp) *QuestionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return quo.AddVideoQuestionTimestampsQuestionIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearSection clears the "section" edge to the CourseSection entity.
func (quo *QuestionUpdateOne) ClearSection() *QuestionUpdateOne {
	quo.mutation.ClearSection()
	return quo
}

// ClearQuestionOptions clears all "question_options" edges to the QuestionOption entity.
func (quo *QuestionUpdateOne) ClearQuestionOptions() *QuestionUpdateOne {
	quo.mutation.ClearQuestionOptions()
	return quo
}

// RemoveQuestionOptionIDs removes the "question_options" edge to QuestionOption entities by IDs.
func (quo *QuestionUpdateOne) RemoveQuestionOptionIDs(ids ...string) *QuestionUpdateOne {
	quo.mutation.RemoveQuestionOptionIDs(ids...)
	return quo
}

// RemoveQuestionOptions removes "question_options" edges to QuestionOption entities.
func (quo *QuestionUpdateOne) RemoveQuestionOptions(q ...*QuestionOption) *QuestionUpdateOne {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveQuestionOptionIDs(ids...)
}

// ClearVideoQuestionTimestampsQuestion clears all "video_question_timestamps_question" edges to the VideoQuestionTimestamp entity.
func (quo *QuestionUpdateOne) ClearVideoQuestionTimestampsQuestion() *QuestionUpdateOne {
	quo.mutation.ClearVideoQuestionTimestampsQuestion()
	return quo
}

// RemoveVideoQuestionTimestampsQuestionIDs removes the "video_question_timestamps_question" edge to VideoQuestionTimestamp entities by IDs.
func (quo *QuestionUpdateOne) RemoveVideoQuestionTimestampsQuestionIDs(ids ...string) *QuestionUpdateOne {
	quo.mutation.RemoveVideoQuestionTimestampsQuestionIDs(ids...)
	return quo
}

// RemoveVideoQuestionTimestampsQuestion removes "video_question_timestamps_question" edges to VideoQuestionTimestamp entities.
func (quo *QuestionUpdateOne) RemoveVideoQuestionTimestampsQuestion(v ...*VideoQuestionTimestamp) *QuestionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return quo.RemoveVideoQuestionTimestampsQuestionIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	if err := quo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() error {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		if question.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.SectionID(); ok {
		if err := question.SectionIDValidator(v); err != nil {
			return &ValidationError{Name: "section_id", err: fmt.Errorf(`ent: validator failed for field "Question.section_id": %w`, err)}
		}
	}
	if v, ok := quo.mutation.QuestionText(); ok {
		if err := question.QuestionTextValidator(v); err != nil {
			return &ValidationError{Name: "question_text", err: fmt.Errorf(`ent: validator failed for field "Question.question_text": %w`, err)}
		}
	}
	if quo.mutation.SectionCleared() && len(quo.mutation.SectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.section"`)
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeString))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
	}
	if quo.mutation.DeletedAtCleared() {
		_spec.ClearField(question.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := quo.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
	}
	if quo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.SectionTable,
			Columns: []string{question.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.SectionTable,
			Columns: []string{question.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.QuestionOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedQuestionOptionsIDs(); len(nodes) > 0 && !quo.mutation.QuestionOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.QuestionOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionOptionsTable,
			Columns: []string{question.QuestionOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.VideoQuestionTimestampsQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedVideoQuestionTimestampsQuestionIDs(); len(nodes) > 0 && !quo.mutation.VideoQuestionTimestampsQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.VideoQuestionTimestampsQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.VideoQuestionTimestampsQuestionTable,
			Columns: []string{question.VideoQuestionTimestampsQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoquestiontimestamp.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
