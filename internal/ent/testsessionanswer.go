// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testsession"
	"template/internal/ent/testsessionanswer"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestSessionAnswer is the model entity for the TestSessionAnswer schema.
type TestSessionAnswer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID uuid.UUID `json:"question_id,omitempty"`
	// SelectedOptionID holds the value of the "selected_option_id" field.
	SelectedOptionID *uuid.UUID `json:"selected_option_id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID uuid.UUID `json:"session_id,omitempty"`
	// SelectedOptionText holds the value of the "selected_option_text" field.
	SelectedOptionText *string `json:"selected_option_text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestSessionAnswerQuery when eager-loading is set.
	Edges        TestSessionAnswerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestSessionAnswerEdges holds the relations/edges for other nodes in the graph.
type TestSessionAnswerEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// SelectedOption holds the value of the selected_option edge.
	SelectedOption *QuestionOption `json:"selected_option,omitempty"`
	// TestSession holds the value of the test_session edge.
	TestSession *TestSession `json:"test_session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionAnswerEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionAnswerEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// SelectedOptionOrErr returns the SelectedOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionAnswerEdges) SelectedOptionOrErr() (*QuestionOption, error) {
	if e.SelectedOption != nil {
		return e.SelectedOption, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: questionoption.Label}
	}
	return nil, &NotLoadedError{edge: "selected_option"}
}

// TestSessionOrErr returns the TestSession value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestSessionAnswerEdges) TestSessionOrErr() (*TestSession, error) {
	if e.TestSession != nil {
		return e.TestSession, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: testsession.Label}
	}
	return nil, &NotLoadedError{edge: "test_session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestSessionAnswer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testsessionanswer.FieldSelectedOptionID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case testsessionanswer.FieldSelectedOptionText:
			values[i] = new(sql.NullString)
		case testsessionanswer.FieldCreatedAt, testsessionanswer.FieldUpdatedAt, testsessionanswer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case testsessionanswer.FieldID, testsessionanswer.FieldUserID, testsessionanswer.FieldQuestionID, testsessionanswer.FieldSessionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestSessionAnswer fields.
func (tsa *TestSessionAnswer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testsessionanswer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tsa.ID = *value
			}
		case testsessionanswer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tsa.CreatedAt = value.Time
			}
		case testsessionanswer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tsa.UpdatedAt = value.Time
			}
		case testsessionanswer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tsa.DeletedAt = new(time.Time)
				*tsa.DeletedAt = value.Time
			}
		case testsessionanswer.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				tsa.UserID = *value
			}
		case testsessionanswer.FieldQuestionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value != nil {
				tsa.QuestionID = *value
			}
		case testsessionanswer.FieldSelectedOptionID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field selected_option_id", values[i])
			} else if value.Valid {
				tsa.SelectedOptionID = new(uuid.UUID)
				*tsa.SelectedOptionID = *value.S.(*uuid.UUID)
			}
		case testsessionanswer.FieldSessionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value != nil {
				tsa.SessionID = *value
			}
		case testsessionanswer.FieldSelectedOptionText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field selected_option_text", values[i])
			} else if value.Valid {
				tsa.SelectedOptionText = new(string)
				*tsa.SelectedOptionText = value.String
			}
		default:
			tsa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestSessionAnswer.
// This includes values selected through modifiers, order, etc.
func (tsa *TestSessionAnswer) Value(name string) (ent.Value, error) {
	return tsa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TestSessionAnswer entity.
func (tsa *TestSessionAnswer) QueryUser() *UserQuery {
	return NewTestSessionAnswerClient(tsa.config).QueryUser(tsa)
}

// QueryQuestion queries the "question" edge of the TestSessionAnswer entity.
func (tsa *TestSessionAnswer) QueryQuestion() *QuestionQuery {
	return NewTestSessionAnswerClient(tsa.config).QueryQuestion(tsa)
}

// QuerySelectedOption queries the "selected_option" edge of the TestSessionAnswer entity.
func (tsa *TestSessionAnswer) QuerySelectedOption() *QuestionOptionQuery {
	return NewTestSessionAnswerClient(tsa.config).QuerySelectedOption(tsa)
}

// QueryTestSession queries the "test_session" edge of the TestSessionAnswer entity.
func (tsa *TestSessionAnswer) QueryTestSession() *TestSessionQuery {
	return NewTestSessionAnswerClient(tsa.config).QueryTestSession(tsa)
}

// Update returns a builder for updating this TestSessionAnswer.
// Note that you need to call TestSessionAnswer.Unwrap() before calling this method if this TestSessionAnswer
// was returned from a transaction, and the transaction was committed or rolled back.
func (tsa *TestSessionAnswer) Update() *TestSessionAnswerUpdateOne {
	return NewTestSessionAnswerClient(tsa.config).UpdateOne(tsa)
}

// Unwrap unwraps the TestSessionAnswer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tsa *TestSessionAnswer) Unwrap() *TestSessionAnswer {
	_tx, ok := tsa.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestSessionAnswer is not a transactional entity")
	}
	tsa.config.driver = _tx.drv
	return tsa
}

// String implements the fmt.Stringer.
func (tsa *TestSessionAnswer) String() string {
	var builder strings.Builder
	builder.WriteString("TestSessionAnswer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tsa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tsa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tsa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tsa.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tsa.UserID))
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", tsa.QuestionID))
	builder.WriteString(", ")
	if v := tsa.SelectedOptionID; v != nil {
		builder.WriteString("selected_option_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", tsa.SessionID))
	builder.WriteString(", ")
	if v := tsa.SelectedOptionText; v != nil {
		builder.WriteString("selected_option_text=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// TestSessionAnswers is a parsable slice of TestSessionAnswer.
type TestSessionAnswers []*TestSessionAnswer
