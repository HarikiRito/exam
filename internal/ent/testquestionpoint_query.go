// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/test"
	"template/internal/ent/testquestionpoint"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionPointQuery is the builder for querying TestQuestionPoint entities.
type TestQuestionPointQuery struct {
	config
	ctx          *QueryContext
	order        []testquestionpoint.OrderOption
	inters       []Interceptor
	predicates   []predicate.TestQuestionPoint
	withTest     *TestQuery
	withQuestion *QuestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestQuestionPointQuery builder.
func (tqpq *TestQuestionPointQuery) Where(ps ...predicate.TestQuestionPoint) *TestQuestionPointQuery {
	tqpq.predicates = append(tqpq.predicates, ps...)
	return tqpq
}

// Limit the number of records to be returned by this query.
func (tqpq *TestQuestionPointQuery) Limit(limit int) *TestQuestionPointQuery {
	tqpq.ctx.Limit = &limit
	return tqpq
}

// Offset to start from.
func (tqpq *TestQuestionPointQuery) Offset(offset int) *TestQuestionPointQuery {
	tqpq.ctx.Offset = &offset
	return tqpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tqpq *TestQuestionPointQuery) Unique(unique bool) *TestQuestionPointQuery {
	tqpq.ctx.Unique = &unique
	return tqpq
}

// Order specifies how the records should be ordered.
func (tqpq *TestQuestionPointQuery) Order(o ...testquestionpoint.OrderOption) *TestQuestionPointQuery {
	tqpq.order = append(tqpq.order, o...)
	return tqpq
}

// QueryTest chains the current query on the "test" edge.
func (tqpq *TestQuestionPointQuery) QueryTest() *TestQuery {
	query := (&TestClient{config: tqpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testquestionpoint.Table, testquestionpoint.FieldID, selector),
			sqlgraph.To(test.Table, test.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, testquestionpoint.TestTable, testquestionpoint.TestColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (tqpq *TestQuestionPointQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: tqpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testquestionpoint.Table, testquestionpoint.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, testquestionpoint.QuestionTable, testquestionpoint.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TestQuestionPoint entity from the query.
// Returns a *NotFoundError when no TestQuestionPoint was found.
func (tqpq *TestQuestionPointQuery) First(ctx context.Context) (*TestQuestionPoint, error) {
	nodes, err := tqpq.Limit(1).All(setContextOp(ctx, tqpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{testquestionpoint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) FirstX(ctx context.Context) *TestQuestionPoint {
	node, err := tqpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TestQuestionPoint ID from the query.
// Returns a *NotFoundError when no TestQuestionPoint ID was found.
func (tqpq *TestQuestionPointQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tqpq.Limit(1).IDs(setContextOp(ctx, tqpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{testquestionpoint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tqpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TestQuestionPoint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TestQuestionPoint entity is found.
// Returns a *NotFoundError when no TestQuestionPoint entities are found.
func (tqpq *TestQuestionPointQuery) Only(ctx context.Context) (*TestQuestionPoint, error) {
	nodes, err := tqpq.Limit(2).All(setContextOp(ctx, tqpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{testquestionpoint.Label}
	default:
		return nil, &NotSingularError{testquestionpoint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) OnlyX(ctx context.Context) *TestQuestionPoint {
	node, err := tqpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TestQuestionPoint ID in the query.
// Returns a *NotSingularError when more than one TestQuestionPoint ID is found.
// Returns a *NotFoundError when no entities are found.
func (tqpq *TestQuestionPointQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tqpq.Limit(2).IDs(setContextOp(ctx, tqpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{testquestionpoint.Label}
	default:
		err = &NotSingularError{testquestionpoint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tqpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TestQuestionPoints.
func (tqpq *TestQuestionPointQuery) All(ctx context.Context) ([]*TestQuestionPoint, error) {
	ctx = setContextOp(ctx, tqpq.ctx, ent.OpQueryAll)
	if err := tqpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TestQuestionPoint, *TestQuestionPointQuery]()
	return withInterceptors[[]*TestQuestionPoint](ctx, tqpq, qr, tqpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) AllX(ctx context.Context) []*TestQuestionPoint {
	nodes, err := tqpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TestQuestionPoint IDs.
func (tqpq *TestQuestionPointQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tqpq.ctx.Unique == nil && tqpq.path != nil {
		tqpq.Unique(true)
	}
	ctx = setContextOp(ctx, tqpq.ctx, ent.OpQueryIDs)
	if err = tqpq.Select(testquestionpoint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tqpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tqpq *TestQuestionPointQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tqpq.ctx, ent.OpQueryCount)
	if err := tqpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tqpq, querierCount[*TestQuestionPointQuery](), tqpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) CountX(ctx context.Context) int {
	count, err := tqpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tqpq *TestQuestionPointQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tqpq.ctx, ent.OpQueryExist)
	switch _, err := tqpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tqpq *TestQuestionPointQuery) ExistX(ctx context.Context) bool {
	exist, err := tqpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestQuestionPointQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tqpq *TestQuestionPointQuery) Clone() *TestQuestionPointQuery {
	if tqpq == nil {
		return nil
	}
	return &TestQuestionPointQuery{
		config:       tqpq.config,
		ctx:          tqpq.ctx.Clone(),
		order:        append([]testquestionpoint.OrderOption{}, tqpq.order...),
		inters:       append([]Interceptor{}, tqpq.inters...),
		predicates:   append([]predicate.TestQuestionPoint{}, tqpq.predicates...),
		withTest:     tqpq.withTest.Clone(),
		withQuestion: tqpq.withQuestion.Clone(),
		// clone intermediate query.
		sql:  tqpq.sql.Clone(),
		path: tqpq.path,
	}
}

// WithTest tells the query-builder to eager-load the nodes that are connected to
// the "test" edge. The optional arguments are used to configure the query builder of the edge.
func (tqpq *TestQuestionPointQuery) WithTest(opts ...func(*TestQuery)) *TestQuestionPointQuery {
	query := (&TestClient{config: tqpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tqpq.withTest = query
	return tqpq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (tqpq *TestQuestionPointQuery) WithQuestion(opts ...func(*QuestionQuery)) *TestQuestionPointQuery {
	query := (&QuestionClient{config: tqpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tqpq.withQuestion = query
	return tqpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TestQuestionPoint.Query().
//		GroupBy(testquestionpoint.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tqpq *TestQuestionPointQuery) GroupBy(field string, fields ...string) *TestQuestionPointGroupBy {
	tqpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestQuestionPointGroupBy{build: tqpq}
	grbuild.flds = &tqpq.ctx.Fields
	grbuild.label = testquestionpoint.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TestQuestionPoint.Query().
//		Select(testquestionpoint.FieldCreatedAt).
//		Scan(ctx, &v)
func (tqpq *TestQuestionPointQuery) Select(fields ...string) *TestQuestionPointSelect {
	tqpq.ctx.Fields = append(tqpq.ctx.Fields, fields...)
	sbuild := &TestQuestionPointSelect{TestQuestionPointQuery: tqpq}
	sbuild.label = testquestionpoint.Label
	sbuild.flds, sbuild.scan = &tqpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestQuestionPointSelect configured with the given aggregations.
func (tqpq *TestQuestionPointQuery) Aggregate(fns ...AggregateFunc) *TestQuestionPointSelect {
	return tqpq.Select().Aggregate(fns...)
}

func (tqpq *TestQuestionPointQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tqpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tqpq); err != nil {
				return err
			}
		}
	}
	for _, f := range tqpq.ctx.Fields {
		if !testquestionpoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tqpq.path != nil {
		prev, err := tqpq.path(ctx)
		if err != nil {
			return err
		}
		tqpq.sql = prev
	}
	return nil
}

func (tqpq *TestQuestionPointQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TestQuestionPoint, error) {
	var (
		nodes       = []*TestQuestionPoint{}
		_spec       = tqpq.querySpec()
		loadedTypes = [2]bool{
			tqpq.withTest != nil,
			tqpq.withQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TestQuestionPoint).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TestQuestionPoint{config: tqpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tqpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tqpq.withTest; query != nil {
		if err := tqpq.loadTest(ctx, query, nodes, nil,
			func(n *TestQuestionPoint, e *Test) { n.Edges.Test = e }); err != nil {
			return nil, err
		}
	}
	if query := tqpq.withQuestion; query != nil {
		if err := tqpq.loadQuestion(ctx, query, nodes, nil,
			func(n *TestQuestionPoint, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tqpq *TestQuestionPointQuery) loadTest(ctx context.Context, query *TestQuery, nodes []*TestQuestionPoint, init func(*TestQuestionPoint), assign func(*TestQuestionPoint, *Test)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestQuestionPoint)
	for i := range nodes {
		fk := nodes[i].TestID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(test.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "test_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tqpq *TestQuestionPointQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*TestQuestionPoint, init func(*TestQuestionPoint), assign func(*TestQuestionPoint, *Question)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestQuestionPoint)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tqpq *TestQuestionPointQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tqpq.querySpec()
	_spec.Node.Columns = tqpq.ctx.Fields
	if len(tqpq.ctx.Fields) > 0 {
		_spec.Unique = tqpq.ctx.Unique != nil && *tqpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tqpq.driver, _spec)
}

func (tqpq *TestQuestionPointQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(testquestionpoint.Table, testquestionpoint.Columns, sqlgraph.NewFieldSpec(testquestionpoint.FieldID, field.TypeUUID))
	_spec.From = tqpq.sql
	if unique := tqpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tqpq.path != nil {
		_spec.Unique = true
	}
	if fields := tqpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testquestionpoint.FieldID)
		for i := range fields {
			if fields[i] != testquestionpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tqpq.withTest != nil {
			_spec.Node.AddColumnOnce(testquestionpoint.FieldTestID)
		}
		if tqpq.withQuestion != nil {
			_spec.Node.AddColumnOnce(testquestionpoint.FieldQuestionID)
		}
	}
	if ps := tqpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tqpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tqpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tqpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tqpq *TestQuestionPointQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tqpq.driver.Dialect())
	t1 := builder.Table(testquestionpoint.Table)
	columns := tqpq.ctx.Fields
	if len(columns) == 0 {
		columns = testquestionpoint.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tqpq.sql != nil {
		selector = tqpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tqpq.ctx.Unique != nil && *tqpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tqpq.predicates {
		p(selector)
	}
	for _, p := range tqpq.order {
		p(selector)
	}
	if offset := tqpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tqpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestQuestionPointGroupBy is the group-by builder for TestQuestionPoint entities.
type TestQuestionPointGroupBy struct {
	selector
	build *TestQuestionPointQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tqpgb *TestQuestionPointGroupBy) Aggregate(fns ...AggregateFunc) *TestQuestionPointGroupBy {
	tqpgb.fns = append(tqpgb.fns, fns...)
	return tqpgb
}

// Scan applies the selector query and scans the result into the given value.
func (tqpgb *TestQuestionPointGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tqpgb.build.ctx, ent.OpQueryGroupBy)
	if err := tqpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestQuestionPointQuery, *TestQuestionPointGroupBy](ctx, tqpgb.build, tqpgb, tqpgb.build.inters, v)
}

func (tqpgb *TestQuestionPointGroupBy) sqlScan(ctx context.Context, root *TestQuestionPointQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tqpgb.fns))
	for _, fn := range tqpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tqpgb.flds)+len(tqpgb.fns))
		for _, f := range *tqpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tqpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tqpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestQuestionPointSelect is the builder for selecting fields of TestQuestionPoint entities.
type TestQuestionPointSelect struct {
	*TestQuestionPointQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tqps *TestQuestionPointSelect) Aggregate(fns ...AggregateFunc) *TestQuestionPointSelect {
	tqps.fns = append(tqps.fns, fns...)
	return tqps
}

// Scan applies the selector query and scans the result into the given value.
func (tqps *TestQuestionPointSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tqps.ctx, ent.OpQuerySelect)
	if err := tqps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestQuestionPointQuery, *TestQuestionPointSelect](ctx, tqps.TestQuestionPointQuery, tqps, tqps.inters, v)
}

func (tqps *TestQuestionPointSelect) sqlScan(ctx context.Context, root *TestQuestionPointQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tqps.fns))
	for _, fn := range tqps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tqps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tqps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
