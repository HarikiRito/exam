// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/video"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseSectionUpdate is the builder for updating CourseSection entities.
type CourseSectionUpdate struct {
	config
	hooks    []Hook
	mutation *CourseSectionMutation
}

// Where appends a list predicates to the CourseSectionUpdate builder.
func (csu *CourseSectionUpdate) Where(ps ...predicate.CourseSection) *CourseSectionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CourseSectionUpdate) SetCreatedAt(t time.Time) *CourseSectionUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableCreatedAt(t *time.Time) *CourseSectionUpdate {
	if t != nil {
		csu.SetCreatedAt(*t)
	}
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CourseSectionUpdate) SetUpdatedAt(t time.Time) *CourseSectionUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetDeletedAt sets the "deleted_at" field.
func (csu *CourseSectionUpdate) SetDeletedAt(t time.Time) *CourseSectionUpdate {
	csu.mutation.SetDeletedAt(t)
	return csu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableDeletedAt(t *time.Time) *CourseSectionUpdate {
	if t != nil {
		csu.SetDeletedAt(*t)
	}
	return csu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csu *CourseSectionUpdate) ClearDeletedAt() *CourseSectionUpdate {
	csu.mutation.ClearDeletedAt()
	return csu
}

// SetCourseID sets the "course_id" field.
func (csu *CourseSectionUpdate) SetCourseID(u uuid.UUID) *CourseSectionUpdate {
	csu.mutation.SetCourseID(u)
	return csu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableCourseID(u *uuid.UUID) *CourseSectionUpdate {
	if u != nil {
		csu.SetCourseID(*u)
	}
	return csu
}

// SetTitle sets the "title" field.
func (csu *CourseSectionUpdate) SetTitle(s string) *CourseSectionUpdate {
	csu.mutation.SetTitle(s)
	return csu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableTitle(s *string) *CourseSectionUpdate {
	if s != nil {
		csu.SetTitle(*s)
	}
	return csu
}

// SetDescription sets the "description" field.
func (csu *CourseSectionUpdate) SetDescription(s string) *CourseSectionUpdate {
	csu.mutation.SetDescription(s)
	return csu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (csu *CourseSectionUpdate) SetNillableDescription(s *string) *CourseSectionUpdate {
	if s != nil {
		csu.SetDescription(*s)
	}
	return csu
}

// ClearDescription clears the value of the "description" field.
func (csu *CourseSectionUpdate) ClearDescription() *CourseSectionUpdate {
	csu.mutation.ClearDescription()
	return csu
}

// SetCourse sets the "course" edge to the Course entity.
func (csu *CourseSectionUpdate) SetCourse(c *Course) *CourseSectionUpdate {
	return csu.SetCourseID(c.ID)
}

// AddCourseSectionVideoIDs adds the "course_section_videos" edge to the Video entity by IDs.
func (csu *CourseSectionUpdate) AddCourseSectionVideoIDs(ids ...uuid.UUID) *CourseSectionUpdate {
	csu.mutation.AddCourseSectionVideoIDs(ids...)
	return csu
}

// AddCourseSectionVideos adds the "course_section_videos" edges to the Video entity.
func (csu *CourseSectionUpdate) AddCourseSectionVideos(v ...*Video) *CourseSectionUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return csu.AddCourseSectionVideoIDs(ids...)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (csu *CourseSectionUpdate) AddQuestionIDs(ids ...uuid.UUID) *CourseSectionUpdate {
	csu.mutation.AddQuestionIDs(ids...)
	return csu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (csu *CourseSectionUpdate) AddQuestions(q ...*Question) *CourseSectionUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return csu.AddQuestionIDs(ids...)
}

// Mutation returns the CourseSectionMutation object of the builder.
func (csu *CourseSectionUpdate) Mutation() *CourseSectionMutation {
	return csu.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (csu *CourseSectionUpdate) ClearCourse() *CourseSectionUpdate {
	csu.mutation.ClearCourse()
	return csu
}

// ClearCourseSectionVideos clears all "course_section_videos" edges to the Video entity.
func (csu *CourseSectionUpdate) ClearCourseSectionVideos() *CourseSectionUpdate {
	csu.mutation.ClearCourseSectionVideos()
	return csu
}

// RemoveCourseSectionVideoIDs removes the "course_section_videos" edge to Video entities by IDs.
func (csu *CourseSectionUpdate) RemoveCourseSectionVideoIDs(ids ...uuid.UUID) *CourseSectionUpdate {
	csu.mutation.RemoveCourseSectionVideoIDs(ids...)
	return csu
}

// RemoveCourseSectionVideos removes "course_section_videos" edges to Video entities.
func (csu *CourseSectionUpdate) RemoveCourseSectionVideos(v ...*Video) *CourseSectionUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return csu.RemoveCourseSectionVideoIDs(ids...)
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (csu *CourseSectionUpdate) ClearQuestions() *CourseSectionUpdate {
	csu.mutation.ClearQuestions()
	return csu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (csu *CourseSectionUpdate) RemoveQuestionIDs(ids ...uuid.UUID) *CourseSectionUpdate {
	csu.mutation.RemoveQuestionIDs(ids...)
	return csu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (csu *CourseSectionUpdate) RemoveQuestions(q ...*Question) *CourseSectionUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return csu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CourseSectionUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CourseSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CourseSectionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CourseSectionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CourseSectionUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := coursesection.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CourseSectionUpdate) check() error {
	if v, ok := csu.mutation.Title(); ok {
		if err := coursesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CourseSection.title": %w`, err)}
		}
	}
	if csu.mutation.CourseCleared() && len(csu.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CourseSection.course"`)
	}
	return nil
}

func (csu *CourseSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coursesection.Table, coursesection.Columns, sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.SetField(coursesection.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(coursesection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.DeletedAt(); ok {
		_spec.SetField(coursesection.FieldDeletedAt, field.TypeTime, value)
	}
	if csu.mutation.DeletedAtCleared() {
		_spec.ClearField(coursesection.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csu.mutation.Title(); ok {
		_spec.SetField(coursesection.FieldTitle, field.TypeString, value)
	}
	if value, ok := csu.mutation.Description(); ok {
		_spec.SetField(coursesection.FieldDescription, field.TypeString, value)
	}
	if csu.mutation.DescriptionCleared() {
		_spec.ClearField(coursesection.FieldDescription, field.TypeString)
	}
	if csu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CourseSectionVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedCourseSectionVideosIDs(); len(nodes) > 0 && !csu.mutation.CourseSectionVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CourseSectionVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !csu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CourseSectionUpdateOne is the builder for updating a single CourseSection entity.
type CourseSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseSectionMutation
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CourseSectionUpdateOne) SetCreatedAt(t time.Time) *CourseSectionUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseSectionUpdateOne {
	if t != nil {
		csuo.SetCreatedAt(*t)
	}
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CourseSectionUpdateOne) SetUpdatedAt(t time.Time) *CourseSectionUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csuo *CourseSectionUpdateOne) SetDeletedAt(t time.Time) *CourseSectionUpdateOne {
	csuo.mutation.SetDeletedAt(t)
	return csuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableDeletedAt(t *time.Time) *CourseSectionUpdateOne {
	if t != nil {
		csuo.SetDeletedAt(*t)
	}
	return csuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csuo *CourseSectionUpdateOne) ClearDeletedAt() *CourseSectionUpdateOne {
	csuo.mutation.ClearDeletedAt()
	return csuo
}

// SetCourseID sets the "course_id" field.
func (csuo *CourseSectionUpdateOne) SetCourseID(u uuid.UUID) *CourseSectionUpdateOne {
	csuo.mutation.SetCourseID(u)
	return csuo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableCourseID(u *uuid.UUID) *CourseSectionUpdateOne {
	if u != nil {
		csuo.SetCourseID(*u)
	}
	return csuo
}

// SetTitle sets the "title" field.
func (csuo *CourseSectionUpdateOne) SetTitle(s string) *CourseSectionUpdateOne {
	csuo.mutation.SetTitle(s)
	return csuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableTitle(s *string) *CourseSectionUpdateOne {
	if s != nil {
		csuo.SetTitle(*s)
	}
	return csuo
}

// SetDescription sets the "description" field.
func (csuo *CourseSectionUpdateOne) SetDescription(s string) *CourseSectionUpdateOne {
	csuo.mutation.SetDescription(s)
	return csuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (csuo *CourseSectionUpdateOne) SetNillableDescription(s *string) *CourseSectionUpdateOne {
	if s != nil {
		csuo.SetDescription(*s)
	}
	return csuo
}

// ClearDescription clears the value of the "description" field.
func (csuo *CourseSectionUpdateOne) ClearDescription() *CourseSectionUpdateOne {
	csuo.mutation.ClearDescription()
	return csuo
}

// SetCourse sets the "course" edge to the Course entity.
func (csuo *CourseSectionUpdateOne) SetCourse(c *Course) *CourseSectionUpdateOne {
	return csuo.SetCourseID(c.ID)
}

// AddCourseSectionVideoIDs adds the "course_section_videos" edge to the Video entity by IDs.
func (csuo *CourseSectionUpdateOne) AddCourseSectionVideoIDs(ids ...uuid.UUID) *CourseSectionUpdateOne {
	csuo.mutation.AddCourseSectionVideoIDs(ids...)
	return csuo
}

// AddCourseSectionVideos adds the "course_section_videos" edges to the Video entity.
func (csuo *CourseSectionUpdateOne) AddCourseSectionVideos(v ...*Video) *CourseSectionUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return csuo.AddCourseSectionVideoIDs(ids...)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (csuo *CourseSectionUpdateOne) AddQuestionIDs(ids ...uuid.UUID) *CourseSectionUpdateOne {
	csuo.mutation.AddQuestionIDs(ids...)
	return csuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (csuo *CourseSectionUpdateOne) AddQuestions(q ...*Question) *CourseSectionUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return csuo.AddQuestionIDs(ids...)
}

// Mutation returns the CourseSectionMutation object of the builder.
func (csuo *CourseSectionUpdateOne) Mutation() *CourseSectionMutation {
	return csuo.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (csuo *CourseSectionUpdateOne) ClearCourse() *CourseSectionUpdateOne {
	csuo.mutation.ClearCourse()
	return csuo
}

// ClearCourseSectionVideos clears all "course_section_videos" edges to the Video entity.
func (csuo *CourseSectionUpdateOne) ClearCourseSectionVideos() *CourseSectionUpdateOne {
	csuo.mutation.ClearCourseSectionVideos()
	return csuo
}

// RemoveCourseSectionVideoIDs removes the "course_section_videos" edge to Video entities by IDs.
func (csuo *CourseSectionUpdateOne) RemoveCourseSectionVideoIDs(ids ...uuid.UUID) *CourseSectionUpdateOne {
	csuo.mutation.RemoveCourseSectionVideoIDs(ids...)
	return csuo
}

// RemoveCourseSectionVideos removes "course_section_videos" edges to Video entities.
func (csuo *CourseSectionUpdateOne) RemoveCourseSectionVideos(v ...*Video) *CourseSectionUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return csuo.RemoveCourseSectionVideoIDs(ids...)
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (csuo *CourseSectionUpdateOne) ClearQuestions() *CourseSectionUpdateOne {
	csuo.mutation.ClearQuestions()
	return csuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (csuo *CourseSectionUpdateOne) RemoveQuestionIDs(ids ...uuid.UUID) *CourseSectionUpdateOne {
	csuo.mutation.RemoveQuestionIDs(ids...)
	return csuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (csuo *CourseSectionUpdateOne) RemoveQuestions(q ...*Question) *CourseSectionUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return csuo.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the CourseSectionUpdate builder.
func (csuo *CourseSectionUpdateOne) Where(ps ...predicate.CourseSection) *CourseSectionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CourseSectionUpdateOne) Select(field string, fields ...string) *CourseSectionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CourseSection entity.
func (csuo *CourseSectionUpdateOne) Save(ctx context.Context) (*CourseSection, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CourseSectionUpdateOne) SaveX(ctx context.Context) *CourseSection {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CourseSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CourseSectionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CourseSectionUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := coursesection.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CourseSectionUpdateOne) check() error {
	if v, ok := csuo.mutation.Title(); ok {
		if err := coursesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CourseSection.title": %w`, err)}
		}
	}
	if csuo.mutation.CourseCleared() && len(csuo.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CourseSection.course"`)
	}
	return nil
}

func (csuo *CourseSectionUpdateOne) sqlSave(ctx context.Context) (_node *CourseSection, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coursesection.Table, coursesection.Columns, sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CourseSection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coursesection.FieldID)
		for _, f := range fields {
			if !coursesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coursesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.SetField(coursesection.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coursesection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.DeletedAt(); ok {
		_spec.SetField(coursesection.FieldDeletedAt, field.TypeTime, value)
	}
	if csuo.mutation.DeletedAtCleared() {
		_spec.ClearField(coursesection.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csuo.mutation.Title(); ok {
		_spec.SetField(coursesection.FieldTitle, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Description(); ok {
		_spec.SetField(coursesection.FieldDescription, field.TypeString, value)
	}
	if csuo.mutation.DescriptionCleared() {
		_spec.ClearField(coursesection.FieldDescription, field.TypeString)
	}
	if csuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CourseSectionVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedCourseSectionVideosIDs(); len(nodes) > 0 && !csuo.mutation.CourseSectionVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CourseSectionVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.CourseSectionVideosTable,
			Columns: []string{coursesection.CourseSectionVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !csuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesection.QuestionsTable,
			Columns: []string{coursesection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CourseSection{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
