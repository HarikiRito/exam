// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/question"
	"template/internal/ent/test"
	"template/internal/ent/testquestionpoint"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestQuestionPoint is the model entity for the TestQuestionPoint schema.
type TestQuestionPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// TestID holds the value of the "test_id" field.
	TestID uuid.UUID `json:"test_id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID uuid.UUID `json:"question_id,omitempty"`
	// Points holds the value of the "points" field.
	Points int `json:"points,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestQuestionPointQuery when eager-loading is set.
	Edges        TestQuestionPointEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestQuestionPointEdges holds the relations/edges for other nodes in the graph.
type TestQuestionPointEdges struct {
	// Test holds the value of the test edge.
	Test *Test `json:"test,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestQuestionPointEdges) TestOrErr() (*Test, error) {
	if e.Test != nil {
		return e.Test, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: test.Label}
	}
	return nil, &NotLoadedError{edge: "test"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestQuestionPointEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestQuestionPoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testquestionpoint.FieldPoints:
			values[i] = new(sql.NullInt64)
		case testquestionpoint.FieldCreatedAt, testquestionpoint.FieldUpdatedAt, testquestionpoint.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case testquestionpoint.FieldID, testquestionpoint.FieldTestID, testquestionpoint.FieldQuestionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestQuestionPoint fields.
func (tqp *TestQuestionPoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testquestionpoint.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tqp.ID = *value
			}
		case testquestionpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tqp.CreatedAt = value.Time
			}
		case testquestionpoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tqp.UpdatedAt = value.Time
			}
		case testquestionpoint.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tqp.DeletedAt = new(time.Time)
				*tqp.DeletedAt = value.Time
			}
		case testquestionpoint.FieldTestID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field test_id", values[i])
			} else if value != nil {
				tqp.TestID = *value
			}
		case testquestionpoint.FieldQuestionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value != nil {
				tqp.QuestionID = *value
			}
		case testquestionpoint.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				tqp.Points = int(value.Int64)
			}
		default:
			tqp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestQuestionPoint.
// This includes values selected through modifiers, order, etc.
func (tqp *TestQuestionPoint) Value(name string) (ent.Value, error) {
	return tqp.selectValues.Get(name)
}

// QueryTest queries the "test" edge of the TestQuestionPoint entity.
func (tqp *TestQuestionPoint) QueryTest() *TestQuery {
	return NewTestQuestionPointClient(tqp.config).QueryTest(tqp)
}

// QueryQuestion queries the "question" edge of the TestQuestionPoint entity.
func (tqp *TestQuestionPoint) QueryQuestion() *QuestionQuery {
	return NewTestQuestionPointClient(tqp.config).QueryQuestion(tqp)
}

// Update returns a builder for updating this TestQuestionPoint.
// Note that you need to call TestQuestionPoint.Unwrap() before calling this method if this TestQuestionPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (tqp *TestQuestionPoint) Update() *TestQuestionPointUpdateOne {
	return NewTestQuestionPointClient(tqp.config).UpdateOne(tqp)
}

// Unwrap unwraps the TestQuestionPoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tqp *TestQuestionPoint) Unwrap() *TestQuestionPoint {
	_tx, ok := tqp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestQuestionPoint is not a transactional entity")
	}
	tqp.config.driver = _tx.drv
	return tqp
}

// String implements the fmt.Stringer.
func (tqp *TestQuestionPoint) String() string {
	var builder strings.Builder
	builder.WriteString("TestQuestionPoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tqp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tqp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tqp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tqp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("test_id=")
	builder.WriteString(fmt.Sprintf("%v", tqp.TestID))
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", tqp.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", tqp.Points))
	builder.WriteByte(')')
	return builder.String()
}

// TestQuestionPoints is a parsable slice of TestQuestionPoint.
type TestQuestionPoints []*TestQuestionPoint
