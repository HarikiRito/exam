// Code generated by ent, DO NOT EDIT.

package testsession

import (
	"template/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUserID, v))
}

// CourseSectionID applies equality check predicate on the "course_section_id" field. It's identical to CourseSectionIDEQ.
func CourseSectionID(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCourseSectionID, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCompletedAt, v))
}

// TotalScore applies equality check predicate on the "total_score" field. It's identical to TotalScoreEQ.
func TotalScore(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldTotalScore, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldUserID, vs...))
}

// CourseSectionIDEQ applies the EQ predicate on the "course_section_id" field.
func CourseSectionIDEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCourseSectionID, v))
}

// CourseSectionIDNEQ applies the NEQ predicate on the "course_section_id" field.
func CourseSectionIDNEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldCourseSectionID, v))
}

// CourseSectionIDIn applies the In predicate on the "course_section_id" field.
func CourseSectionIDIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldCourseSectionID, vs...))
}

// CourseSectionIDNotIn applies the NotIn predicate on the "course_section_id" field.
func CourseSectionIDNotIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldCourseSectionID, vs...))
}

// CourseSectionIDIsNil applies the IsNil predicate on the "course_section_id" field.
func CourseSectionIDIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldCourseSectionID))
}

// CourseSectionIDNotNil applies the NotNil predicate on the "course_section_id" field.
func CourseSectionIDNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldCourseSectionID))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldCompletedAt))
}

// TotalScoreEQ applies the EQ predicate on the "total_score" field.
func TotalScoreEQ(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldTotalScore, v))
}

// TotalScoreNEQ applies the NEQ predicate on the "total_score" field.
func TotalScoreNEQ(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldTotalScore, v))
}

// TotalScoreIn applies the In predicate on the "total_score" field.
func TotalScoreIn(vs ...int) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldTotalScore, vs...))
}

// TotalScoreNotIn applies the NotIn predicate on the "total_score" field.
func TotalScoreNotIn(vs ...int) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldTotalScore, vs...))
}

// TotalScoreGT applies the GT predicate on the "total_score" field.
func TotalScoreGT(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldTotalScore, v))
}

// TotalScoreGTE applies the GTE predicate on the "total_score" field.
func TotalScoreGTE(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldTotalScore, v))
}

// TotalScoreLT applies the LT predicate on the "total_score" field.
func TotalScoreLT(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldTotalScore, v))
}

// TotalScoreLTE applies the LTE predicate on the "total_score" field.
func TotalScoreLTE(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldTotalScore, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseSection applies the HasEdge predicate on the "course_section" edge.
func HasCourseSection() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseSectionTable, CourseSectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseSectionWith applies the HasEdge predicate on the "course_section" edge with a given conditions (other predicates).
func HasCourseSectionWith(preds ...predicate.CourseSection) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newCourseSectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserQuestionAnswers applies the HasEdge predicate on the "user_question_answers" edge.
func HasUserQuestionAnswers() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserQuestionAnswersTable, UserQuestionAnswersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserQuestionAnswersWith applies the HasEdge predicate on the "user_question_answers" edge with a given conditions (other predicates).
func HasUserQuestionAnswersWith(preds ...predicate.UserQuestionAnswer) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newUserQuestionAnswersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestSession) predicate.TestSession {
	return predicate.TestSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestSession) predicate.TestSession {
	return predicate.TestSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestSession) predicate.TestSession {
	return predicate.TestSession(sql.NotPredicates(p))
}
