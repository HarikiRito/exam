// Code generated by ent, DO NOT EDIT.

package testsession

import (
	"template/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUserID, v))
}

// CourseSectionID applies equality check predicate on the "course_section_id" field. It's identical to CourseSectionIDEQ.
func CourseSectionID(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCourseSectionID, v))
}

// TestID applies equality check predicate on the "test_id" field. It's identical to TestIDEQ.
func TestID(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldTestID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldStartedAt, v))
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldExpiredAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCompletedAt, v))
}

// MaxPoints applies equality check predicate on the "max_points" field. It's identical to MaxPointsEQ.
func MaxPoints(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldMaxPoints, v))
}

// PointsEarned applies equality check predicate on the "points_earned" field. It's identical to PointsEarnedEQ.
func PointsEarned(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldPointsEarned, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldUserID, vs...))
}

// CourseSectionIDEQ applies the EQ predicate on the "course_section_id" field.
func CourseSectionIDEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCourseSectionID, v))
}

// CourseSectionIDNEQ applies the NEQ predicate on the "course_section_id" field.
func CourseSectionIDNEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldCourseSectionID, v))
}

// CourseSectionIDIn applies the In predicate on the "course_section_id" field.
func CourseSectionIDIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldCourseSectionID, vs...))
}

// CourseSectionIDNotIn applies the NotIn predicate on the "course_section_id" field.
func CourseSectionIDNotIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldCourseSectionID, vs...))
}

// CourseSectionIDIsNil applies the IsNil predicate on the "course_section_id" field.
func CourseSectionIDIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldCourseSectionID))
}

// CourseSectionIDNotNil applies the NotNil predicate on the "course_section_id" field.
func CourseSectionIDNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldCourseSectionID))
}

// TestIDEQ applies the EQ predicate on the "test_id" field.
func TestIDEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldTestID, v))
}

// TestIDNEQ applies the NEQ predicate on the "test_id" field.
func TestIDNEQ(v uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldTestID, v))
}

// TestIDIn applies the In predicate on the "test_id" field.
func TestIDIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldTestID, vs...))
}

// TestIDNotIn applies the NotIn predicate on the "test_id" field.
func TestIDNotIn(vs ...uuid.UUID) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldTestID, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldStartedAt))
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldExpiredAt, v))
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldExpiredAt, v))
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldExpiredAt, vs...))
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldExpiredAt, vs...))
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldExpiredAt, v))
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldExpiredAt, v))
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldExpiredAt, v))
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldExpiredAt, v))
}

// ExpiredAtIsNil applies the IsNil predicate on the "expired_at" field.
func ExpiredAtIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldExpiredAt))
}

// ExpiredAtNotNil applies the NotNil predicate on the "expired_at" field.
func ExpiredAtNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldExpiredAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.TestSession {
	return predicate.TestSession(sql.FieldNotNull(FieldCompletedAt))
}

// MaxPointsEQ applies the EQ predicate on the "max_points" field.
func MaxPointsEQ(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldMaxPoints, v))
}

// MaxPointsNEQ applies the NEQ predicate on the "max_points" field.
func MaxPointsNEQ(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldMaxPoints, v))
}

// MaxPointsIn applies the In predicate on the "max_points" field.
func MaxPointsIn(vs ...int) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldMaxPoints, vs...))
}

// MaxPointsNotIn applies the NotIn predicate on the "max_points" field.
func MaxPointsNotIn(vs ...int) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldMaxPoints, vs...))
}

// MaxPointsGT applies the GT predicate on the "max_points" field.
func MaxPointsGT(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldMaxPoints, v))
}

// MaxPointsGTE applies the GTE predicate on the "max_points" field.
func MaxPointsGTE(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldMaxPoints, v))
}

// MaxPointsLT applies the LT predicate on the "max_points" field.
func MaxPointsLT(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldMaxPoints, v))
}

// MaxPointsLTE applies the LTE predicate on the "max_points" field.
func MaxPointsLTE(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldMaxPoints, v))
}

// PointsEarnedEQ applies the EQ predicate on the "points_earned" field.
func PointsEarnedEQ(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldPointsEarned, v))
}

// PointsEarnedNEQ applies the NEQ predicate on the "points_earned" field.
func PointsEarnedNEQ(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldPointsEarned, v))
}

// PointsEarnedIn applies the In predicate on the "points_earned" field.
func PointsEarnedIn(vs ...int) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldPointsEarned, vs...))
}

// PointsEarnedNotIn applies the NotIn predicate on the "points_earned" field.
func PointsEarnedNotIn(vs ...int) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldPointsEarned, vs...))
}

// PointsEarnedGT applies the GT predicate on the "points_earned" field.
func PointsEarnedGT(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldGT(FieldPointsEarned, v))
}

// PointsEarnedGTE applies the GTE predicate on the "points_earned" field.
func PointsEarnedGTE(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldGTE(FieldPointsEarned, v))
}

// PointsEarnedLT applies the LT predicate on the "points_earned" field.
func PointsEarnedLT(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldLT(FieldPointsEarned, v))
}

// PointsEarnedLTE applies the LTE predicate on the "points_earned" field.
func PointsEarnedLTE(v int) predicate.TestSession {
	return predicate.TestSession(sql.FieldLTE(FieldPointsEarned, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.TestSession {
	return predicate.TestSession(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.TestSession {
	return predicate.TestSession(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.TestSession {
	return predicate.TestSession(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.TestSession {
	return predicate.TestSession(sql.FieldNotIn(FieldStatus, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourseSection applies the HasEdge predicate on the "course_section" edge.
func HasCourseSection() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseSectionTable, CourseSectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseSectionWith applies the HasEdge predicate on the "course_section" edge with a given conditions (other predicates).
func HasCourseSectionWith(preds ...predicate.CourseSection) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newCourseSectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTest applies the HasEdge predicate on the "test" edge.
func HasTest() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TestTable, TestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestWith applies the HasEdge predicate on the "test" edge with a given conditions (other predicates).
func HasTestWith(preds ...predicate.Test) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newTestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestSessionQuestionAnswers applies the HasEdge predicate on the "test_session_question_answers" edge.
func HasTestSessionQuestionAnswers() predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestSessionQuestionAnswersTable, TestSessionQuestionAnswersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestSessionQuestionAnswersWith applies the HasEdge predicate on the "test_session_question_answers" edge with a given conditions (other predicates).
func HasTestSessionQuestionAnswersWith(preds ...predicate.TestSessionAnswer) predicate.TestSession {
	return predicate.TestSession(func(s *sql.Selector) {
		step := newTestSessionQuestionAnswersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestSession) predicate.TestSession {
	return predicate.TestSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestSession) predicate.TestSession {
	return predicate.TestSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestSession) predicate.TestSession {
	return predicate.TestSession(sql.NotPredicates(p))
}
