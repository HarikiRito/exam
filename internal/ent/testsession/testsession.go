// Code generated by ent, DO NOT EDIT.

package testsession

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the testsession type in the database.
	Label = "test_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCourseSectionID holds the string denoting the course_section_id field in the database.
	FieldCourseSectionID = "course_section_id"
	// FieldTestID holds the string denoting the test_id field in the database.
	FieldTestID = "test_id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldExpiredAt holds the string denoting the expired_at field in the database.
	FieldExpiredAt = "expired_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldMaxPoints holds the string denoting the max_points field in the database.
	FieldMaxPoints = "max_points"
	// FieldPointsEarned holds the string denoting the points_earned field in the database.
	FieldPointsEarned = "points_earned"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCourseSection holds the string denoting the course_section edge name in mutations.
	EdgeCourseSection = "course_section"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "test"
	// EdgeTestSessionQuestionAnswers holds the string denoting the test_session_question_answers edge name in mutations.
	EdgeTestSessionQuestionAnswers = "test_session_question_answers"
	// Table holds the table name of the testsession in the database.
	Table = "test_sessions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "test_sessions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CourseSectionTable is the table that holds the course_section relation/edge.
	CourseSectionTable = "test_sessions"
	// CourseSectionInverseTable is the table name for the CourseSection entity.
	// It exists in this package in order to avoid circular dependency with the "coursesection" package.
	CourseSectionInverseTable = "course_sections"
	// CourseSectionColumn is the table column denoting the course_section relation/edge.
	CourseSectionColumn = "course_section_id"
	// TestTable is the table that holds the test relation/edge.
	TestTable = "test_sessions"
	// TestInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestInverseTable = "tests"
	// TestColumn is the table column denoting the test relation/edge.
	TestColumn = "test_id"
	// TestSessionQuestionAnswersTable is the table that holds the test_session_question_answers relation/edge.
	TestSessionQuestionAnswersTable = "test_session_answers"
	// TestSessionQuestionAnswersInverseTable is the table name for the TestSessionAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "testsessionanswer" package.
	TestSessionQuestionAnswersInverseTable = "test_session_answers"
	// TestSessionQuestionAnswersColumn is the table column denoting the test_session_question_answers relation/edge.
	TestSessionQuestionAnswersColumn = "session_id"
)

// Columns holds all SQL columns for testsession fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldCourseSectionID,
	FieldTestID,
	FieldStartedAt,
	FieldExpiredAt,
	FieldCompletedAt,
	FieldMaxPoints,
	FieldPointsEarned,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "template/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMaxPoints holds the default value on creation for the "max_points" field.
	DefaultMaxPoints int
	// DefaultPointsEarned holds the default value on creation for the "points_earned" field.
	DefaultPointsEarned int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending    Status = "pending"
	StatusCompleted  Status = "completed"
	StatusInProgress Status = "in_progress"
	StatusCancelled  Status = "cancelled"
	StatusExpired    Status = "expired"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusCompleted, StatusInProgress, StatusCancelled, StatusExpired:
		return nil
	default:
		return fmt.Errorf("testsession: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the TestSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCourseSectionID orders the results by the course_section_id field.
func ByCourseSectionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseSectionID, opts...).ToFunc()
}

// ByTestID orders the results by the test_id field.
func ByTestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestID, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByExpiredAt orders the results by the expired_at field.
func ByExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByMaxPoints orders the results by the max_points field.
func ByMaxPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxPoints, opts...).ToFunc()
}

// ByPointsEarned orders the results by the points_earned field.
func ByPointsEarned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointsEarned, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCourseSectionField orders the results by course_section field.
func ByCourseSectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseSectionStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestField orders the results by test field.
func ByTestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestSessionQuestionAnswersCount orders the results by test_session_question_answers count.
func ByTestSessionQuestionAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestSessionQuestionAnswersStep(), opts...)
	}
}

// ByTestSessionQuestionAnswers orders the results by test_session_question_answers terms.
func ByTestSessionQuestionAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestSessionQuestionAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCourseSectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseSectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CourseSectionTable, CourseSectionColumn),
	)
}
func newTestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TestTable, TestColumn),
	)
}
func newTestSessionQuestionAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestSessionQuestionAnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestSessionQuestionAnswersTable, TestSessionQuestionAnswersColumn),
	)
}
