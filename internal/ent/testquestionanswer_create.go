// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testquestionanswer"
	"template/internal/ent/testsession"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionAnswerCreate is the builder for creating a TestQuestionAnswer entity.
type TestQuestionAnswerCreate struct {
	config
	mutation *TestQuestionAnswerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tqac *TestQuestionAnswerCreate) SetCreatedAt(t time.Time) *TestQuestionAnswerCreate {
	tqac.mutation.SetCreatedAt(t)
	return tqac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqac *TestQuestionAnswerCreate) SetNillableCreatedAt(t *time.Time) *TestQuestionAnswerCreate {
	if t != nil {
		tqac.SetCreatedAt(*t)
	}
	return tqac
}

// SetUpdatedAt sets the "updated_at" field.
func (tqac *TestQuestionAnswerCreate) SetUpdatedAt(t time.Time) *TestQuestionAnswerCreate {
	tqac.mutation.SetUpdatedAt(t)
	return tqac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqac *TestQuestionAnswerCreate) SetNillableUpdatedAt(t *time.Time) *TestQuestionAnswerCreate {
	if t != nil {
		tqac.SetUpdatedAt(*t)
	}
	return tqac
}

// SetDeletedAt sets the "deleted_at" field.
func (tqac *TestQuestionAnswerCreate) SetDeletedAt(t time.Time) *TestQuestionAnswerCreate {
	tqac.mutation.SetDeletedAt(t)
	return tqac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqac *TestQuestionAnswerCreate) SetNillableDeletedAt(t *time.Time) *TestQuestionAnswerCreate {
	if t != nil {
		tqac.SetDeletedAt(*t)
	}
	return tqac
}

// SetUserID sets the "user_id" field.
func (tqac *TestQuestionAnswerCreate) SetUserID(u uuid.UUID) *TestQuestionAnswerCreate {
	tqac.mutation.SetUserID(u)
	return tqac
}

// SetQuestionID sets the "question_id" field.
func (tqac *TestQuestionAnswerCreate) SetQuestionID(u uuid.UUID) *TestQuestionAnswerCreate {
	tqac.mutation.SetQuestionID(u)
	return tqac
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (tqac *TestQuestionAnswerCreate) SetSelectedOptionID(u uuid.UUID) *TestQuestionAnswerCreate {
	tqac.mutation.SetSelectedOptionID(u)
	return tqac
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (tqac *TestQuestionAnswerCreate) SetNillableSelectedOptionID(u *uuid.UUID) *TestQuestionAnswerCreate {
	if u != nil {
		tqac.SetSelectedOptionID(*u)
	}
	return tqac
}

// SetSessionID sets the "session_id" field.
func (tqac *TestQuestionAnswerCreate) SetSessionID(u uuid.UUID) *TestQuestionAnswerCreate {
	tqac.mutation.SetSessionID(u)
	return tqac
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (tqac *TestQuestionAnswerCreate) SetSelectedOptionText(s string) *TestQuestionAnswerCreate {
	tqac.mutation.SetSelectedOptionText(s)
	return tqac
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (tqac *TestQuestionAnswerCreate) SetNillableSelectedOptionText(s *string) *TestQuestionAnswerCreate {
	if s != nil {
		tqac.SetSelectedOptionText(*s)
	}
	return tqac
}

// SetID sets the "id" field.
func (tqac *TestQuestionAnswerCreate) SetID(u uuid.UUID) *TestQuestionAnswerCreate {
	tqac.mutation.SetID(u)
	return tqac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tqac *TestQuestionAnswerCreate) SetNillableID(u *uuid.UUID) *TestQuestionAnswerCreate {
	if u != nil {
		tqac.SetID(*u)
	}
	return tqac
}

// SetUser sets the "user" edge to the User entity.
func (tqac *TestQuestionAnswerCreate) SetUser(u *User) *TestQuestionAnswerCreate {
	return tqac.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqac *TestQuestionAnswerCreate) SetQuestion(q *Question) *TestQuestionAnswerCreate {
	return tqac.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (tqac *TestQuestionAnswerCreate) SetSelectedOption(q *QuestionOption) *TestQuestionAnswerCreate {
	return tqac.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (tqac *TestQuestionAnswerCreate) SetTestSessionID(id uuid.UUID) *TestQuestionAnswerCreate {
	tqac.mutation.SetTestSessionID(id)
	return tqac
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (tqac *TestQuestionAnswerCreate) SetTestSession(t *TestSession) *TestQuestionAnswerCreate {
	return tqac.SetTestSessionID(t.ID)
}

// Mutation returns the TestQuestionAnswerMutation object of the builder.
func (tqac *TestQuestionAnswerCreate) Mutation() *TestQuestionAnswerMutation {
	return tqac.mutation
}

// Save creates the TestQuestionAnswer in the database.
func (tqac *TestQuestionAnswerCreate) Save(ctx context.Context) (*TestQuestionAnswer, error) {
	if err := tqac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tqac.sqlSave, tqac.mutation, tqac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tqac *TestQuestionAnswerCreate) SaveX(ctx context.Context) *TestQuestionAnswer {
	v, err := tqac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqac *TestQuestionAnswerCreate) Exec(ctx context.Context) error {
	_, err := tqac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqac *TestQuestionAnswerCreate) ExecX(ctx context.Context) {
	if err := tqac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqac *TestQuestionAnswerCreate) defaults() error {
	if _, ok := tqac.mutation.CreatedAt(); !ok {
		if testquestionanswer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionanswer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionanswer.DefaultCreatedAt()
		tqac.mutation.SetCreatedAt(v)
	}
	if _, ok := tqac.mutation.UpdatedAt(); !ok {
		if testquestionanswer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionanswer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionanswer.DefaultUpdatedAt()
		tqac.mutation.SetUpdatedAt(v)
	}
	if _, ok := tqac.mutation.ID(); !ok {
		if testquestionanswer.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testquestionanswer.DefaultID (forgotten import ent/runtime?)")
		}
		v := testquestionanswer.DefaultID()
		tqac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqac *TestQuestionAnswerCreate) check() error {
	if _, ok := tqac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestQuestionAnswer.created_at"`)}
	}
	if _, ok := tqac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestQuestionAnswer.updated_at"`)}
	}
	if _, ok := tqac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TestQuestionAnswer.user_id"`)}
	}
	if _, ok := tqac.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "TestQuestionAnswer.question_id"`)}
	}
	if _, ok := tqac.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "TestQuestionAnswer.session_id"`)}
	}
	if len(tqac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TestQuestionAnswer.user"`)}
	}
	if len(tqac.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "TestQuestionAnswer.question"`)}
	}
	if len(tqac.mutation.TestSessionIDs()) == 0 {
		return &ValidationError{Name: "test_session", err: errors.New(`ent: missing required edge "TestQuestionAnswer.test_session"`)}
	}
	return nil
}

func (tqac *TestQuestionAnswerCreate) sqlSave(ctx context.Context) (*TestQuestionAnswer, error) {
	if err := tqac.check(); err != nil {
		return nil, err
	}
	_node, _spec := tqac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tqac.mutation.id = &_node.ID
	tqac.mutation.done = true
	return _node, nil
}

func (tqac *TestQuestionAnswerCreate) createSpec() (*TestQuestionAnswer, *sqlgraph.CreateSpec) {
	var (
		_node = &TestQuestionAnswer{config: tqac.config}
		_spec = sqlgraph.NewCreateSpec(testquestionanswer.Table, sqlgraph.NewFieldSpec(testquestionanswer.FieldID, field.TypeUUID))
	)
	if id, ok := tqac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tqac.mutation.CreatedAt(); ok {
		_spec.SetField(testquestionanswer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tqac.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestionanswer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tqac.mutation.DeletedAt(); ok {
		_spec.SetField(testquestionanswer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tqac.mutation.SelectedOptionText(); ok {
		_spec.SetField(testquestionanswer.FieldSelectedOptionText, field.TypeString, value)
		_node.SelectedOptionText = &value
	}
	if nodes := tqac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.UserTable,
			Columns: []string{testquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqac.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.QuestionTable,
			Columns: []string{testquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqac.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.SelectedOptionTable,
			Columns: []string{testquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SelectedOptionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tqac.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.TestSessionTable,
			Columns: []string{testquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SessionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestQuestionAnswerCreateBulk is the builder for creating many TestQuestionAnswer entities in bulk.
type TestQuestionAnswerCreateBulk struct {
	config
	err      error
	builders []*TestQuestionAnswerCreate
}

// Save creates the TestQuestionAnswer entities in the database.
func (tqacb *TestQuestionAnswerCreateBulk) Save(ctx context.Context) ([]*TestQuestionAnswer, error) {
	if tqacb.err != nil {
		return nil, tqacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tqacb.builders))
	nodes := make([]*TestQuestionAnswer, len(tqacb.builders))
	mutators := make([]Mutator, len(tqacb.builders))
	for i := range tqacb.builders {
		func(i int, root context.Context) {
			builder := tqacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestQuestionAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqacb *TestQuestionAnswerCreateBulk) SaveX(ctx context.Context) []*TestQuestionAnswer {
	v, err := tqacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqacb *TestQuestionAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := tqacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqacb *TestQuestionAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := tqacb.Exec(ctx); err != nil {
		panic(err)
	}
}
