// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/coursesession"
	"template/internal/ent/user"
	"template/internal/ent/userquestionanswer"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseSessionCreate is the builder for creating a CourseSession entity.
type CourseSessionCreate struct {
	config
	mutation *CourseSessionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (csc *CourseSessionCreate) SetCreatedAt(t time.Time) *CourseSessionCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableCreatedAt(t *time.Time) *CourseSessionCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CourseSessionCreate) SetUpdatedAt(t time.Time) *CourseSessionCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableUpdatedAt(t *time.Time) *CourseSessionCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetDeletedAt sets the "deleted_at" field.
func (csc *CourseSessionCreate) SetDeletedAt(t time.Time) *CourseSessionCreate {
	csc.mutation.SetDeletedAt(t)
	return csc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableDeletedAt(t *time.Time) *CourseSessionCreate {
	if t != nil {
		csc.SetDeletedAt(*t)
	}
	return csc
}

// SetUserID sets the "user_id" field.
func (csc *CourseSessionCreate) SetUserID(u uuid.UUID) *CourseSessionCreate {
	csc.mutation.SetUserID(u)
	return csc
}

// SetCourseSectionID sets the "course_section_id" field.
func (csc *CourseSessionCreate) SetCourseSectionID(u uuid.UUID) *CourseSessionCreate {
	csc.mutation.SetCourseSectionID(u)
	return csc
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableCourseSectionID(u *uuid.UUID) *CourseSessionCreate {
	if u != nil {
		csc.SetCourseSectionID(*u)
	}
	return csc
}

// SetCompletedAt sets the "completed_at" field.
func (csc *CourseSessionCreate) SetCompletedAt(t time.Time) *CourseSessionCreate {
	csc.mutation.SetCompletedAt(t)
	return csc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableCompletedAt(t *time.Time) *CourseSessionCreate {
	if t != nil {
		csc.SetCompletedAt(*t)
	}
	return csc
}

// SetTotalScore sets the "total_score" field.
func (csc *CourseSessionCreate) SetTotalScore(i int) *CourseSessionCreate {
	csc.mutation.SetTotalScore(i)
	return csc
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableTotalScore(i *int) *CourseSessionCreate {
	if i != nil {
		csc.SetTotalScore(*i)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CourseSessionCreate) SetID(u uuid.UUID) *CourseSessionCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *CourseSessionCreate) SetNillableID(u *uuid.UUID) *CourseSessionCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// SetUser sets the "user" edge to the User entity.
func (csc *CourseSessionCreate) SetUser(u *User) *CourseSessionCreate {
	return csc.SetUserID(u.ID)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (csc *CourseSessionCreate) SetCourseSection(c *CourseSection) *CourseSessionCreate {
	return csc.SetCourseSectionID(c.ID)
}

// AddUserQuestionAnswerIDs adds the "user_question_answers" edge to the UserQuestionAnswer entity by IDs.
func (csc *CourseSessionCreate) AddUserQuestionAnswerIDs(ids ...uuid.UUID) *CourseSessionCreate {
	csc.mutation.AddUserQuestionAnswerIDs(ids...)
	return csc
}

// AddUserQuestionAnswers adds the "user_question_answers" edges to the UserQuestionAnswer entity.
func (csc *CourseSessionCreate) AddUserQuestionAnswers(u ...*UserQuestionAnswer) *CourseSessionCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csc.AddUserQuestionAnswerIDs(ids...)
}

// Mutation returns the CourseSessionMutation object of the builder.
func (csc *CourseSessionCreate) Mutation() *CourseSessionMutation {
	return csc.mutation
}

// Save creates the CourseSession in the database.
func (csc *CourseSessionCreate) Save(ctx context.Context) (*CourseSession, error) {
	if err := csc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CourseSessionCreate) SaveX(ctx context.Context) *CourseSession {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CourseSessionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CourseSessionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CourseSessionCreate) defaults() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		if coursesession.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coursesession.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coursesession.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		if coursesession.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coursesession.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coursesession.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csc.mutation.TotalScore(); !ok {
		v := coursesession.DefaultTotalScore
		csc.mutation.SetTotalScore(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		if coursesession.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized coursesession.DefaultID (forgotten import ent/runtime?)")
		}
		v := coursesession.DefaultID()
		csc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csc *CourseSessionCreate) check() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CourseSession.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CourseSession.updated_at"`)}
	}
	if _, ok := csc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CourseSession.user_id"`)}
	}
	if _, ok := csc.mutation.TotalScore(); !ok {
		return &ValidationError{Name: "total_score", err: errors.New(`ent: missing required field "CourseSession.total_score"`)}
	}
	if len(csc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "CourseSession.user"`)}
	}
	return nil
}

func (csc *CourseSessionCreate) sqlSave(ctx context.Context) (*CourseSession, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CourseSessionCreate) createSpec() (*CourseSession, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseSession{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(coursesession.Table, sqlgraph.NewFieldSpec(coursesession.FieldID, field.TypeUUID))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(coursesession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(coursesession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.DeletedAt(); ok {
		_spec.SetField(coursesession.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := csc.mutation.CompletedAt(); ok {
		_spec.SetField(coursesession.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := csc.mutation.TotalScore(); ok {
		_spec.SetField(coursesession.FieldTotalScore, field.TypeInt, value)
		_node.TotalScore = value
	}
	if nodes := csc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.UserTable,
			Columns: []string{coursesession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.CourseSectionTable,
			Columns: []string{coursesession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseSectionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.UserQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseSessionCreateBulk is the builder for creating many CourseSession entities in bulk.
type CourseSessionCreateBulk struct {
	config
	err      error
	builders []*CourseSessionCreate
}

// Save creates the CourseSession entities in the database.
func (cscb *CourseSessionCreateBulk) Save(ctx context.Context) ([]*CourseSession, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CourseSession, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CourseSessionCreateBulk) SaveX(ctx context.Context) []*CourseSession {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CourseSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CourseSessionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
