// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// QuestionOption is the model entity for the QuestionOption schema.
type QuestionOption struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID uuid.UUID `json:"question_id,omitempty"`
	// OptionText holds the value of the "option_text" field.
	OptionText string `json:"option_text,omitempty"`
	// IsCorrect holds the value of the "is_correct" field.
	IsCorrect bool `json:"is_correct,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionOptionQuery when eager-loading is set.
	Edges        QuestionOptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionOptionEdges holds the relations/edges for other nodes in the graph.
type QuestionOptionEdges struct {
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// UserQuestionAnswers holds the value of the user_question_answers edge.
	UserQuestionAnswers []*TestQuestionAnswer `json:"user_question_answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionOptionEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// UserQuestionAnswersOrErr returns the UserQuestionAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionOptionEdges) UserQuestionAnswersOrErr() ([]*TestQuestionAnswer, error) {
	if e.loadedTypes[1] {
		return e.UserQuestionAnswers, nil
	}
	return nil, &NotLoadedError{edge: "user_question_answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionoption.FieldIsCorrect:
			values[i] = new(sql.NullBool)
		case questionoption.FieldOptionText:
			values[i] = new(sql.NullString)
		case questionoption.FieldCreatedAt, questionoption.FieldUpdatedAt, questionoption.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case questionoption.FieldID, questionoption.FieldQuestionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionOption fields.
func (qo *QuestionOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionoption.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				qo.ID = *value
			}
		case questionoption.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qo.CreatedAt = value.Time
			}
		case questionoption.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				qo.UpdatedAt = value.Time
			}
		case questionoption.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				qo.DeletedAt = new(time.Time)
				*qo.DeletedAt = value.Time
			}
		case questionoption.FieldQuestionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value != nil {
				qo.QuestionID = *value
			}
		case questionoption.FieldOptionText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field option_text", values[i])
			} else if value.Valid {
				qo.OptionText = value.String
			}
		case questionoption.FieldIsCorrect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_correct", values[i])
			} else if value.Valid {
				qo.IsCorrect = value.Bool
			}
		default:
			qo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QuestionOption.
// This includes values selected through modifiers, order, etc.
func (qo *QuestionOption) Value(name string) (ent.Value, error) {
	return qo.selectValues.Get(name)
}

// QueryQuestion queries the "question" edge of the QuestionOption entity.
func (qo *QuestionOption) QueryQuestion() *QuestionQuery {
	return NewQuestionOptionClient(qo.config).QueryQuestion(qo)
}

// QueryUserQuestionAnswers queries the "user_question_answers" edge of the QuestionOption entity.
func (qo *QuestionOption) QueryUserQuestionAnswers() *TestQuestionAnswerQuery {
	return NewQuestionOptionClient(qo.config).QueryUserQuestionAnswers(qo)
}

// Update returns a builder for updating this QuestionOption.
// Note that you need to call QuestionOption.Unwrap() before calling this method if this QuestionOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (qo *QuestionOption) Update() *QuestionOptionUpdateOne {
	return NewQuestionOptionClient(qo.config).UpdateOne(qo)
}

// Unwrap unwraps the QuestionOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qo *QuestionOption) Unwrap() *QuestionOption {
	_tx, ok := qo.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionOption is not a transactional entity")
	}
	qo.config.driver = _tx.drv
	return qo
}

// String implements the fmt.Stringer.
func (qo *QuestionOption) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qo.ID))
	builder.WriteString("created_at=")
	builder.WriteString(qo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(qo.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := qo.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", qo.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("option_text=")
	builder.WriteString(qo.OptionText)
	builder.WriteString(", ")
	builder.WriteString("is_correct=")
	builder.WriteString(fmt.Sprintf("%v", qo.IsCorrect))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionOptions is a parsable slice of QuestionOption.
type QuestionOptions []*QuestionOption
