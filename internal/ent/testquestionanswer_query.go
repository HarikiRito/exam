// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testquestionanswer"
	"template/internal/ent/testsession"
	"template/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionAnswerQuery is the builder for querying TestQuestionAnswer entities.
type TestQuestionAnswerQuery struct {
	config
	ctx                *QueryContext
	order              []testquestionanswer.OrderOption
	inters             []Interceptor
	predicates         []predicate.TestQuestionAnswer
	withUser           *UserQuery
	withQuestion       *QuestionQuery
	withSelectedOption *QuestionOptionQuery
	withTestSession    *TestSessionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestQuestionAnswerQuery builder.
func (tqaq *TestQuestionAnswerQuery) Where(ps ...predicate.TestQuestionAnswer) *TestQuestionAnswerQuery {
	tqaq.predicates = append(tqaq.predicates, ps...)
	return tqaq
}

// Limit the number of records to be returned by this query.
func (tqaq *TestQuestionAnswerQuery) Limit(limit int) *TestQuestionAnswerQuery {
	tqaq.ctx.Limit = &limit
	return tqaq
}

// Offset to start from.
func (tqaq *TestQuestionAnswerQuery) Offset(offset int) *TestQuestionAnswerQuery {
	tqaq.ctx.Offset = &offset
	return tqaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tqaq *TestQuestionAnswerQuery) Unique(unique bool) *TestQuestionAnswerQuery {
	tqaq.ctx.Unique = &unique
	return tqaq
}

// Order specifies how the records should be ordered.
func (tqaq *TestQuestionAnswerQuery) Order(o ...testquestionanswer.OrderOption) *TestQuestionAnswerQuery {
	tqaq.order = append(tqaq.order, o...)
	return tqaq
}

// QueryUser chains the current query on the "user" edge.
func (tqaq *TestQuestionAnswerQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: tqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testquestionanswer.Table, testquestionanswer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testquestionanswer.UserTable, testquestionanswer.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (tqaq *TestQuestionAnswerQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: tqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testquestionanswer.Table, testquestionanswer.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testquestionanswer.QuestionTable, testquestionanswer.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySelectedOption chains the current query on the "selected_option" edge.
func (tqaq *TestQuestionAnswerQuery) QuerySelectedOption() *QuestionOptionQuery {
	query := (&QuestionOptionClient{config: tqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testquestionanswer.Table, testquestionanswer.FieldID, selector),
			sqlgraph.To(questionoption.Table, questionoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testquestionanswer.SelectedOptionTable, testquestionanswer.SelectedOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestSession chains the current query on the "test_session" edge.
func (tqaq *TestQuestionAnswerQuery) QueryTestSession() *TestSessionQuery {
	query := (&TestSessionClient{config: tqaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tqaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tqaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testquestionanswer.Table, testquestionanswer.FieldID, selector),
			sqlgraph.To(testsession.Table, testsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testquestionanswer.TestSessionTable, testquestionanswer.TestSessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tqaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TestQuestionAnswer entity from the query.
// Returns a *NotFoundError when no TestQuestionAnswer was found.
func (tqaq *TestQuestionAnswerQuery) First(ctx context.Context) (*TestQuestionAnswer, error) {
	nodes, err := tqaq.Limit(1).All(setContextOp(ctx, tqaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{testquestionanswer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) FirstX(ctx context.Context) *TestQuestionAnswer {
	node, err := tqaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TestQuestionAnswer ID from the query.
// Returns a *NotFoundError when no TestQuestionAnswer ID was found.
func (tqaq *TestQuestionAnswerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tqaq.Limit(1).IDs(setContextOp(ctx, tqaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{testquestionanswer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tqaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TestQuestionAnswer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TestQuestionAnswer entity is found.
// Returns a *NotFoundError when no TestQuestionAnswer entities are found.
func (tqaq *TestQuestionAnswerQuery) Only(ctx context.Context) (*TestQuestionAnswer, error) {
	nodes, err := tqaq.Limit(2).All(setContextOp(ctx, tqaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{testquestionanswer.Label}
	default:
		return nil, &NotSingularError{testquestionanswer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) OnlyX(ctx context.Context) *TestQuestionAnswer {
	node, err := tqaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TestQuestionAnswer ID in the query.
// Returns a *NotSingularError when more than one TestQuestionAnswer ID is found.
// Returns a *NotFoundError when no entities are found.
func (tqaq *TestQuestionAnswerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tqaq.Limit(2).IDs(setContextOp(ctx, tqaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{testquestionanswer.Label}
	default:
		err = &NotSingularError{testquestionanswer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tqaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TestQuestionAnswers.
func (tqaq *TestQuestionAnswerQuery) All(ctx context.Context) ([]*TestQuestionAnswer, error) {
	ctx = setContextOp(ctx, tqaq.ctx, ent.OpQueryAll)
	if err := tqaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TestQuestionAnswer, *TestQuestionAnswerQuery]()
	return withInterceptors[[]*TestQuestionAnswer](ctx, tqaq, qr, tqaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) AllX(ctx context.Context) []*TestQuestionAnswer {
	nodes, err := tqaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TestQuestionAnswer IDs.
func (tqaq *TestQuestionAnswerQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tqaq.ctx.Unique == nil && tqaq.path != nil {
		tqaq.Unique(true)
	}
	ctx = setContextOp(ctx, tqaq.ctx, ent.OpQueryIDs)
	if err = tqaq.Select(testquestionanswer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tqaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tqaq *TestQuestionAnswerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tqaq.ctx, ent.OpQueryCount)
	if err := tqaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tqaq, querierCount[*TestQuestionAnswerQuery](), tqaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) CountX(ctx context.Context) int {
	count, err := tqaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tqaq *TestQuestionAnswerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tqaq.ctx, ent.OpQueryExist)
	switch _, err := tqaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tqaq *TestQuestionAnswerQuery) ExistX(ctx context.Context) bool {
	exist, err := tqaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestQuestionAnswerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tqaq *TestQuestionAnswerQuery) Clone() *TestQuestionAnswerQuery {
	if tqaq == nil {
		return nil
	}
	return &TestQuestionAnswerQuery{
		config:             tqaq.config,
		ctx:                tqaq.ctx.Clone(),
		order:              append([]testquestionanswer.OrderOption{}, tqaq.order...),
		inters:             append([]Interceptor{}, tqaq.inters...),
		predicates:         append([]predicate.TestQuestionAnswer{}, tqaq.predicates...),
		withUser:           tqaq.withUser.Clone(),
		withQuestion:       tqaq.withQuestion.Clone(),
		withSelectedOption: tqaq.withSelectedOption.Clone(),
		withTestSession:    tqaq.withTestSession.Clone(),
		// clone intermediate query.
		sql:  tqaq.sql.Clone(),
		path: tqaq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (tqaq *TestQuestionAnswerQuery) WithUser(opts ...func(*UserQuery)) *TestQuestionAnswerQuery {
	query := (&UserClient{config: tqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tqaq.withUser = query
	return tqaq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (tqaq *TestQuestionAnswerQuery) WithQuestion(opts ...func(*QuestionQuery)) *TestQuestionAnswerQuery {
	query := (&QuestionClient{config: tqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tqaq.withQuestion = query
	return tqaq
}

// WithSelectedOption tells the query-builder to eager-load the nodes that are connected to
// the "selected_option" edge. The optional arguments are used to configure the query builder of the edge.
func (tqaq *TestQuestionAnswerQuery) WithSelectedOption(opts ...func(*QuestionOptionQuery)) *TestQuestionAnswerQuery {
	query := (&QuestionOptionClient{config: tqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tqaq.withSelectedOption = query
	return tqaq
}

// WithTestSession tells the query-builder to eager-load the nodes that are connected to
// the "test_session" edge. The optional arguments are used to configure the query builder of the edge.
func (tqaq *TestQuestionAnswerQuery) WithTestSession(opts ...func(*TestSessionQuery)) *TestQuestionAnswerQuery {
	query := (&TestSessionClient{config: tqaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tqaq.withTestSession = query
	return tqaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TestQuestionAnswer.Query().
//		GroupBy(testquestionanswer.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tqaq *TestQuestionAnswerQuery) GroupBy(field string, fields ...string) *TestQuestionAnswerGroupBy {
	tqaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestQuestionAnswerGroupBy{build: tqaq}
	grbuild.flds = &tqaq.ctx.Fields
	grbuild.label = testquestionanswer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TestQuestionAnswer.Query().
//		Select(testquestionanswer.FieldCreatedAt).
//		Scan(ctx, &v)
func (tqaq *TestQuestionAnswerQuery) Select(fields ...string) *TestQuestionAnswerSelect {
	tqaq.ctx.Fields = append(tqaq.ctx.Fields, fields...)
	sbuild := &TestQuestionAnswerSelect{TestQuestionAnswerQuery: tqaq}
	sbuild.label = testquestionanswer.Label
	sbuild.flds, sbuild.scan = &tqaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestQuestionAnswerSelect configured with the given aggregations.
func (tqaq *TestQuestionAnswerQuery) Aggregate(fns ...AggregateFunc) *TestQuestionAnswerSelect {
	return tqaq.Select().Aggregate(fns...)
}

func (tqaq *TestQuestionAnswerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tqaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tqaq); err != nil {
				return err
			}
		}
	}
	for _, f := range tqaq.ctx.Fields {
		if !testquestionanswer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tqaq.path != nil {
		prev, err := tqaq.path(ctx)
		if err != nil {
			return err
		}
		tqaq.sql = prev
	}
	return nil
}

func (tqaq *TestQuestionAnswerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TestQuestionAnswer, error) {
	var (
		nodes       = []*TestQuestionAnswer{}
		_spec       = tqaq.querySpec()
		loadedTypes = [4]bool{
			tqaq.withUser != nil,
			tqaq.withQuestion != nil,
			tqaq.withSelectedOption != nil,
			tqaq.withTestSession != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TestQuestionAnswer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TestQuestionAnswer{config: tqaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tqaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tqaq.withUser; query != nil {
		if err := tqaq.loadUser(ctx, query, nodes, nil,
			func(n *TestQuestionAnswer, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := tqaq.withQuestion; query != nil {
		if err := tqaq.loadQuestion(ctx, query, nodes, nil,
			func(n *TestQuestionAnswer, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	if query := tqaq.withSelectedOption; query != nil {
		if err := tqaq.loadSelectedOption(ctx, query, nodes, nil,
			func(n *TestQuestionAnswer, e *QuestionOption) { n.Edges.SelectedOption = e }); err != nil {
			return nil, err
		}
	}
	if query := tqaq.withTestSession; query != nil {
		if err := tqaq.loadTestSession(ctx, query, nodes, nil,
			func(n *TestQuestionAnswer, e *TestSession) { n.Edges.TestSession = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tqaq *TestQuestionAnswerQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*TestQuestionAnswer, init func(*TestQuestionAnswer), assign func(*TestQuestionAnswer, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestQuestionAnswer)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tqaq *TestQuestionAnswerQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*TestQuestionAnswer, init func(*TestQuestionAnswer), assign func(*TestQuestionAnswer, *Question)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestQuestionAnswer)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tqaq *TestQuestionAnswerQuery) loadSelectedOption(ctx context.Context, query *QuestionOptionQuery, nodes []*TestQuestionAnswer, init func(*TestQuestionAnswer), assign func(*TestQuestionAnswer, *QuestionOption)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestQuestionAnswer)
	for i := range nodes {
		if nodes[i].SelectedOptionID == nil {
			continue
		}
		fk := *nodes[i].SelectedOptionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(questionoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "selected_option_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tqaq *TestQuestionAnswerQuery) loadTestSession(ctx context.Context, query *TestSessionQuery, nodes []*TestQuestionAnswer, init func(*TestQuestionAnswer), assign func(*TestQuestionAnswer, *TestSession)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TestQuestionAnswer)
	for i := range nodes {
		fk := nodes[i].SessionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(testsession.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "session_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tqaq *TestQuestionAnswerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tqaq.querySpec()
	_spec.Node.Columns = tqaq.ctx.Fields
	if len(tqaq.ctx.Fields) > 0 {
		_spec.Unique = tqaq.ctx.Unique != nil && *tqaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tqaq.driver, _spec)
}

func (tqaq *TestQuestionAnswerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(testquestionanswer.Table, testquestionanswer.Columns, sqlgraph.NewFieldSpec(testquestionanswer.FieldID, field.TypeUUID))
	_spec.From = tqaq.sql
	if unique := tqaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tqaq.path != nil {
		_spec.Unique = true
	}
	if fields := tqaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testquestionanswer.FieldID)
		for i := range fields {
			if fields[i] != testquestionanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tqaq.withUser != nil {
			_spec.Node.AddColumnOnce(testquestionanswer.FieldUserID)
		}
		if tqaq.withQuestion != nil {
			_spec.Node.AddColumnOnce(testquestionanswer.FieldQuestionID)
		}
		if tqaq.withSelectedOption != nil {
			_spec.Node.AddColumnOnce(testquestionanswer.FieldSelectedOptionID)
		}
		if tqaq.withTestSession != nil {
			_spec.Node.AddColumnOnce(testquestionanswer.FieldSessionID)
		}
	}
	if ps := tqaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tqaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tqaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tqaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tqaq *TestQuestionAnswerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tqaq.driver.Dialect())
	t1 := builder.Table(testquestionanswer.Table)
	columns := tqaq.ctx.Fields
	if len(columns) == 0 {
		columns = testquestionanswer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tqaq.sql != nil {
		selector = tqaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tqaq.ctx.Unique != nil && *tqaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tqaq.predicates {
		p(selector)
	}
	for _, p := range tqaq.order {
		p(selector)
	}
	if offset := tqaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tqaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestQuestionAnswerGroupBy is the group-by builder for TestQuestionAnswer entities.
type TestQuestionAnswerGroupBy struct {
	selector
	build *TestQuestionAnswerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tqagb *TestQuestionAnswerGroupBy) Aggregate(fns ...AggregateFunc) *TestQuestionAnswerGroupBy {
	tqagb.fns = append(tqagb.fns, fns...)
	return tqagb
}

// Scan applies the selector query and scans the result into the given value.
func (tqagb *TestQuestionAnswerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tqagb.build.ctx, ent.OpQueryGroupBy)
	if err := tqagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestQuestionAnswerQuery, *TestQuestionAnswerGroupBy](ctx, tqagb.build, tqagb, tqagb.build.inters, v)
}

func (tqagb *TestQuestionAnswerGroupBy) sqlScan(ctx context.Context, root *TestQuestionAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tqagb.fns))
	for _, fn := range tqagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tqagb.flds)+len(tqagb.fns))
		for _, f := range *tqagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tqagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tqagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestQuestionAnswerSelect is the builder for selecting fields of TestQuestionAnswer entities.
type TestQuestionAnswerSelect struct {
	*TestQuestionAnswerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tqas *TestQuestionAnswerSelect) Aggregate(fns ...AggregateFunc) *TestQuestionAnswerSelect {
	tqas.fns = append(tqas.fns, fns...)
	return tqas
}

// Scan applies the selector query and scans the result into the given value.
func (tqas *TestQuestionAnswerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tqas.ctx, ent.OpQuerySelect)
	if err := tqas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestQuestionAnswerQuery, *TestQuestionAnswerSelect](ctx, tqas.TestQuestionAnswerQuery, tqas, tqas.inters, v)
}

func (tqas *TestQuestionAnswerSelect) sqlScan(ctx context.Context, root *TestQuestionAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tqas.fns))
	for _, fn := range tqas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tqas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tqas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
