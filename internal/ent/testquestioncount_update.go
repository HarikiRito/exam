// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/test"
	"template/internal/ent/testquestioncount"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionCountUpdate is the builder for updating TestQuestionCount entities.
type TestQuestionCountUpdate struct {
	config
	hooks    []Hook
	mutation *TestQuestionCountMutation
}

// Where appends a list predicates to the TestQuestionCountUpdate builder.
func (tqcu *TestQuestionCountUpdate) Where(ps ...predicate.TestQuestionCount) *TestQuestionCountUpdate {
	tqcu.mutation.Where(ps...)
	return tqcu
}

// SetCreatedAt sets the "created_at" field.
func (tqcu *TestQuestionCountUpdate) SetCreatedAt(t time.Time) *TestQuestionCountUpdate {
	tqcu.mutation.SetCreatedAt(t)
	return tqcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqcu *TestQuestionCountUpdate) SetNillableCreatedAt(t *time.Time) *TestQuestionCountUpdate {
	if t != nil {
		tqcu.SetCreatedAt(*t)
	}
	return tqcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqcu *TestQuestionCountUpdate) SetUpdatedAt(t time.Time) *TestQuestionCountUpdate {
	tqcu.mutation.SetUpdatedAt(t)
	return tqcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tqcu *TestQuestionCountUpdate) SetDeletedAt(t time.Time) *TestQuestionCountUpdate {
	tqcu.mutation.SetDeletedAt(t)
	return tqcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqcu *TestQuestionCountUpdate) SetNillableDeletedAt(t *time.Time) *TestQuestionCountUpdate {
	if t != nil {
		tqcu.SetDeletedAt(*t)
	}
	return tqcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqcu *TestQuestionCountUpdate) ClearDeletedAt() *TestQuestionCountUpdate {
	tqcu.mutation.ClearDeletedAt()
	return tqcu
}

// SetTestID sets the "test_id" field.
func (tqcu *TestQuestionCountUpdate) SetTestID(u uuid.UUID) *TestQuestionCountUpdate {
	tqcu.mutation.SetTestID(u)
	return tqcu
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tqcu *TestQuestionCountUpdate) SetNillableTestID(u *uuid.UUID) *TestQuestionCountUpdate {
	if u != nil {
		tqcu.SetTestID(*u)
	}
	return tqcu
}

// SetNumberOfQuestions sets the "number_of_questions" field.
func (tqcu *TestQuestionCountUpdate) SetNumberOfQuestions(i int) *TestQuestionCountUpdate {
	tqcu.mutation.ResetNumberOfQuestions()
	tqcu.mutation.SetNumberOfQuestions(i)
	return tqcu
}

// SetNillableNumberOfQuestions sets the "number_of_questions" field if the given value is not nil.
func (tqcu *TestQuestionCountUpdate) SetNillableNumberOfQuestions(i *int) *TestQuestionCountUpdate {
	if i != nil {
		tqcu.SetNumberOfQuestions(*i)
	}
	return tqcu
}

// AddNumberOfQuestions adds i to the "number_of_questions" field.
func (tqcu *TestQuestionCountUpdate) AddNumberOfQuestions(i int) *TestQuestionCountUpdate {
	tqcu.mutation.AddNumberOfQuestions(i)
	return tqcu
}

// SetPoints sets the "points" field.
func (tqcu *TestQuestionCountUpdate) SetPoints(i int) *TestQuestionCountUpdate {
	tqcu.mutation.ResetPoints()
	tqcu.mutation.SetPoints(i)
	return tqcu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (tqcu *TestQuestionCountUpdate) SetNillablePoints(i *int) *TestQuestionCountUpdate {
	if i != nil {
		tqcu.SetPoints(*i)
	}
	return tqcu
}

// AddPoints adds i to the "points" field.
func (tqcu *TestQuestionCountUpdate) AddPoints(i int) *TestQuestionCountUpdate {
	tqcu.mutation.AddPoints(i)
	return tqcu
}

// SetTest sets the "test" edge to the Test entity.
func (tqcu *TestQuestionCountUpdate) SetTest(t *Test) *TestQuestionCountUpdate {
	return tqcu.SetTestID(t.ID)
}

// Mutation returns the TestQuestionCountMutation object of the builder.
func (tqcu *TestQuestionCountUpdate) Mutation() *TestQuestionCountMutation {
	return tqcu.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tqcu *TestQuestionCountUpdate) ClearTest() *TestQuestionCountUpdate {
	tqcu.mutation.ClearTest()
	return tqcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqcu *TestQuestionCountUpdate) Save(ctx context.Context) (int, error) {
	if err := tqcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tqcu.sqlSave, tqcu.mutation, tqcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqcu *TestQuestionCountUpdate) SaveX(ctx context.Context) int {
	affected, err := tqcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqcu *TestQuestionCountUpdate) Exec(ctx context.Context) error {
	_, err := tqcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqcu *TestQuestionCountUpdate) ExecX(ctx context.Context) {
	if err := tqcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqcu *TestQuestionCountUpdate) defaults() error {
	if _, ok := tqcu.mutation.UpdatedAt(); !ok {
		if testquestioncount.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestioncount.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestioncount.UpdateDefaultUpdatedAt()
		tqcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqcu *TestQuestionCountUpdate) check() error {
	if tqcu.mutation.TestCleared() && len(tqcu.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionCount.test"`)
	}
	return nil
}

func (tqcu *TestQuestionCountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tqcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testquestioncount.Table, testquestioncount.Columns, sqlgraph.NewFieldSpec(testquestioncount.FieldID, field.TypeUUID))
	if ps := tqcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqcu.mutation.CreatedAt(); ok {
		_spec.SetField(testquestioncount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tqcu.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestioncount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tqcu.mutation.DeletedAt(); ok {
		_spec.SetField(testquestioncount.FieldDeletedAt, field.TypeTime, value)
	}
	if tqcu.mutation.DeletedAtCleared() {
		_spec.ClearField(testquestioncount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tqcu.mutation.NumberOfQuestions(); ok {
		_spec.SetField(testquestioncount.FieldNumberOfQuestions, field.TypeInt, value)
	}
	if value, ok := tqcu.mutation.AddedNumberOfQuestions(); ok {
		_spec.AddField(testquestioncount.FieldNumberOfQuestions, field.TypeInt, value)
	}
	if value, ok := tqcu.mutation.Points(); ok {
		_spec.SetField(testquestioncount.FieldPoints, field.TypeInt, value)
	}
	if value, ok := tqcu.mutation.AddedPoints(); ok {
		_spec.AddField(testquestioncount.FieldPoints, field.TypeInt, value)
	}
	if tqcu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestioncount.TestTable,
			Columns: []string{testquestioncount.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqcu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestioncount.TestTable,
			Columns: []string{testquestioncount.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testquestioncount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tqcu.mutation.done = true
	return n, nil
}

// TestQuestionCountUpdateOne is the builder for updating a single TestQuestionCount entity.
type TestQuestionCountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestQuestionCountMutation
}

// SetCreatedAt sets the "created_at" field.
func (tqcuo *TestQuestionCountUpdateOne) SetCreatedAt(t time.Time) *TestQuestionCountUpdateOne {
	tqcuo.mutation.SetCreatedAt(t)
	return tqcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqcuo *TestQuestionCountUpdateOne) SetNillableCreatedAt(t *time.Time) *TestQuestionCountUpdateOne {
	if t != nil {
		tqcuo.SetCreatedAt(*t)
	}
	return tqcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqcuo *TestQuestionCountUpdateOne) SetUpdatedAt(t time.Time) *TestQuestionCountUpdateOne {
	tqcuo.mutation.SetUpdatedAt(t)
	return tqcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqcuo *TestQuestionCountUpdateOne) SetDeletedAt(t time.Time) *TestQuestionCountUpdateOne {
	tqcuo.mutation.SetDeletedAt(t)
	return tqcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqcuo *TestQuestionCountUpdateOne) SetNillableDeletedAt(t *time.Time) *TestQuestionCountUpdateOne {
	if t != nil {
		tqcuo.SetDeletedAt(*t)
	}
	return tqcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqcuo *TestQuestionCountUpdateOne) ClearDeletedAt() *TestQuestionCountUpdateOne {
	tqcuo.mutation.ClearDeletedAt()
	return tqcuo
}

// SetTestID sets the "test_id" field.
func (tqcuo *TestQuestionCountUpdateOne) SetTestID(u uuid.UUID) *TestQuestionCountUpdateOne {
	tqcuo.mutation.SetTestID(u)
	return tqcuo
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tqcuo *TestQuestionCountUpdateOne) SetNillableTestID(u *uuid.UUID) *TestQuestionCountUpdateOne {
	if u != nil {
		tqcuo.SetTestID(*u)
	}
	return tqcuo
}

// SetNumberOfQuestions sets the "number_of_questions" field.
func (tqcuo *TestQuestionCountUpdateOne) SetNumberOfQuestions(i int) *TestQuestionCountUpdateOne {
	tqcuo.mutation.ResetNumberOfQuestions()
	tqcuo.mutation.SetNumberOfQuestions(i)
	return tqcuo
}

// SetNillableNumberOfQuestions sets the "number_of_questions" field if the given value is not nil.
func (tqcuo *TestQuestionCountUpdateOne) SetNillableNumberOfQuestions(i *int) *TestQuestionCountUpdateOne {
	if i != nil {
		tqcuo.SetNumberOfQuestions(*i)
	}
	return tqcuo
}

// AddNumberOfQuestions adds i to the "number_of_questions" field.
func (tqcuo *TestQuestionCountUpdateOne) AddNumberOfQuestions(i int) *TestQuestionCountUpdateOne {
	tqcuo.mutation.AddNumberOfQuestions(i)
	return tqcuo
}

// SetPoints sets the "points" field.
func (tqcuo *TestQuestionCountUpdateOne) SetPoints(i int) *TestQuestionCountUpdateOne {
	tqcuo.mutation.ResetPoints()
	tqcuo.mutation.SetPoints(i)
	return tqcuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (tqcuo *TestQuestionCountUpdateOne) SetNillablePoints(i *int) *TestQuestionCountUpdateOne {
	if i != nil {
		tqcuo.SetPoints(*i)
	}
	return tqcuo
}

// AddPoints adds i to the "points" field.
func (tqcuo *TestQuestionCountUpdateOne) AddPoints(i int) *TestQuestionCountUpdateOne {
	tqcuo.mutation.AddPoints(i)
	return tqcuo
}

// SetTest sets the "test" edge to the Test entity.
func (tqcuo *TestQuestionCountUpdateOne) SetTest(t *Test) *TestQuestionCountUpdateOne {
	return tqcuo.SetTestID(t.ID)
}

// Mutation returns the TestQuestionCountMutation object of the builder.
func (tqcuo *TestQuestionCountUpdateOne) Mutation() *TestQuestionCountMutation {
	return tqcuo.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tqcuo *TestQuestionCountUpdateOne) ClearTest() *TestQuestionCountUpdateOne {
	tqcuo.mutation.ClearTest()
	return tqcuo
}

// Where appends a list predicates to the TestQuestionCountUpdate builder.
func (tqcuo *TestQuestionCountUpdateOne) Where(ps ...predicate.TestQuestionCount) *TestQuestionCountUpdateOne {
	tqcuo.mutation.Where(ps...)
	return tqcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqcuo *TestQuestionCountUpdateOne) Select(field string, fields ...string) *TestQuestionCountUpdateOne {
	tqcuo.fields = append([]string{field}, fields...)
	return tqcuo
}

// Save executes the query and returns the updated TestQuestionCount entity.
func (tqcuo *TestQuestionCountUpdateOne) Save(ctx context.Context) (*TestQuestionCount, error) {
	if err := tqcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tqcuo.sqlSave, tqcuo.mutation, tqcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqcuo *TestQuestionCountUpdateOne) SaveX(ctx context.Context) *TestQuestionCount {
	node, err := tqcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqcuo *TestQuestionCountUpdateOne) Exec(ctx context.Context) error {
	_, err := tqcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqcuo *TestQuestionCountUpdateOne) ExecX(ctx context.Context) {
	if err := tqcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqcuo *TestQuestionCountUpdateOne) defaults() error {
	if _, ok := tqcuo.mutation.UpdatedAt(); !ok {
		if testquestioncount.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestioncount.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestioncount.UpdateDefaultUpdatedAt()
		tqcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqcuo *TestQuestionCountUpdateOne) check() error {
	if tqcuo.mutation.TestCleared() && len(tqcuo.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionCount.test"`)
	}
	return nil
}

func (tqcuo *TestQuestionCountUpdateOne) sqlSave(ctx context.Context) (_node *TestQuestionCount, err error) {
	if err := tqcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testquestioncount.Table, testquestioncount.Columns, sqlgraph.NewFieldSpec(testquestioncount.FieldID, field.TypeUUID))
	id, ok := tqcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestQuestionCount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tqcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testquestioncount.FieldID)
		for _, f := range fields {
			if !testquestioncount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testquestioncount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqcuo.mutation.CreatedAt(); ok {
		_spec.SetField(testquestioncount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tqcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestioncount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tqcuo.mutation.DeletedAt(); ok {
		_spec.SetField(testquestioncount.FieldDeletedAt, field.TypeTime, value)
	}
	if tqcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(testquestioncount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tqcuo.mutation.NumberOfQuestions(); ok {
		_spec.SetField(testquestioncount.FieldNumberOfQuestions, field.TypeInt, value)
	}
	if value, ok := tqcuo.mutation.AddedNumberOfQuestions(); ok {
		_spec.AddField(testquestioncount.FieldNumberOfQuestions, field.TypeInt, value)
	}
	if value, ok := tqcuo.mutation.Points(); ok {
		_spec.SetField(testquestioncount.FieldPoints, field.TypeInt, value)
	}
	if value, ok := tqcuo.mutation.AddedPoints(); ok {
		_spec.AddField(testquestioncount.FieldPoints, field.TypeInt, value)
	}
	if tqcuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestioncount.TestTable,
			Columns: []string{testquestioncount.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqcuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestioncount.TestTable,
			Columns: []string{testquestioncount.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestQuestionCount{config: tqcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testquestioncount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tqcuo.mutation.done = true
	return _node, nil
}
