// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/question"
	"template/internal/ent/questioncollection"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionCollectionCreate is the builder for creating a QuestionCollection entity.
type QuestionCollectionCreate struct {
	config
	mutation *QuestionCollectionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (qcc *QuestionCollectionCreate) SetCreatedAt(t time.Time) *QuestionCollectionCreate {
	qcc.mutation.SetCreatedAt(t)
	return qcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcc *QuestionCollectionCreate) SetNillableCreatedAt(t *time.Time) *QuestionCollectionCreate {
	if t != nil {
		qcc.SetCreatedAt(*t)
	}
	return qcc
}

// SetUpdatedAt sets the "updated_at" field.
func (qcc *QuestionCollectionCreate) SetUpdatedAt(t time.Time) *QuestionCollectionCreate {
	qcc.mutation.SetUpdatedAt(t)
	return qcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qcc *QuestionCollectionCreate) SetNillableUpdatedAt(t *time.Time) *QuestionCollectionCreate {
	if t != nil {
		qcc.SetUpdatedAt(*t)
	}
	return qcc
}

// SetDeletedAt sets the "deleted_at" field.
func (qcc *QuestionCollectionCreate) SetDeletedAt(t time.Time) *QuestionCollectionCreate {
	qcc.mutation.SetDeletedAt(t)
	return qcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qcc *QuestionCollectionCreate) SetNillableDeletedAt(t *time.Time) *QuestionCollectionCreate {
	if t != nil {
		qcc.SetDeletedAt(*t)
	}
	return qcc
}

// SetTitle sets the "title" field.
func (qcc *QuestionCollectionCreate) SetTitle(s string) *QuestionCollectionCreate {
	qcc.mutation.SetTitle(s)
	return qcc
}

// SetDescription sets the "description" field.
func (qcc *QuestionCollectionCreate) SetDescription(s string) *QuestionCollectionCreate {
	qcc.mutation.SetDescription(s)
	return qcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcc *QuestionCollectionCreate) SetNillableDescription(s *string) *QuestionCollectionCreate {
	if s != nil {
		qcc.SetDescription(*s)
	}
	return qcc
}

// SetCreatorID sets the "creator_id" field.
func (qcc *QuestionCollectionCreate) SetCreatorID(u uuid.UUID) *QuestionCollectionCreate {
	qcc.mutation.SetCreatorID(u)
	return qcc
}

// SetCourseSectionID sets the "course_section_id" field.
func (qcc *QuestionCollectionCreate) SetCourseSectionID(u uuid.UUID) *QuestionCollectionCreate {
	qcc.mutation.SetCourseSectionID(u)
	return qcc
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (qcc *QuestionCollectionCreate) SetNillableCourseSectionID(u *uuid.UUID) *QuestionCollectionCreate {
	if u != nil {
		qcc.SetCourseSectionID(*u)
	}
	return qcc
}

// SetID sets the "id" field.
func (qcc *QuestionCollectionCreate) SetID(u uuid.UUID) *QuestionCollectionCreate {
	qcc.mutation.SetID(u)
	return qcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qcc *QuestionCollectionCreate) SetNillableID(u *uuid.UUID) *QuestionCollectionCreate {
	if u != nil {
		qcc.SetID(*u)
	}
	return qcc
}

// SetCreator sets the "creator" edge to the User entity.
func (qcc *QuestionCollectionCreate) SetCreator(u *User) *QuestionCollectionCreate {
	return qcc.SetCreatorID(u.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcc *QuestionCollectionCreate) AddQuestionIDs(ids ...uuid.UUID) *QuestionCollectionCreate {
	qcc.mutation.AddQuestionIDs(ids...)
	return qcc
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcc *QuestionCollectionCreate) AddQuestions(q ...*Question) *QuestionCollectionCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcc.AddQuestionIDs(ids...)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (qcc *QuestionCollectionCreate) SetCourseSection(c *CourseSection) *QuestionCollectionCreate {
	return qcc.SetCourseSectionID(c.ID)
}

// Mutation returns the QuestionCollectionMutation object of the builder.
func (qcc *QuestionCollectionCreate) Mutation() *QuestionCollectionMutation {
	return qcc.mutation
}

// Save creates the QuestionCollection in the database.
func (qcc *QuestionCollectionCreate) Save(ctx context.Context) (*QuestionCollection, error) {
	if err := qcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qcc.sqlSave, qcc.mutation, qcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qcc *QuestionCollectionCreate) SaveX(ctx context.Context) *QuestionCollection {
	v, err := qcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcc *QuestionCollectionCreate) Exec(ctx context.Context) error {
	_, err := qcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcc *QuestionCollectionCreate) ExecX(ctx context.Context) {
	if err := qcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcc *QuestionCollectionCreate) defaults() error {
	if _, ok := qcc.mutation.CreatedAt(); !ok {
		if questioncollection.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized questioncollection.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := questioncollection.DefaultCreatedAt()
		qcc.mutation.SetCreatedAt(v)
	}
	if _, ok := qcc.mutation.UpdatedAt(); !ok {
		if questioncollection.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized questioncollection.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := questioncollection.DefaultUpdatedAt()
		qcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qcc.mutation.ID(); !ok {
		if questioncollection.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized questioncollection.DefaultID (forgotten import ent/runtime?)")
		}
		v := questioncollection.DefaultID()
		qcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qcc *QuestionCollectionCreate) check() error {
	if _, ok := qcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QuestionCollection.created_at"`)}
	}
	if _, ok := qcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "QuestionCollection.updated_at"`)}
	}
	if _, ok := qcc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "QuestionCollection.title"`)}
	}
	if v, ok := qcc.mutation.Title(); ok {
		if err := questioncollection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "QuestionCollection.title": %w`, err)}
		}
	}
	if _, ok := qcc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "QuestionCollection.creator_id"`)}
	}
	if len(qcc.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "QuestionCollection.creator"`)}
	}
	return nil
}

func (qcc *QuestionCollectionCreate) sqlSave(ctx context.Context) (*QuestionCollection, error) {
	if err := qcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qcc.mutation.id = &_node.ID
	qcc.mutation.done = true
	return _node, nil
}

func (qcc *QuestionCollectionCreate) createSpec() (*QuestionCollection, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionCollection{config: qcc.config}
		_spec = sqlgraph.NewCreateSpec(questioncollection.Table, sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID))
	)
	if id, ok := qcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qcc.mutation.CreatedAt(); ok {
		_spec.SetField(questioncollection.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qcc.mutation.UpdatedAt(); ok {
		_spec.SetField(questioncollection.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qcc.mutation.DeletedAt(); ok {
		_spec.SetField(questioncollection.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := qcc.mutation.Title(); ok {
		_spec.SetField(questioncollection.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := qcc.mutation.Description(); ok {
		_spec.SetField(questioncollection.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if nodes := qcc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CreatorTable,
			Columns: []string{questioncollection.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qcc.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncollection.QuestionsTable,
			Columns: []string{questioncollection.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qcc.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questioncollection.CourseSectionTable,
			Columns: []string{questioncollection.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseSectionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCollectionCreateBulk is the builder for creating many QuestionCollection entities in bulk.
type QuestionCollectionCreateBulk struct {
	config
	err      error
	builders []*QuestionCollectionCreate
}

// Save creates the QuestionCollection entities in the database.
func (qccb *QuestionCollectionCreateBulk) Save(ctx context.Context) ([]*QuestionCollection, error) {
	if qccb.err != nil {
		return nil, qccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qccb.builders))
	nodes := make([]*QuestionCollection, len(qccb.builders))
	mutators := make([]Mutator, len(qccb.builders))
	for i := range qccb.builders {
		func(i int, root context.Context) {
			builder := qccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionCollectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qccb *QuestionCollectionCreateBulk) SaveX(ctx context.Context) []*QuestionCollection {
	v, err := qccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qccb *QuestionCollectionCreateBulk) Exec(ctx context.Context) error {
	_, err := qccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qccb *QuestionCollectionCreateBulk) ExecX(ctx context.Context) {
	if err := qccb.Exec(ctx); err != nil {
		panic(err)
	}
}
