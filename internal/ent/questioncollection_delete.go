// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"template/internal/ent/predicate"
	"template/internal/ent/questioncollection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCollectionDelete is the builder for deleting a QuestionCollection entity.
type QuestionCollectionDelete struct {
	config
	hooks    []Hook
	mutation *QuestionCollectionMutation
}

// Where appends a list predicates to the QuestionCollectionDelete builder.
func (qcd *QuestionCollectionDelete) Where(ps ...predicate.QuestionCollection) *QuestionCollectionDelete {
	qcd.mutation.Where(ps...)
	return qcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qcd *QuestionCollectionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qcd.sqlExec, qcd.mutation, qcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qcd *QuestionCollectionDelete) ExecX(ctx context.Context) int {
	n, err := qcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qcd *QuestionCollectionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(questioncollection.Table, sqlgraph.NewFieldSpec(questioncollection.FieldID, field.TypeUUID))
	if ps := qcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qcd.mutation.done = true
	return affected, err
}

// QuestionCollectionDeleteOne is the builder for deleting a single QuestionCollection entity.
type QuestionCollectionDeleteOne struct {
	qcd *QuestionCollectionDelete
}

// Where appends a list predicates to the QuestionCollectionDelete builder.
func (qcdo *QuestionCollectionDeleteOne) Where(ps ...predicate.QuestionCollection) *QuestionCollectionDeleteOne {
	qcdo.qcd.mutation.Where(ps...)
	return qcdo
}

// Exec executes the deletion query.
func (qcdo *QuestionCollectionDeleteOne) Exec(ctx context.Context) error {
	n, err := qcdo.qcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{questioncollection.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qcdo *QuestionCollectionDeleteOne) ExecX(ctx context.Context) {
	if err := qcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
