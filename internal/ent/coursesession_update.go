// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesection"
	"template/internal/ent/coursesession"
	"template/internal/ent/predicate"
	"template/internal/ent/user"
	"template/internal/ent/userquestionanswer"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseSessionUpdate is the builder for updating CourseSession entities.
type CourseSessionUpdate struct {
	config
	hooks    []Hook
	mutation *CourseSessionMutation
}

// Where appends a list predicates to the CourseSessionUpdate builder.
func (csu *CourseSessionUpdate) Where(ps ...predicate.CourseSession) *CourseSessionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CourseSessionUpdate) SetCreatedAt(t time.Time) *CourseSessionUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CourseSessionUpdate) SetNillableCreatedAt(t *time.Time) *CourseSessionUpdate {
	if t != nil {
		csu.SetCreatedAt(*t)
	}
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CourseSessionUpdate) SetUpdatedAt(t time.Time) *CourseSessionUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetDeletedAt sets the "deleted_at" field.
func (csu *CourseSessionUpdate) SetDeletedAt(t time.Time) *CourseSessionUpdate {
	csu.mutation.SetDeletedAt(t)
	return csu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csu *CourseSessionUpdate) SetNillableDeletedAt(t *time.Time) *CourseSessionUpdate {
	if t != nil {
		csu.SetDeletedAt(*t)
	}
	return csu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csu *CourseSessionUpdate) ClearDeletedAt() *CourseSessionUpdate {
	csu.mutation.ClearDeletedAt()
	return csu
}

// SetUserID sets the "user_id" field.
func (csu *CourseSessionUpdate) SetUserID(u uuid.UUID) *CourseSessionUpdate {
	csu.mutation.SetUserID(u)
	return csu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (csu *CourseSessionUpdate) SetNillableUserID(u *uuid.UUID) *CourseSessionUpdate {
	if u != nil {
		csu.SetUserID(*u)
	}
	return csu
}

// SetCourseSectionID sets the "course_section_id" field.
func (csu *CourseSessionUpdate) SetCourseSectionID(u uuid.UUID) *CourseSessionUpdate {
	csu.mutation.SetCourseSectionID(u)
	return csu
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (csu *CourseSessionUpdate) SetNillableCourseSectionID(u *uuid.UUID) *CourseSessionUpdate {
	if u != nil {
		csu.SetCourseSectionID(*u)
	}
	return csu
}

// ClearCourseSectionID clears the value of the "course_section_id" field.
func (csu *CourseSessionUpdate) ClearCourseSectionID() *CourseSessionUpdate {
	csu.mutation.ClearCourseSectionID()
	return csu
}

// SetCompletedAt sets the "completed_at" field.
func (csu *CourseSessionUpdate) SetCompletedAt(t time.Time) *CourseSessionUpdate {
	csu.mutation.SetCompletedAt(t)
	return csu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (csu *CourseSessionUpdate) SetNillableCompletedAt(t *time.Time) *CourseSessionUpdate {
	if t != nil {
		csu.SetCompletedAt(*t)
	}
	return csu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (csu *CourseSessionUpdate) ClearCompletedAt() *CourseSessionUpdate {
	csu.mutation.ClearCompletedAt()
	return csu
}

// SetTotalScore sets the "total_score" field.
func (csu *CourseSessionUpdate) SetTotalScore(i int) *CourseSessionUpdate {
	csu.mutation.ResetTotalScore()
	csu.mutation.SetTotalScore(i)
	return csu
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (csu *CourseSessionUpdate) SetNillableTotalScore(i *int) *CourseSessionUpdate {
	if i != nil {
		csu.SetTotalScore(*i)
	}
	return csu
}

// AddTotalScore adds i to the "total_score" field.
func (csu *CourseSessionUpdate) AddTotalScore(i int) *CourseSessionUpdate {
	csu.mutation.AddTotalScore(i)
	return csu
}

// SetUser sets the "user" edge to the User entity.
func (csu *CourseSessionUpdate) SetUser(u *User) *CourseSessionUpdate {
	return csu.SetUserID(u.ID)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (csu *CourseSessionUpdate) SetCourseSection(c *CourseSection) *CourseSessionUpdate {
	return csu.SetCourseSectionID(c.ID)
}

// AddUserQuestionAnswerIDs adds the "user_question_answers" edge to the UserQuestionAnswer entity by IDs.
func (csu *CourseSessionUpdate) AddUserQuestionAnswerIDs(ids ...uuid.UUID) *CourseSessionUpdate {
	csu.mutation.AddUserQuestionAnswerIDs(ids...)
	return csu
}

// AddUserQuestionAnswers adds the "user_question_answers" edges to the UserQuestionAnswer entity.
func (csu *CourseSessionUpdate) AddUserQuestionAnswers(u ...*UserQuestionAnswer) *CourseSessionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csu.AddUserQuestionAnswerIDs(ids...)
}

// Mutation returns the CourseSessionMutation object of the builder.
func (csu *CourseSessionUpdate) Mutation() *CourseSessionMutation {
	return csu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (csu *CourseSessionUpdate) ClearUser() *CourseSessionUpdate {
	csu.mutation.ClearUser()
	return csu
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (csu *CourseSessionUpdate) ClearCourseSection() *CourseSessionUpdate {
	csu.mutation.ClearCourseSection()
	return csu
}

// ClearUserQuestionAnswers clears all "user_question_answers" edges to the UserQuestionAnswer entity.
func (csu *CourseSessionUpdate) ClearUserQuestionAnswers() *CourseSessionUpdate {
	csu.mutation.ClearUserQuestionAnswers()
	return csu
}

// RemoveUserQuestionAnswerIDs removes the "user_question_answers" edge to UserQuestionAnswer entities by IDs.
func (csu *CourseSessionUpdate) RemoveUserQuestionAnswerIDs(ids ...uuid.UUID) *CourseSessionUpdate {
	csu.mutation.RemoveUserQuestionAnswerIDs(ids...)
	return csu
}

// RemoveUserQuestionAnswers removes "user_question_answers" edges to UserQuestionAnswer entities.
func (csu *CourseSessionUpdate) RemoveUserQuestionAnswers(u ...*UserQuestionAnswer) *CourseSessionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csu.RemoveUserQuestionAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CourseSessionUpdate) Save(ctx context.Context) (int, error) {
	if err := csu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CourseSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CourseSessionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CourseSessionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CourseSessionUpdate) defaults() error {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		if coursesession.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coursesession.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coursesession.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csu *CourseSessionUpdate) check() error {
	if csu.mutation.UserCleared() && len(csu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CourseSession.user"`)
	}
	return nil
}

func (csu *CourseSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coursesession.Table, coursesession.Columns, sqlgraph.NewFieldSpec(coursesession.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.SetField(coursesession.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(coursesession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.DeletedAt(); ok {
		_spec.SetField(coursesession.FieldDeletedAt, field.TypeTime, value)
	}
	if csu.mutation.DeletedAtCleared() {
		_spec.ClearField(coursesession.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csu.mutation.CompletedAt(); ok {
		_spec.SetField(coursesession.FieldCompletedAt, field.TypeTime, value)
	}
	if csu.mutation.CompletedAtCleared() {
		_spec.ClearField(coursesession.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := csu.mutation.TotalScore(); ok {
		_spec.SetField(coursesession.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedTotalScore(); ok {
		_spec.AddField(coursesession.FieldTotalScore, field.TypeInt, value)
	}
	if csu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.UserTable,
			Columns: []string{coursesession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.UserTable,
			Columns: []string{coursesession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.CourseSectionTable,
			Columns: []string{coursesession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.CourseSectionTable,
			Columns: []string{coursesession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedUserQuestionAnswersIDs(); len(nodes) > 0 && !csu.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.UserQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CourseSessionUpdateOne is the builder for updating a single CourseSession entity.
type CourseSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseSessionMutation
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CourseSessionUpdateOne) SetCreatedAt(t time.Time) *CourseSessionUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CourseSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseSessionUpdateOne {
	if t != nil {
		csuo.SetCreatedAt(*t)
	}
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CourseSessionUpdateOne) SetUpdatedAt(t time.Time) *CourseSessionUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csuo *CourseSessionUpdateOne) SetDeletedAt(t time.Time) *CourseSessionUpdateOne {
	csuo.mutation.SetDeletedAt(t)
	return csuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csuo *CourseSessionUpdateOne) SetNillableDeletedAt(t *time.Time) *CourseSessionUpdateOne {
	if t != nil {
		csuo.SetDeletedAt(*t)
	}
	return csuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csuo *CourseSessionUpdateOne) ClearDeletedAt() *CourseSessionUpdateOne {
	csuo.mutation.ClearDeletedAt()
	return csuo
}

// SetUserID sets the "user_id" field.
func (csuo *CourseSessionUpdateOne) SetUserID(u uuid.UUID) *CourseSessionUpdateOne {
	csuo.mutation.SetUserID(u)
	return csuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (csuo *CourseSessionUpdateOne) SetNillableUserID(u *uuid.UUID) *CourseSessionUpdateOne {
	if u != nil {
		csuo.SetUserID(*u)
	}
	return csuo
}

// SetCourseSectionID sets the "course_section_id" field.
func (csuo *CourseSessionUpdateOne) SetCourseSectionID(u uuid.UUID) *CourseSessionUpdateOne {
	csuo.mutation.SetCourseSectionID(u)
	return csuo
}

// SetNillableCourseSectionID sets the "course_section_id" field if the given value is not nil.
func (csuo *CourseSessionUpdateOne) SetNillableCourseSectionID(u *uuid.UUID) *CourseSessionUpdateOne {
	if u != nil {
		csuo.SetCourseSectionID(*u)
	}
	return csuo
}

// ClearCourseSectionID clears the value of the "course_section_id" field.
func (csuo *CourseSessionUpdateOne) ClearCourseSectionID() *CourseSessionUpdateOne {
	csuo.mutation.ClearCourseSectionID()
	return csuo
}

// SetCompletedAt sets the "completed_at" field.
func (csuo *CourseSessionUpdateOne) SetCompletedAt(t time.Time) *CourseSessionUpdateOne {
	csuo.mutation.SetCompletedAt(t)
	return csuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (csuo *CourseSessionUpdateOne) SetNillableCompletedAt(t *time.Time) *CourseSessionUpdateOne {
	if t != nil {
		csuo.SetCompletedAt(*t)
	}
	return csuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (csuo *CourseSessionUpdateOne) ClearCompletedAt() *CourseSessionUpdateOne {
	csuo.mutation.ClearCompletedAt()
	return csuo
}

// SetTotalScore sets the "total_score" field.
func (csuo *CourseSessionUpdateOne) SetTotalScore(i int) *CourseSessionUpdateOne {
	csuo.mutation.ResetTotalScore()
	csuo.mutation.SetTotalScore(i)
	return csuo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (csuo *CourseSessionUpdateOne) SetNillableTotalScore(i *int) *CourseSessionUpdateOne {
	if i != nil {
		csuo.SetTotalScore(*i)
	}
	return csuo
}

// AddTotalScore adds i to the "total_score" field.
func (csuo *CourseSessionUpdateOne) AddTotalScore(i int) *CourseSessionUpdateOne {
	csuo.mutation.AddTotalScore(i)
	return csuo
}

// SetUser sets the "user" edge to the User entity.
func (csuo *CourseSessionUpdateOne) SetUser(u *User) *CourseSessionUpdateOne {
	return csuo.SetUserID(u.ID)
}

// SetCourseSection sets the "course_section" edge to the CourseSection entity.
func (csuo *CourseSessionUpdateOne) SetCourseSection(c *CourseSection) *CourseSessionUpdateOne {
	return csuo.SetCourseSectionID(c.ID)
}

// AddUserQuestionAnswerIDs adds the "user_question_answers" edge to the UserQuestionAnswer entity by IDs.
func (csuo *CourseSessionUpdateOne) AddUserQuestionAnswerIDs(ids ...uuid.UUID) *CourseSessionUpdateOne {
	csuo.mutation.AddUserQuestionAnswerIDs(ids...)
	return csuo
}

// AddUserQuestionAnswers adds the "user_question_answers" edges to the UserQuestionAnswer entity.
func (csuo *CourseSessionUpdateOne) AddUserQuestionAnswers(u ...*UserQuestionAnswer) *CourseSessionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csuo.AddUserQuestionAnswerIDs(ids...)
}

// Mutation returns the CourseSessionMutation object of the builder.
func (csuo *CourseSessionUpdateOne) Mutation() *CourseSessionMutation {
	return csuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (csuo *CourseSessionUpdateOne) ClearUser() *CourseSessionUpdateOne {
	csuo.mutation.ClearUser()
	return csuo
}

// ClearCourseSection clears the "course_section" edge to the CourseSection entity.
func (csuo *CourseSessionUpdateOne) ClearCourseSection() *CourseSessionUpdateOne {
	csuo.mutation.ClearCourseSection()
	return csuo
}

// ClearUserQuestionAnswers clears all "user_question_answers" edges to the UserQuestionAnswer entity.
func (csuo *CourseSessionUpdateOne) ClearUserQuestionAnswers() *CourseSessionUpdateOne {
	csuo.mutation.ClearUserQuestionAnswers()
	return csuo
}

// RemoveUserQuestionAnswerIDs removes the "user_question_answers" edge to UserQuestionAnswer entities by IDs.
func (csuo *CourseSessionUpdateOne) RemoveUserQuestionAnswerIDs(ids ...uuid.UUID) *CourseSessionUpdateOne {
	csuo.mutation.RemoveUserQuestionAnswerIDs(ids...)
	return csuo
}

// RemoveUserQuestionAnswers removes "user_question_answers" edges to UserQuestionAnswer entities.
func (csuo *CourseSessionUpdateOne) RemoveUserQuestionAnswers(u ...*UserQuestionAnswer) *CourseSessionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csuo.RemoveUserQuestionAnswerIDs(ids...)
}

// Where appends a list predicates to the CourseSessionUpdate builder.
func (csuo *CourseSessionUpdateOne) Where(ps ...predicate.CourseSession) *CourseSessionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CourseSessionUpdateOne) Select(field string, fields ...string) *CourseSessionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CourseSession entity.
func (csuo *CourseSessionUpdateOne) Save(ctx context.Context) (*CourseSession, error) {
	if err := csuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CourseSessionUpdateOne) SaveX(ctx context.Context) *CourseSession {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CourseSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CourseSessionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CourseSessionUpdateOne) defaults() error {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		if coursesession.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coursesession.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coursesession.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CourseSessionUpdateOne) check() error {
	if csuo.mutation.UserCleared() && len(csuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CourseSession.user"`)
	}
	return nil
}

func (csuo *CourseSessionUpdateOne) sqlSave(ctx context.Context) (_node *CourseSession, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coursesession.Table, coursesession.Columns, sqlgraph.NewFieldSpec(coursesession.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CourseSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coursesession.FieldID)
		for _, f := range fields {
			if !coursesession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coursesession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.SetField(coursesession.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coursesession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.DeletedAt(); ok {
		_spec.SetField(coursesession.FieldDeletedAt, field.TypeTime, value)
	}
	if csuo.mutation.DeletedAtCleared() {
		_spec.ClearField(coursesession.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csuo.mutation.CompletedAt(); ok {
		_spec.SetField(coursesession.FieldCompletedAt, field.TypeTime, value)
	}
	if csuo.mutation.CompletedAtCleared() {
		_spec.ClearField(coursesession.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := csuo.mutation.TotalScore(); ok {
		_spec.SetField(coursesession.FieldTotalScore, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedTotalScore(); ok {
		_spec.AddField(coursesession.FieldTotalScore, field.TypeInt, value)
	}
	if csuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.UserTable,
			Columns: []string{coursesession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.UserTable,
			Columns: []string{coursesession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CourseSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.CourseSectionTable,
			Columns: []string{coursesession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CourseSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesession.CourseSectionTable,
			Columns: []string{coursesession.CourseSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedUserQuestionAnswersIDs(); len(nodes) > 0 && !csuo.mutation.UserQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.UserQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coursesession.UserQuestionAnswersTable,
			Columns: []string{coursesession.UserQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CourseSession{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
