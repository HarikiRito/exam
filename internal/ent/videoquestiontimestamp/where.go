// Code generated by ent, DO NOT EDIT.

package videoquestiontimestamp

import (
	"template/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldDeletedAt, v))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldVideoID, v))
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldQuestionID, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldTimestamp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotNull(FieldDeletedAt))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldVideoID, vs...))
}

// VideoIDGT applies the GT predicate on the "video_id" field.
func VideoIDGT(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldVideoID, v))
}

// VideoIDGTE applies the GTE predicate on the "video_id" field.
func VideoIDGTE(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldVideoID, v))
}

// VideoIDLT applies the LT predicate on the "video_id" field.
func VideoIDLT(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldVideoID, v))
}

// VideoIDLTE applies the LTE predicate on the "video_id" field.
func VideoIDLTE(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldVideoID, v))
}

// VideoIDContains applies the Contains predicate on the "video_id" field.
func VideoIDContains(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldContains(FieldVideoID, v))
}

// VideoIDHasPrefix applies the HasPrefix predicate on the "video_id" field.
func VideoIDHasPrefix(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldHasPrefix(FieldVideoID, v))
}

// VideoIDHasSuffix applies the HasSuffix predicate on the "video_id" field.
func VideoIDHasSuffix(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldHasSuffix(FieldVideoID, v))
}

// VideoIDEqualFold applies the EqualFold predicate on the "video_id" field.
func VideoIDEqualFold(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEqualFold(FieldVideoID, v))
}

// VideoIDContainsFold applies the ContainsFold predicate on the "video_id" field.
func VideoIDContainsFold(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldContainsFold(FieldVideoID, v))
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldQuestionID, v))
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldQuestionID, v))
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldQuestionID, vs...))
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldQuestionID, vs...))
}

// QuestionIDGT applies the GT predicate on the "question_id" field.
func QuestionIDGT(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldQuestionID, v))
}

// QuestionIDGTE applies the GTE predicate on the "question_id" field.
func QuestionIDGTE(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldQuestionID, v))
}

// QuestionIDLT applies the LT predicate on the "question_id" field.
func QuestionIDLT(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldQuestionID, v))
}

// QuestionIDLTE applies the LTE predicate on the "question_id" field.
func QuestionIDLTE(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldQuestionID, v))
}

// QuestionIDContains applies the Contains predicate on the "question_id" field.
func QuestionIDContains(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldContains(FieldQuestionID, v))
}

// QuestionIDHasPrefix applies the HasPrefix predicate on the "question_id" field.
func QuestionIDHasPrefix(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldHasPrefix(FieldQuestionID, v))
}

// QuestionIDHasSuffix applies the HasSuffix predicate on the "question_id" field.
func QuestionIDHasSuffix(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldHasSuffix(FieldQuestionID, v))
}

// QuestionIDEqualFold applies the EqualFold predicate on the "question_id" field.
func QuestionIDEqualFold(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEqualFold(FieldQuestionID, v))
}

// QuestionIDContainsFold applies the ContainsFold predicate on the "question_id" field.
func QuestionIDContainsFold(v string) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldContainsFold(FieldQuestionID, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v int) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.FieldLTE(FieldTimestamp, v))
}

// HasVideo applies the HasEdge predicate on the "video" edge.
func HasVideo() predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VideoTable, VideoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoWith applies the HasEdge predicate on the "video" edge with a given conditions (other predicates).
func HasVideoWith(preds ...predicate.Video) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(func(s *sql.Selector) {
		step := newVideoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VideoQuestionTimestamp) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VideoQuestionTimestamp) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VideoQuestionTimestamp) predicate.VideoQuestionTimestamp {
	return predicate.VideoQuestionTimestamp(sql.NotPredicates(p))
}
