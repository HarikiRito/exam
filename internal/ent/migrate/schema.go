// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CoursesColumns holds the columns for the "courses" table.
	CoursesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "is_published", Type: field.TypeBool, Default: false},
		{Name: "media_id", Type: field.TypeUUID, Nullable: true},
		{Name: "creator_id", Type: field.TypeUUID},
	}
	// CoursesTable holds the schema information for the "courses" table.
	CoursesTable = &schema.Table{
		Name:       "courses",
		Columns:    CoursesColumns,
		PrimaryKey: []*schema.Column{CoursesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "courses_media_course_media",
				Columns:    []*schema.Column{CoursesColumns[7]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "courses_users_course_creator",
				Columns:    []*schema.Column{CoursesColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CourseSectionsColumns holds the columns for the "course_sections" table.
	CourseSectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "order", Type: field.TypeInt, Default: 0},
		{Name: "course_id", Type: field.TypeUUID},
		{Name: "section_id", Type: field.TypeUUID, Nullable: true},
	}
	// CourseSectionsTable holds the schema information for the "course_sections" table.
	CourseSectionsTable = &schema.Table{
		Name:       "course_sections",
		Columns:    CourseSectionsColumns,
		PrimaryKey: []*schema.Column{CourseSectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "course_sections_courses_course_sections",
				Columns:    []*schema.Column{CourseSectionsColumns[7]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "course_sections_course_sections_children",
				Columns:    []*schema.Column{CourseSectionsColumns[8]},
				RefColumns: []*schema.Column{CourseSectionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MediaColumns holds the columns for the "media" table.
	MediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "file_name", Type: field.TypeString},
		{Name: "file_url", Type: field.TypeString},
		{Name: "mime_type", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "uploader_id", Type: field.TypeUUID, Nullable: true},
	}
	// MediaTable holds the schema information for the "media" table.
	MediaTable = &schema.Table{
		Name:       "media",
		Columns:    MediaColumns,
		PrimaryKey: []*schema.Column{MediaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_users_media_uploader",
				Columns:    []*schema.Column{MediaColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "question_text", Type: field.TypeString, Size: 2147483647},
		{Name: "points", Type: field.TypeInt, Default: 0},
		{Name: "collection_id", Type: field.TypeUUID},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_question_collections_questions",
				Columns:    []*schema.Column{QuestionsColumns[6]},
				RefColumns: []*schema.Column{QuestionCollectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionCollectionsColumns holds the columns for the "question_collections" table.
	QuestionCollectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "course_section_id", Type: field.TypeUUID, Nullable: true},
		{Name: "creator_id", Type: field.TypeUUID},
	}
	// QuestionCollectionsTable holds the schema information for the "question_collections" table.
	QuestionCollectionsTable = &schema.Table{
		Name:       "question_collections",
		Columns:    QuestionCollectionsColumns,
		PrimaryKey: []*schema.Column{QuestionCollectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_collections_course_sections_question_collections",
				Columns:    []*schema.Column{QuestionCollectionsColumns[6]},
				RefColumns: []*schema.Column{CourseSectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "question_collections_users_question_collections",
				Columns:    []*schema.Column{QuestionCollectionsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionOptionsColumns holds the columns for the "question_options" table.
	QuestionOptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "option_text", Type: field.TypeString, Size: 2147483647},
		{Name: "is_correct", Type: field.TypeBool, Default: false},
		{Name: "question_id", Type: field.TypeUUID},
	}
	// QuestionOptionsTable holds the schema information for the "question_options" table.
	QuestionOptionsTable = &schema.Table{
		Name:       "question_options",
		Columns:    QuestionOptionsColumns,
		PrimaryKey: []*schema.Column{QuestionOptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_options_questions_question_options",
				Columns:    []*schema.Column{QuestionOptionsColumns[6]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// TestsColumns holds the columns for the "tests" table.
	TestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "name", Type: field.TypeString},
		{Name: "total_points", Type: field.TypeInt, Default: 0},
		{Name: "course_id", Type: field.TypeUUID, Nullable: true},
		{Name: "course_section_id", Type: field.TypeUUID, Nullable: true},
	}
	// TestsTable holds the schema information for the "tests" table.
	TestsTable = &schema.Table{
		Name:       "tests",
		Columns:    TestsColumns,
		PrimaryKey: []*schema.Column{TestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tests_courses_tests",
				Columns:    []*schema.Column{TestsColumns[6]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tests_course_sections_tests",
				Columns:    []*schema.Column{TestsColumns[7]},
				RefColumns: []*schema.Column{CourseSectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TestIgnoreQuestionsColumns holds the columns for the "test_ignore_questions" table.
	TestIgnoreQuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "reason", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "test_id", Type: field.TypeUUID},
		{Name: "question_id", Type: field.TypeUUID},
	}
	// TestIgnoreQuestionsTable holds the schema information for the "test_ignore_questions" table.
	TestIgnoreQuestionsTable = &schema.Table{
		Name:       "test_ignore_questions",
		Columns:    TestIgnoreQuestionsColumns,
		PrimaryKey: []*schema.Column{TestIgnoreQuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_ignore_questions_tests_test",
				Columns:    []*schema.Column{TestIgnoreQuestionsColumns[5]},
				RefColumns: []*schema.Column{TestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "test_ignore_questions_questions_question",
				Columns:    []*schema.Column{TestIgnoreQuestionsColumns[6]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TestQuestionCountsColumns holds the columns for the "test_question_counts" table.
	TestQuestionCountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "number_of_questions", Type: field.TypeInt, Default: 0},
		{Name: "points", Type: field.TypeInt, Default: 0},
		{Name: "test_id", Type: field.TypeUUID},
	}
	// TestQuestionCountsTable holds the schema information for the "test_question_counts" table.
	TestQuestionCountsTable = &schema.Table{
		Name:       "test_question_counts",
		Columns:    TestQuestionCountsColumns,
		PrimaryKey: []*schema.Column{TestQuestionCountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_question_counts_tests_test",
				Columns:    []*schema.Column{TestQuestionCountsColumns[6]},
				RefColumns: []*schema.Column{TestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TestSessionsColumns holds the columns for the "test_sessions" table.
	TestSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "expired_at", Type: field.TypeTime, Nullable: true},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "max_points", Type: field.TypeInt, Default: 0},
		{Name: "points_earned", Type: field.TypeInt, Default: 0},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "completed", "in_progress", "cancelled", "expired"}, Default: "pending"},
		{Name: "course_section_id", Type: field.TypeUUID, Nullable: true},
		{Name: "test_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID, Nullable: true},
	}
	// TestSessionsTable holds the schema information for the "test_sessions" table.
	TestSessionsTable = &schema.Table{
		Name:       "test_sessions",
		Columns:    TestSessionsColumns,
		PrimaryKey: []*schema.Column{TestSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_sessions_course_sections_test_sessions",
				Columns:    []*schema.Column{TestSessionsColumns[10]},
				RefColumns: []*schema.Column{CourseSectionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "test_sessions_tests_test_sessions",
				Columns:    []*schema.Column{TestSessionsColumns[11]},
				RefColumns: []*schema.Column{TestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "test_sessions_users_test_sessions",
				Columns:    []*schema.Column{TestSessionsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TestSessionAnswersColumns holds the columns for the "test_session_answers" table.
	TestSessionAnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "selected_option_text", Type: field.TypeString, Nullable: true},
		{Name: "points", Type: field.TypeInt, Nullable: true},
		{Name: "order", Type: field.TypeInt, Default: 1},
		{Name: "question_id", Type: field.TypeUUID},
		{Name: "selected_option_id", Type: field.TypeUUID, Nullable: true},
		{Name: "session_id", Type: field.TypeUUID},
	}
	// TestSessionAnswersTable holds the schema information for the "test_session_answers" table.
	TestSessionAnswersTable = &schema.Table{
		Name:       "test_session_answers",
		Columns:    TestSessionAnswersColumns,
		PrimaryKey: []*schema.Column{TestSessionAnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_session_answers_questions_user_question_answers",
				Columns:    []*schema.Column{TestSessionAnswersColumns[7]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "test_session_answers_question_options_user_question_answers",
				Columns:    []*schema.Column{TestSessionAnswersColumns[8]},
				RefColumns: []*schema.Column{QuestionOptionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "test_session_answers_test_sessions_test_session_question_answers",
				Columns:    []*schema.Column{TestSessionAnswersColumns[9]},
				RefColumns: []*schema.Column{TestSessionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TodosColumns holds the columns for the "todos" table.
	TodosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// TodosTable holds the schema information for the "todos" table.
	TodosTable = &schema.Table{
		Name:       "todos",
		Columns:    TodosColumns,
		PrimaryKey: []*schema.Column{TodosColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "avatar_id", Type: field.TypeUUID, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_media_user_media",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// VideosColumns holds the columns for the "videos" table.
	VideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "course_id", Type: field.TypeUUID},
		{Name: "section_id", Type: field.TypeUUID},
		{Name: "media_id", Type: field.TypeUUID},
	}
	// VideosTable holds the schema information for the "videos" table.
	VideosTable = &schema.Table{
		Name:       "videos",
		Columns:    VideosColumns,
		PrimaryKey: []*schema.Column{VideosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "videos_courses_course_videos",
				Columns:    []*schema.Column{VideosColumns[7]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "videos_course_sections_course_section_videos",
				Columns:    []*schema.Column{VideosColumns[8]},
				RefColumns: []*schema.Column{CourseSectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "videos_media_video_media",
				Columns:    []*schema.Column{VideosColumns[9]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// VideoQuestionTimestampsColumns holds the columns for the "video_question_timestamps" table.
	VideoQuestionTimestampsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp without time zone"}},
		{Name: "timestamp", Type: field.TypeInt},
		{Name: "question_id", Type: field.TypeUUID},
		{Name: "video_id", Type: field.TypeUUID},
	}
	// VideoQuestionTimestampsTable holds the schema information for the "video_question_timestamps" table.
	VideoQuestionTimestampsTable = &schema.Table{
		Name:       "video_question_timestamps",
		Columns:    VideoQuestionTimestampsColumns,
		PrimaryKey: []*schema.Column{VideoQuestionTimestampsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "video_question_timestamps_questions_video_question_timestamps_question",
				Columns:    []*schema.Column{VideoQuestionTimestampsColumns[5]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "video_question_timestamps_videos_video_question_timestamps_video",
				Columns:    []*schema.Column{VideoQuestionTimestampsColumns[6]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeUUID},
		{Name: "permission_id", Type: field.TypeUUID},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0], RolePermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_role_id",
				Columns:    []*schema.Column{RolePermissionsColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_permissions_permission_id",
				Columns:    []*schema.Column{RolePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TestQuestionCollectionsColumns holds the columns for the "test_question_collections" table.
	TestQuestionCollectionsColumns = []*schema.Column{
		{Name: "test_id", Type: field.TypeUUID},
		{Name: "question_collection_id", Type: field.TypeUUID},
	}
	// TestQuestionCollectionsTable holds the schema information for the "test_question_collections" table.
	TestQuestionCollectionsTable = &schema.Table{
		Name:       "test_question_collections",
		Columns:    TestQuestionCollectionsColumns,
		PrimaryKey: []*schema.Column{TestQuestionCollectionsColumns[0], TestQuestionCollectionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_question_collections_test_id",
				Columns:    []*schema.Column{TestQuestionCollectionsColumns[0]},
				RefColumns: []*schema.Column{TestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "test_question_collections_question_collection_id",
				Columns:    []*schema.Column{TestQuestionCollectionsColumns[1]},
				RefColumns: []*schema.Column{QuestionCollectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0], UserRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_user_id",
				Columns:    []*schema.Column{UserRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_roles_role_id",
				Columns:    []*schema.Column{UserRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CoursesTable,
		CourseSectionsTable,
		MediaTable,
		PermissionsTable,
		QuestionsTable,
		QuestionCollectionsTable,
		QuestionOptionsTable,
		RolesTable,
		TestsTable,
		TestIgnoreQuestionsTable,
		TestQuestionCountsTable,
		TestSessionsTable,
		TestSessionAnswersTable,
		TodosTable,
		UsersTable,
		VideosTable,
		VideoQuestionTimestampsTable,
		RolePermissionsTable,
		TestQuestionCollectionsTable,
		UserRolesTable,
	}
)

func init() {
	CoursesTable.ForeignKeys[0].RefTable = MediaTable
	CoursesTable.ForeignKeys[1].RefTable = UsersTable
	CourseSectionsTable.ForeignKeys[0].RefTable = CoursesTable
	CourseSectionsTable.ForeignKeys[1].RefTable = CourseSectionsTable
	MediaTable.ForeignKeys[0].RefTable = UsersTable
	QuestionsTable.ForeignKeys[0].RefTable = QuestionCollectionsTable
	QuestionCollectionsTable.ForeignKeys[0].RefTable = CourseSectionsTable
	QuestionCollectionsTable.ForeignKeys[1].RefTable = UsersTable
	QuestionOptionsTable.ForeignKeys[0].RefTable = QuestionsTable
	TestsTable.ForeignKeys[0].RefTable = CoursesTable
	TestsTable.ForeignKeys[1].RefTable = CourseSectionsTable
	TestIgnoreQuestionsTable.ForeignKeys[0].RefTable = TestsTable
	TestIgnoreQuestionsTable.ForeignKeys[1].RefTable = QuestionsTable
	TestQuestionCountsTable.ForeignKeys[0].RefTable = TestsTable
	TestSessionsTable.ForeignKeys[0].RefTable = CourseSectionsTable
	TestSessionsTable.ForeignKeys[1].RefTable = TestsTable
	TestSessionsTable.ForeignKeys[2].RefTable = UsersTable
	TestSessionAnswersTable.ForeignKeys[0].RefTable = QuestionsTable
	TestSessionAnswersTable.ForeignKeys[1].RefTable = QuestionOptionsTable
	TestSessionAnswersTable.ForeignKeys[2].RefTable = TestSessionsTable
	UsersTable.ForeignKeys[0].RefTable = MediaTable
	VideosTable.ForeignKeys[0].RefTable = CoursesTable
	VideosTable.ForeignKeys[1].RefTable = CourseSectionsTable
	VideosTable.ForeignKeys[2].RefTable = MediaTable
	VideoQuestionTimestampsTable.ForeignKeys[0].RefTable = QuestionsTable
	VideoQuestionTimestampsTable.ForeignKeys[1].RefTable = VideosTable
	RolePermissionsTable.ForeignKeys[0].RefTable = RolesTable
	RolePermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	TestQuestionCollectionsTable.ForeignKeys[0].RefTable = TestsTable
	TestQuestionCollectionsTable.ForeignKeys[1].RefTable = QuestionCollectionsTable
	UserRolesTable.ForeignKeys[0].RefTable = UsersTable
	UserRolesTable.ForeignKeys[1].RefTable = RolesTable
}
