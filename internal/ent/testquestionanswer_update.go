// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/testquestionanswer"
	"template/internal/ent/testsession"
	"template/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionAnswerUpdate is the builder for updating TestQuestionAnswer entities.
type TestQuestionAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *TestQuestionAnswerMutation
}

// Where appends a list predicates to the TestQuestionAnswerUpdate builder.
func (tqau *TestQuestionAnswerUpdate) Where(ps ...predicate.TestQuestionAnswer) *TestQuestionAnswerUpdate {
	tqau.mutation.Where(ps...)
	return tqau
}

// SetCreatedAt sets the "created_at" field.
func (tqau *TestQuestionAnswerUpdate) SetCreatedAt(t time.Time) *TestQuestionAnswerUpdate {
	tqau.mutation.SetCreatedAt(t)
	return tqau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableCreatedAt(t *time.Time) *TestQuestionAnswerUpdate {
	if t != nil {
		tqau.SetCreatedAt(*t)
	}
	return tqau
}

// SetUpdatedAt sets the "updated_at" field.
func (tqau *TestQuestionAnswerUpdate) SetUpdatedAt(t time.Time) *TestQuestionAnswerUpdate {
	tqau.mutation.SetUpdatedAt(t)
	return tqau
}

// SetDeletedAt sets the "deleted_at" field.
func (tqau *TestQuestionAnswerUpdate) SetDeletedAt(t time.Time) *TestQuestionAnswerUpdate {
	tqau.mutation.SetDeletedAt(t)
	return tqau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableDeletedAt(t *time.Time) *TestQuestionAnswerUpdate {
	if t != nil {
		tqau.SetDeletedAt(*t)
	}
	return tqau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqau *TestQuestionAnswerUpdate) ClearDeletedAt() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearDeletedAt()
	return tqau
}

// SetUserID sets the "user_id" field.
func (tqau *TestQuestionAnswerUpdate) SetUserID(u uuid.UUID) *TestQuestionAnswerUpdate {
	tqau.mutation.SetUserID(u)
	return tqau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableUserID(u *uuid.UUID) *TestQuestionAnswerUpdate {
	if u != nil {
		tqau.SetUserID(*u)
	}
	return tqau
}

// SetQuestionID sets the "question_id" field.
func (tqau *TestQuestionAnswerUpdate) SetQuestionID(u uuid.UUID) *TestQuestionAnswerUpdate {
	tqau.mutation.SetQuestionID(u)
	return tqau
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableQuestionID(u *uuid.UUID) *TestQuestionAnswerUpdate {
	if u != nil {
		tqau.SetQuestionID(*u)
	}
	return tqau
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (tqau *TestQuestionAnswerUpdate) SetSelectedOptionID(u uuid.UUID) *TestQuestionAnswerUpdate {
	tqau.mutation.SetSelectedOptionID(u)
	return tqau
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableSelectedOptionID(u *uuid.UUID) *TestQuestionAnswerUpdate {
	if u != nil {
		tqau.SetSelectedOptionID(*u)
	}
	return tqau
}

// ClearSelectedOptionID clears the value of the "selected_option_id" field.
func (tqau *TestQuestionAnswerUpdate) ClearSelectedOptionID() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearSelectedOptionID()
	return tqau
}

// SetSessionID sets the "session_id" field.
func (tqau *TestQuestionAnswerUpdate) SetSessionID(u uuid.UUID) *TestQuestionAnswerUpdate {
	tqau.mutation.SetSessionID(u)
	return tqau
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableSessionID(u *uuid.UUID) *TestQuestionAnswerUpdate {
	if u != nil {
		tqau.SetSessionID(*u)
	}
	return tqau
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (tqau *TestQuestionAnswerUpdate) SetSelectedOptionText(s string) *TestQuestionAnswerUpdate {
	tqau.mutation.SetSelectedOptionText(s)
	return tqau
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (tqau *TestQuestionAnswerUpdate) SetNillableSelectedOptionText(s *string) *TestQuestionAnswerUpdate {
	if s != nil {
		tqau.SetSelectedOptionText(*s)
	}
	return tqau
}

// ClearSelectedOptionText clears the value of the "selected_option_text" field.
func (tqau *TestQuestionAnswerUpdate) ClearSelectedOptionText() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearSelectedOptionText()
	return tqau
}

// SetUser sets the "user" edge to the User entity.
func (tqau *TestQuestionAnswerUpdate) SetUser(u *User) *TestQuestionAnswerUpdate {
	return tqau.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqau *TestQuestionAnswerUpdate) SetQuestion(q *Question) *TestQuestionAnswerUpdate {
	return tqau.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (tqau *TestQuestionAnswerUpdate) SetSelectedOption(q *QuestionOption) *TestQuestionAnswerUpdate {
	return tqau.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (tqau *TestQuestionAnswerUpdate) SetTestSessionID(id uuid.UUID) *TestQuestionAnswerUpdate {
	tqau.mutation.SetTestSessionID(id)
	return tqau
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (tqau *TestQuestionAnswerUpdate) SetTestSession(t *TestSession) *TestQuestionAnswerUpdate {
	return tqau.SetTestSessionID(t.ID)
}

// Mutation returns the TestQuestionAnswerMutation object of the builder.
func (tqau *TestQuestionAnswerUpdate) Mutation() *TestQuestionAnswerMutation {
	return tqau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tqau *TestQuestionAnswerUpdate) ClearUser() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearUser()
	return tqau
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tqau *TestQuestionAnswerUpdate) ClearQuestion() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearQuestion()
	return tqau
}

// ClearSelectedOption clears the "selected_option" edge to the QuestionOption entity.
func (tqau *TestQuestionAnswerUpdate) ClearSelectedOption() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearSelectedOption()
	return tqau
}

// ClearTestSession clears the "test_session" edge to the TestSession entity.
func (tqau *TestQuestionAnswerUpdate) ClearTestSession() *TestQuestionAnswerUpdate {
	tqau.mutation.ClearTestSession()
	return tqau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqau *TestQuestionAnswerUpdate) Save(ctx context.Context) (int, error) {
	if err := tqau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tqau.sqlSave, tqau.mutation, tqau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqau *TestQuestionAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := tqau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqau *TestQuestionAnswerUpdate) Exec(ctx context.Context) error {
	_, err := tqau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqau *TestQuestionAnswerUpdate) ExecX(ctx context.Context) {
	if err := tqau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqau *TestQuestionAnswerUpdate) defaults() error {
	if _, ok := tqau.mutation.UpdatedAt(); !ok {
		if testquestionanswer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionanswer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionanswer.UpdateDefaultUpdatedAt()
		tqau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqau *TestQuestionAnswerUpdate) check() error {
	if tqau.mutation.UserCleared() && len(tqau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionAnswer.user"`)
	}
	if tqau.mutation.QuestionCleared() && len(tqau.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionAnswer.question"`)
	}
	if tqau.mutation.TestSessionCleared() && len(tqau.mutation.TestSessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionAnswer.test_session"`)
	}
	return nil
}

func (tqau *TestQuestionAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tqau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testquestionanswer.Table, testquestionanswer.Columns, sqlgraph.NewFieldSpec(testquestionanswer.FieldID, field.TypeUUID))
	if ps := tqau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqau.mutation.CreatedAt(); ok {
		_spec.SetField(testquestionanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tqau.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestionanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tqau.mutation.DeletedAt(); ok {
		_spec.SetField(testquestionanswer.FieldDeletedAt, field.TypeTime, value)
	}
	if tqau.mutation.DeletedAtCleared() {
		_spec.ClearField(testquestionanswer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tqau.mutation.SelectedOptionText(); ok {
		_spec.SetField(testquestionanswer.FieldSelectedOptionText, field.TypeString, value)
	}
	if tqau.mutation.SelectedOptionTextCleared() {
		_spec.ClearField(testquestionanswer.FieldSelectedOptionText, field.TypeString)
	}
	if tqau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.UserTable,
			Columns: []string{testquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.UserTable,
			Columns: []string{testquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqau.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.QuestionTable,
			Columns: []string{testquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqau.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.QuestionTable,
			Columns: []string{testquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqau.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.SelectedOptionTable,
			Columns: []string{testquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqau.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.SelectedOptionTable,
			Columns: []string{testquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqau.mutation.TestSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.TestSessionTable,
			Columns: []string{testquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqau.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.TestSessionTable,
			Columns: []string{testquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testquestionanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tqau.mutation.done = true
	return n, nil
}

// TestQuestionAnswerUpdateOne is the builder for updating a single TestQuestionAnswer entity.
type TestQuestionAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestQuestionAnswerMutation
}

// SetCreatedAt sets the "created_at" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetCreatedAt(t time.Time) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetCreatedAt(t)
	return tqauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableCreatedAt(t *time.Time) *TestQuestionAnswerUpdateOne {
	if t != nil {
		tqauo.SetCreatedAt(*t)
	}
	return tqauo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetUpdatedAt(t time.Time) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetUpdatedAt(t)
	return tqauo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetDeletedAt(t time.Time) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetDeletedAt(t)
	return tqauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableDeletedAt(t *time.Time) *TestQuestionAnswerUpdateOne {
	if t != nil {
		tqauo.SetDeletedAt(*t)
	}
	return tqauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqauo *TestQuestionAnswerUpdateOne) ClearDeletedAt() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearDeletedAt()
	return tqauo
}

// SetUserID sets the "user_id" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetUserID(u uuid.UUID) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetUserID(u)
	return tqauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableUserID(u *uuid.UUID) *TestQuestionAnswerUpdateOne {
	if u != nil {
		tqauo.SetUserID(*u)
	}
	return tqauo
}

// SetQuestionID sets the "question_id" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetQuestionID(u uuid.UUID) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetQuestionID(u)
	return tqauo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableQuestionID(u *uuid.UUID) *TestQuestionAnswerUpdateOne {
	if u != nil {
		tqauo.SetQuestionID(*u)
	}
	return tqauo
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetSelectedOptionID(u uuid.UUID) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetSelectedOptionID(u)
	return tqauo
}

// SetNillableSelectedOptionID sets the "selected_option_id" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableSelectedOptionID(u *uuid.UUID) *TestQuestionAnswerUpdateOne {
	if u != nil {
		tqauo.SetSelectedOptionID(*u)
	}
	return tqauo
}

// ClearSelectedOptionID clears the value of the "selected_option_id" field.
func (tqauo *TestQuestionAnswerUpdateOne) ClearSelectedOptionID() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearSelectedOptionID()
	return tqauo
}

// SetSessionID sets the "session_id" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetSessionID(u uuid.UUID) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetSessionID(u)
	return tqauo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableSessionID(u *uuid.UUID) *TestQuestionAnswerUpdateOne {
	if u != nil {
		tqauo.SetSessionID(*u)
	}
	return tqauo
}

// SetSelectedOptionText sets the "selected_option_text" field.
func (tqauo *TestQuestionAnswerUpdateOne) SetSelectedOptionText(s string) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetSelectedOptionText(s)
	return tqauo
}

// SetNillableSelectedOptionText sets the "selected_option_text" field if the given value is not nil.
func (tqauo *TestQuestionAnswerUpdateOne) SetNillableSelectedOptionText(s *string) *TestQuestionAnswerUpdateOne {
	if s != nil {
		tqauo.SetSelectedOptionText(*s)
	}
	return tqauo
}

// ClearSelectedOptionText clears the value of the "selected_option_text" field.
func (tqauo *TestQuestionAnswerUpdateOne) ClearSelectedOptionText() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearSelectedOptionText()
	return tqauo
}

// SetUser sets the "user" edge to the User entity.
func (tqauo *TestQuestionAnswerUpdateOne) SetUser(u *User) *TestQuestionAnswerUpdateOne {
	return tqauo.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqauo *TestQuestionAnswerUpdateOne) SetQuestion(q *Question) *TestQuestionAnswerUpdateOne {
	return tqauo.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (tqauo *TestQuestionAnswerUpdateOne) SetSelectedOption(q *QuestionOption) *TestQuestionAnswerUpdateOne {
	return tqauo.SetSelectedOptionID(q.ID)
}

// SetTestSessionID sets the "test_session" edge to the TestSession entity by ID.
func (tqauo *TestQuestionAnswerUpdateOne) SetTestSessionID(id uuid.UUID) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.SetTestSessionID(id)
	return tqauo
}

// SetTestSession sets the "test_session" edge to the TestSession entity.
func (tqauo *TestQuestionAnswerUpdateOne) SetTestSession(t *TestSession) *TestQuestionAnswerUpdateOne {
	return tqauo.SetTestSessionID(t.ID)
}

// Mutation returns the TestQuestionAnswerMutation object of the builder.
func (tqauo *TestQuestionAnswerUpdateOne) Mutation() *TestQuestionAnswerMutation {
	return tqauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tqauo *TestQuestionAnswerUpdateOne) ClearUser() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearUser()
	return tqauo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tqauo *TestQuestionAnswerUpdateOne) ClearQuestion() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearQuestion()
	return tqauo
}

// ClearSelectedOption clears the "selected_option" edge to the QuestionOption entity.
func (tqauo *TestQuestionAnswerUpdateOne) ClearSelectedOption() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearSelectedOption()
	return tqauo
}

// ClearTestSession clears the "test_session" edge to the TestSession entity.
func (tqauo *TestQuestionAnswerUpdateOne) ClearTestSession() *TestQuestionAnswerUpdateOne {
	tqauo.mutation.ClearTestSession()
	return tqauo
}

// Where appends a list predicates to the TestQuestionAnswerUpdate builder.
func (tqauo *TestQuestionAnswerUpdateOne) Where(ps ...predicate.TestQuestionAnswer) *TestQuestionAnswerUpdateOne {
	tqauo.mutation.Where(ps...)
	return tqauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqauo *TestQuestionAnswerUpdateOne) Select(field string, fields ...string) *TestQuestionAnswerUpdateOne {
	tqauo.fields = append([]string{field}, fields...)
	return tqauo
}

// Save executes the query and returns the updated TestQuestionAnswer entity.
func (tqauo *TestQuestionAnswerUpdateOne) Save(ctx context.Context) (*TestQuestionAnswer, error) {
	if err := tqauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tqauo.sqlSave, tqauo.mutation, tqauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqauo *TestQuestionAnswerUpdateOne) SaveX(ctx context.Context) *TestQuestionAnswer {
	node, err := tqauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqauo *TestQuestionAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := tqauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqauo *TestQuestionAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := tqauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqauo *TestQuestionAnswerUpdateOne) defaults() error {
	if _, ok := tqauo.mutation.UpdatedAt(); !ok {
		if testquestionanswer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionanswer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionanswer.UpdateDefaultUpdatedAt()
		tqauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqauo *TestQuestionAnswerUpdateOne) check() error {
	if tqauo.mutation.UserCleared() && len(tqauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionAnswer.user"`)
	}
	if tqauo.mutation.QuestionCleared() && len(tqauo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionAnswer.question"`)
	}
	if tqauo.mutation.TestSessionCleared() && len(tqauo.mutation.TestSessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionAnswer.test_session"`)
	}
	return nil
}

func (tqauo *TestQuestionAnswerUpdateOne) sqlSave(ctx context.Context) (_node *TestQuestionAnswer, err error) {
	if err := tqauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testquestionanswer.Table, testquestionanswer.Columns, sqlgraph.NewFieldSpec(testquestionanswer.FieldID, field.TypeUUID))
	id, ok := tqauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestQuestionAnswer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tqauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testquestionanswer.FieldID)
		for _, f := range fields {
			if !testquestionanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testquestionanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqauo.mutation.CreatedAt(); ok {
		_spec.SetField(testquestionanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tqauo.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestionanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tqauo.mutation.DeletedAt(); ok {
		_spec.SetField(testquestionanswer.FieldDeletedAt, field.TypeTime, value)
	}
	if tqauo.mutation.DeletedAtCleared() {
		_spec.ClearField(testquestionanswer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tqauo.mutation.SelectedOptionText(); ok {
		_spec.SetField(testquestionanswer.FieldSelectedOptionText, field.TypeString, value)
	}
	if tqauo.mutation.SelectedOptionTextCleared() {
		_spec.ClearField(testquestionanswer.FieldSelectedOptionText, field.TypeString)
	}
	if tqauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.UserTable,
			Columns: []string{testquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.UserTable,
			Columns: []string{testquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqauo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.QuestionTable,
			Columns: []string{testquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqauo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.QuestionTable,
			Columns: []string{testquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqauo.mutation.SelectedOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.SelectedOptionTable,
			Columns: []string{testquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqauo.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.SelectedOptionTable,
			Columns: []string{testquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqauo.mutation.TestSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.TestSessionTable,
			Columns: []string{testquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqauo.mutation.TestSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testquestionanswer.TestSessionTable,
			Columns: []string{testquestionanswer.TestSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestQuestionAnswer{config: tqauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testquestionanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tqauo.mutation.done = true
	return _node, nil
}
