// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/test"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Test is the model entity for the Test schema.
type Test struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CourseSectionID holds the value of the "course_section_id" field.
	CourseSectionID *uuid.UUID `json:"course_section_id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID *uuid.UUID `json:"course_id,omitempty"`
	// TotalPoints holds the value of the "total_points" field.
	TotalPoints int `json:"total_points,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestQuery when eager-loading is set.
	Edges        TestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestEdges holds the relations/edges for other nodes in the graph.
type TestEdges struct {
	// CourseSection holds the value of the course_section edge.
	CourseSection *CourseSection `json:"course_section,omitempty"`
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// TestSessions holds the value of the test_sessions edge.
	TestSessions []*TestSession `json:"test_sessions,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// QuestionCollections holds the value of the question_collections edge.
	QuestionCollections []*QuestionCollection `json:"question_collections,omitempty"`
	// TestQuestionCounts holds the value of the test_question_counts edge.
	TestQuestionCounts []*TestQuestionCount `json:"test_question_counts,omitempty"`
	// TestIgnoreQuestions holds the value of the test_ignore_questions edge.
	TestIgnoreQuestions []*TestIgnoreQuestion `json:"test_ignore_questions,omitempty"`
	// TestQuestionPoints holds the value of the test_question_points edge.
	TestQuestionPoints []*TestQuestionPoint `json:"test_question_points,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestEdges) CourseSectionOrErr() (*CourseSection, error) {
	if e.CourseSection != nil {
		return e.CourseSection, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coursesection.Label}
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// TestSessionsOrErr returns the TestSessions value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) TestSessionsOrErr() ([]*TestSession, error) {
	if e.loadedTypes[2] {
		return e.TestSessions, nil
	}
	return nil, &NotLoadedError{edge: "test_sessions"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[3] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// QuestionCollectionsOrErr returns the QuestionCollections value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) QuestionCollectionsOrErr() ([]*QuestionCollection, error) {
	if e.loadedTypes[4] {
		return e.QuestionCollections, nil
	}
	return nil, &NotLoadedError{edge: "question_collections"}
}

// TestQuestionCountsOrErr returns the TestQuestionCounts value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) TestQuestionCountsOrErr() ([]*TestQuestionCount, error) {
	if e.loadedTypes[5] {
		return e.TestQuestionCounts, nil
	}
	return nil, &NotLoadedError{edge: "test_question_counts"}
}

// TestIgnoreQuestionsOrErr returns the TestIgnoreQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) TestIgnoreQuestionsOrErr() ([]*TestIgnoreQuestion, error) {
	if e.loadedTypes[6] {
		return e.TestIgnoreQuestions, nil
	}
	return nil, &NotLoadedError{edge: "test_ignore_questions"}
}

// TestQuestionPointsOrErr returns the TestQuestionPoints value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) TestQuestionPointsOrErr() ([]*TestQuestionPoint, error) {
	if e.loadedTypes[7] {
		return e.TestQuestionPoints, nil
	}
	return nil, &NotLoadedError{edge: "test_question_points"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Test) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case test.FieldCourseSectionID, test.FieldCourseID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case test.FieldTotalPoints:
			values[i] = new(sql.NullInt64)
		case test.FieldName:
			values[i] = new(sql.NullString)
		case test.FieldCreatedAt, test.FieldUpdatedAt, test.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case test.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Test fields.
func (t *Test) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case test.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case test.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case test.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case test.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = new(time.Time)
				*t.DeletedAt = value.Time
			}
		case test.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case test.FieldCourseSectionID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field course_section_id", values[i])
			} else if value.Valid {
				t.CourseSectionID = new(uuid.UUID)
				*t.CourseSectionID = *value.S.(*uuid.UUID)
			}
		case test.FieldCourseID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				t.CourseID = new(uuid.UUID)
				*t.CourseID = *value.S.(*uuid.UUID)
			}
		case test.FieldTotalPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_points", values[i])
			} else if value.Valid {
				t.TotalPoints = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Test.
// This includes values selected through modifiers, order, etc.
func (t *Test) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCourseSection queries the "course_section" edge of the Test entity.
func (t *Test) QueryCourseSection() *CourseSectionQuery {
	return NewTestClient(t.config).QueryCourseSection(t)
}

// QueryCourse queries the "course" edge of the Test entity.
func (t *Test) QueryCourse() *CourseQuery {
	return NewTestClient(t.config).QueryCourse(t)
}

// QueryTestSessions queries the "test_sessions" edge of the Test entity.
func (t *Test) QueryTestSessions() *TestSessionQuery {
	return NewTestClient(t.config).QueryTestSessions(t)
}

// QueryQuestions queries the "questions" edge of the Test entity.
func (t *Test) QueryQuestions() *QuestionQuery {
	return NewTestClient(t.config).QueryQuestions(t)
}

// QueryQuestionCollections queries the "question_collections" edge of the Test entity.
func (t *Test) QueryQuestionCollections() *QuestionCollectionQuery {
	return NewTestClient(t.config).QueryQuestionCollections(t)
}

// QueryTestQuestionCounts queries the "test_question_counts" edge of the Test entity.
func (t *Test) QueryTestQuestionCounts() *TestQuestionCountQuery {
	return NewTestClient(t.config).QueryTestQuestionCounts(t)
}

// QueryTestIgnoreQuestions queries the "test_ignore_questions" edge of the Test entity.
func (t *Test) QueryTestIgnoreQuestions() *TestIgnoreQuestionQuery {
	return NewTestClient(t.config).QueryTestIgnoreQuestions(t)
}

// QueryTestQuestionPoints queries the "test_question_points" edge of the Test entity.
func (t *Test) QueryTestQuestionPoints() *TestQuestionPointQuery {
	return NewTestClient(t.config).QueryTestQuestionPoints(t)
}

// Update returns a builder for updating this Test.
// Note that you need to call Test.Unwrap() before calling this method if this Test
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Test) Update() *TestUpdateOne {
	return NewTestClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Test entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Test) Unwrap() *Test {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Test is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Test) String() string {
	var builder strings.Builder
	builder.WriteString("Test(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	if v := t.CourseSectionID; v != nil {
		builder.WriteString("course_section_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CourseID; v != nil {
		builder.WriteString("course_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("total_points=")
	builder.WriteString(fmt.Sprintf("%v", t.TotalPoints))
	builder.WriteByte(')')
	return builder.String()
}

// Tests is a parsable slice of Test.
type Tests []*Test
