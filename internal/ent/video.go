// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"template/internal/ent/course"
	"template/internal/ent/coursesection"
	"template/internal/ent/media"
	"template/internal/ent/video"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Video is the model entity for the Video schema.
type Video struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// SectionID holds the value of the "section_id" field.
	SectionID string `json:"section_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// MediaID holds the value of the "media_id" field.
	MediaID string `json:"media_id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID string `json:"course_id,omitempty"`
	// Duration in seconds
	Duration int `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoQuery when eager-loading is set.
	Edges        VideoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VideoEdges holds the relations/edges for other nodes in the graph.
type VideoEdges struct {
	// CourseSection holds the value of the course_section edge.
	CourseSection *CourseSection `json:"course_section,omitempty"`
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// VideoQuestionTimestampsVideo holds the value of the video_question_timestamps_video edge.
	VideoQuestionTimestampsVideo []*VideoQuestionTimestamp `json:"video_question_timestamps_video,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CourseSectionOrErr returns the CourseSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) CourseSectionOrErr() (*CourseSection, error) {
	if e.CourseSection != nil {
		return e.CourseSection, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coursesection.Label}
	}
	return nil, &NotLoadedError{edge: "course_section"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// VideoQuestionTimestampsVideoOrErr returns the VideoQuestionTimestampsVideo value or an error if the edge
// was not loaded in eager-loading.
func (e VideoEdges) VideoQuestionTimestampsVideoOrErr() ([]*VideoQuestionTimestamp, error) {
	if e.loadedTypes[3] {
		return e.VideoQuestionTimestampsVideo, nil
	}
	return nil, &NotLoadedError{edge: "video_question_timestamps_video"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Video) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case video.FieldDuration:
			values[i] = new(sql.NullInt64)
		case video.FieldID, video.FieldSectionID, video.FieldTitle, video.FieldDescription, video.FieldMediaID, video.FieldCourseID:
			values[i] = new(sql.NullString)
		case video.FieldCreatedAt, video.FieldUpdatedAt, video.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Video fields.
func (v *Video) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case video.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case video.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case video.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = new(time.Time)
				*v.DeletedAt = value.Time
			}
		case video.FieldSectionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field section_id", values[i])
			} else if value.Valid {
				v.SectionID = value.String
			}
		case video.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				v.Title = value.String
			}
		case video.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case video.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				v.MediaID = value.String
			}
		case video.FieldCourseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				v.CourseID = value.String
			}
		case video.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				v.Duration = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Video.
// This includes values selected through modifiers, order, etc.
func (v *Video) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryCourseSection queries the "course_section" edge of the Video entity.
func (v *Video) QueryCourseSection() *CourseSectionQuery {
	return NewVideoClient(v.config).QueryCourseSection(v)
}

// QueryMedia queries the "media" edge of the Video entity.
func (v *Video) QueryMedia() *MediaQuery {
	return NewVideoClient(v.config).QueryMedia(v)
}

// QueryCourse queries the "course" edge of the Video entity.
func (v *Video) QueryCourse() *CourseQuery {
	return NewVideoClient(v.config).QueryCourse(v)
}

// QueryVideoQuestionTimestampsVideo queries the "video_question_timestamps_video" edge of the Video entity.
func (v *Video) QueryVideoQuestionTimestampsVideo() *VideoQuestionTimestampQuery {
	return NewVideoClient(v.config).QueryVideoQuestionTimestampsVideo(v)
}

// Update returns a builder for updating this Video.
// Note that you need to call Video.Unwrap() before calling this method if this Video
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Video) Update() *VideoUpdateOne {
	return NewVideoClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Video entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Video) Unwrap() *Video {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Video is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Video) String() string {
	var builder strings.Builder
	builder.WriteString("Video(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := v.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("section_id=")
	builder.WriteString(v.SectionID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(v.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(v.Description)
	builder.WriteString(", ")
	builder.WriteString("media_id=")
	builder.WriteString(v.MediaID)
	builder.WriteString(", ")
	builder.WriteString("course_id=")
	builder.WriteString(v.CourseID)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", v.Duration))
	builder.WriteByte(')')
	return builder.String()
}

// Videos is a parsable slice of Video.
type Videos []*Video
