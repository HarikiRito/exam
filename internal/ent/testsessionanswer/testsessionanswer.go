// Code generated by ent, DO NOT EDIT.

package testsessionanswer

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the testsessionanswer type in the database.
	Label = "test_session_answer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldQuestionID holds the string denoting the question_id field in the database.
	FieldQuestionID = "question_id"
	// FieldSelectedOptionID holds the string denoting the selected_option_id field in the database.
	FieldSelectedOptionID = "selected_option_id"
	// FieldSessionID holds the string denoting the session_id field in the database.
	FieldSessionID = "session_id"
	// FieldSelectedOptionText holds the string denoting the selected_option_text field in the database.
	FieldSelectedOptionText = "selected_option_text"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeSelectedOption holds the string denoting the selected_option edge name in mutations.
	EdgeSelectedOption = "selected_option"
	// EdgeTestSession holds the string denoting the test_session edge name in mutations.
	EdgeTestSession = "test_session"
	// Table holds the table name of the testsessionanswer in the database.
	Table = "test_session_answers"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "test_session_answers"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "test_session_answers"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_id"
	// SelectedOptionTable is the table that holds the selected_option relation/edge.
	SelectedOptionTable = "test_session_answers"
	// SelectedOptionInverseTable is the table name for the QuestionOption entity.
	// It exists in this package in order to avoid circular dependency with the "questionoption" package.
	SelectedOptionInverseTable = "question_options"
	// SelectedOptionColumn is the table column denoting the selected_option relation/edge.
	SelectedOptionColumn = "selected_option_id"
	// TestSessionTable is the table that holds the test_session relation/edge.
	TestSessionTable = "test_session_answers"
	// TestSessionInverseTable is the table name for the TestSession entity.
	// It exists in this package in order to avoid circular dependency with the "testsession" package.
	TestSessionInverseTable = "test_sessions"
	// TestSessionColumn is the table column denoting the test_session relation/edge.
	TestSessionColumn = "session_id"
)

// Columns holds all SQL columns for testsessionanswer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldQuestionID,
	FieldSelectedOptionID,
	FieldSessionID,
	FieldSelectedOptionText,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "template/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TestSessionAnswer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByQuestionID orders the results by the question_id field.
func ByQuestionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionID, opts...).ToFunc()
}

// BySelectedOptionID orders the results by the selected_option_id field.
func BySelectedOptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedOptionID, opts...).ToFunc()
}

// BySessionID orders the results by the session_id field.
func BySessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionID, opts...).ToFunc()
}

// BySelectedOptionText orders the results by the selected_option_text field.
func BySelectedOptionText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedOptionText, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// BySelectedOptionField orders the results by selected_option field.
func BySelectedOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestSessionField orders the results by test_session field.
func ByTestSessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
func newSelectedOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SelectedOptionTable, SelectedOptionColumn),
	)
}
func newTestSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TestSessionTable, TestSessionColumn),
	)
}
