// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/coursesession"
	"template/internal/ent/question"
	"template/internal/ent/questionoption"
	"template/internal/ent/user"
	"template/internal/ent/userquestionanswer"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserQuestionAnswerCreate is the builder for creating a UserQuestionAnswer entity.
type UserQuestionAnswerCreate struct {
	config
	mutation *UserQuestionAnswerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uqac *UserQuestionAnswerCreate) SetCreatedAt(t time.Time) *UserQuestionAnswerCreate {
	uqac.mutation.SetCreatedAt(t)
	return uqac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uqac *UserQuestionAnswerCreate) SetNillableCreatedAt(t *time.Time) *UserQuestionAnswerCreate {
	if t != nil {
		uqac.SetCreatedAt(*t)
	}
	return uqac
}

// SetUpdatedAt sets the "updated_at" field.
func (uqac *UserQuestionAnswerCreate) SetUpdatedAt(t time.Time) *UserQuestionAnswerCreate {
	uqac.mutation.SetUpdatedAt(t)
	return uqac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uqac *UserQuestionAnswerCreate) SetNillableUpdatedAt(t *time.Time) *UserQuestionAnswerCreate {
	if t != nil {
		uqac.SetUpdatedAt(*t)
	}
	return uqac
}

// SetDeletedAt sets the "deleted_at" field.
func (uqac *UserQuestionAnswerCreate) SetDeletedAt(t time.Time) *UserQuestionAnswerCreate {
	uqac.mutation.SetDeletedAt(t)
	return uqac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uqac *UserQuestionAnswerCreate) SetNillableDeletedAt(t *time.Time) *UserQuestionAnswerCreate {
	if t != nil {
		uqac.SetDeletedAt(*t)
	}
	return uqac
}

// SetUserID sets the "user_id" field.
func (uqac *UserQuestionAnswerCreate) SetUserID(u uuid.UUID) *UserQuestionAnswerCreate {
	uqac.mutation.SetUserID(u)
	return uqac
}

// SetQuestionID sets the "question_id" field.
func (uqac *UserQuestionAnswerCreate) SetQuestionID(u uuid.UUID) *UserQuestionAnswerCreate {
	uqac.mutation.SetQuestionID(u)
	return uqac
}

// SetSelectedOptionID sets the "selected_option_id" field.
func (uqac *UserQuestionAnswerCreate) SetSelectedOptionID(u uuid.UUID) *UserQuestionAnswerCreate {
	uqac.mutation.SetSelectedOptionID(u)
	return uqac
}

// SetSessionID sets the "session_id" field.
func (uqac *UserQuestionAnswerCreate) SetSessionID(u uuid.UUID) *UserQuestionAnswerCreate {
	uqac.mutation.SetSessionID(u)
	return uqac
}

// SetID sets the "id" field.
func (uqac *UserQuestionAnswerCreate) SetID(u uuid.UUID) *UserQuestionAnswerCreate {
	uqac.mutation.SetID(u)
	return uqac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uqac *UserQuestionAnswerCreate) SetNillableID(u *uuid.UUID) *UserQuestionAnswerCreate {
	if u != nil {
		uqac.SetID(*u)
	}
	return uqac
}

// SetUser sets the "user" edge to the User entity.
func (uqac *UserQuestionAnswerCreate) SetUser(u *User) *UserQuestionAnswerCreate {
	return uqac.SetUserID(u.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (uqac *UserQuestionAnswerCreate) SetQuestion(q *Question) *UserQuestionAnswerCreate {
	return uqac.SetQuestionID(q.ID)
}

// SetSelectedOption sets the "selected_option" edge to the QuestionOption entity.
func (uqac *UserQuestionAnswerCreate) SetSelectedOption(q *QuestionOption) *UserQuestionAnswerCreate {
	return uqac.SetSelectedOptionID(q.ID)
}

// SetCourseSessionID sets the "course_session" edge to the CourseSession entity by ID.
func (uqac *UserQuestionAnswerCreate) SetCourseSessionID(id uuid.UUID) *UserQuestionAnswerCreate {
	uqac.mutation.SetCourseSessionID(id)
	return uqac
}

// SetCourseSession sets the "course_session" edge to the CourseSession entity.
func (uqac *UserQuestionAnswerCreate) SetCourseSession(c *CourseSession) *UserQuestionAnswerCreate {
	return uqac.SetCourseSessionID(c.ID)
}

// Mutation returns the UserQuestionAnswerMutation object of the builder.
func (uqac *UserQuestionAnswerCreate) Mutation() *UserQuestionAnswerMutation {
	return uqac.mutation
}

// Save creates the UserQuestionAnswer in the database.
func (uqac *UserQuestionAnswerCreate) Save(ctx context.Context) (*UserQuestionAnswer, error) {
	uqac.defaults()
	return withHooks(ctx, uqac.sqlSave, uqac.mutation, uqac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uqac *UserQuestionAnswerCreate) SaveX(ctx context.Context) *UserQuestionAnswer {
	v, err := uqac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uqac *UserQuestionAnswerCreate) Exec(ctx context.Context) error {
	_, err := uqac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqac *UserQuestionAnswerCreate) ExecX(ctx context.Context) {
	if err := uqac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uqac *UserQuestionAnswerCreate) defaults() {
	if _, ok := uqac.mutation.CreatedAt(); !ok {
		v := userquestionanswer.DefaultCreatedAt()
		uqac.mutation.SetCreatedAt(v)
	}
	if _, ok := uqac.mutation.UpdatedAt(); !ok {
		v := userquestionanswer.DefaultUpdatedAt()
		uqac.mutation.SetUpdatedAt(v)
	}
	if _, ok := uqac.mutation.ID(); !ok {
		v := userquestionanswer.DefaultID()
		uqac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uqac *UserQuestionAnswerCreate) check() error {
	if _, ok := uqac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserQuestionAnswer.created_at"`)}
	}
	if _, ok := uqac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserQuestionAnswer.updated_at"`)}
	}
	if _, ok := uqac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserQuestionAnswer.user_id"`)}
	}
	if _, ok := uqac.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "UserQuestionAnswer.question_id"`)}
	}
	if _, ok := uqac.mutation.SelectedOptionID(); !ok {
		return &ValidationError{Name: "selected_option_id", err: errors.New(`ent: missing required field "UserQuestionAnswer.selected_option_id"`)}
	}
	if _, ok := uqac.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "UserQuestionAnswer.session_id"`)}
	}
	if len(uqac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserQuestionAnswer.user"`)}
	}
	if len(uqac.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "UserQuestionAnswer.question"`)}
	}
	if len(uqac.mutation.SelectedOptionIDs()) == 0 {
		return &ValidationError{Name: "selected_option", err: errors.New(`ent: missing required edge "UserQuestionAnswer.selected_option"`)}
	}
	if len(uqac.mutation.CourseSessionIDs()) == 0 {
		return &ValidationError{Name: "course_session", err: errors.New(`ent: missing required edge "UserQuestionAnswer.course_session"`)}
	}
	return nil
}

func (uqac *UserQuestionAnswerCreate) sqlSave(ctx context.Context) (*UserQuestionAnswer, error) {
	if err := uqac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uqac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uqac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uqac.mutation.id = &_node.ID
	uqac.mutation.done = true
	return _node, nil
}

func (uqac *UserQuestionAnswerCreate) createSpec() (*UserQuestionAnswer, *sqlgraph.CreateSpec) {
	var (
		_node = &UserQuestionAnswer{config: uqac.config}
		_spec = sqlgraph.NewCreateSpec(userquestionanswer.Table, sqlgraph.NewFieldSpec(userquestionanswer.FieldID, field.TypeUUID))
	)
	if id, ok := uqac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uqac.mutation.CreatedAt(); ok {
		_spec.SetField(userquestionanswer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uqac.mutation.UpdatedAt(); ok {
		_spec.SetField(userquestionanswer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uqac.mutation.DeletedAt(); ok {
		_spec.SetField(userquestionanswer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := uqac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.UserTable,
			Columns: []string{userquestionanswer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uqac.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.QuestionTable,
			Columns: []string{userquestionanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uqac.mutation.SelectedOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.SelectedOptionTable,
			Columns: []string{userquestionanswer.SelectedOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SelectedOptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uqac.mutation.CourseSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionanswer.CourseSessionTable,
			Columns: []string{userquestionanswer.CourseSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SessionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserQuestionAnswerCreateBulk is the builder for creating many UserQuestionAnswer entities in bulk.
type UserQuestionAnswerCreateBulk struct {
	config
	err      error
	builders []*UserQuestionAnswerCreate
}

// Save creates the UserQuestionAnswer entities in the database.
func (uqacb *UserQuestionAnswerCreateBulk) Save(ctx context.Context) ([]*UserQuestionAnswer, error) {
	if uqacb.err != nil {
		return nil, uqacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uqacb.builders))
	nodes := make([]*UserQuestionAnswer, len(uqacb.builders))
	mutators := make([]Mutator, len(uqacb.builders))
	for i := range uqacb.builders {
		func(i int, root context.Context) {
			builder := uqacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserQuestionAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uqacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uqacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uqacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uqacb *UserQuestionAnswerCreateBulk) SaveX(ctx context.Context) []*UserQuestionAnswer {
	v, err := uqacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uqacb *UserQuestionAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := uqacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqacb *UserQuestionAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := uqacb.Exec(ctx); err != nil {
		panic(err)
	}
}
