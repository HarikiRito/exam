// Code generated by ent, DO NOT EDIT.

package question

import (
	"template/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldDeletedAt, v))
}

// CollectionID applies equality check predicate on the "collection_id" field. It's identical to CollectionIDEQ.
func CollectionID(v uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCollectionID, v))
}

// QuestionText applies equality check predicate on the "question_text" field. It's identical to QuestionTextEQ.
func QuestionText(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionText, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldDeletedAt))
}

// CollectionIDEQ applies the EQ predicate on the "collection_id" field.
func CollectionIDEQ(v uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCollectionID, v))
}

// CollectionIDNEQ applies the NEQ predicate on the "collection_id" field.
func CollectionIDNEQ(v uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCollectionID, v))
}

// CollectionIDIn applies the In predicate on the "collection_id" field.
func CollectionIDIn(vs ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCollectionID, vs...))
}

// CollectionIDNotIn applies the NotIn predicate on the "collection_id" field.
func CollectionIDNotIn(vs ...uuid.UUID) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCollectionID, vs...))
}

// QuestionTextEQ applies the EQ predicate on the "question_text" field.
func QuestionTextEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionText, v))
}

// QuestionTextNEQ applies the NEQ predicate on the "question_text" field.
func QuestionTextNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionText, v))
}

// QuestionTextIn applies the In predicate on the "question_text" field.
func QuestionTextIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionText, vs...))
}

// QuestionTextNotIn applies the NotIn predicate on the "question_text" field.
func QuestionTextNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionText, vs...))
}

// QuestionTextGT applies the GT predicate on the "question_text" field.
func QuestionTextGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuestionText, v))
}

// QuestionTextGTE applies the GTE predicate on the "question_text" field.
func QuestionTextGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuestionText, v))
}

// QuestionTextLT applies the LT predicate on the "question_text" field.
func QuestionTextLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuestionText, v))
}

// QuestionTextLTE applies the LTE predicate on the "question_text" field.
func QuestionTextLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuestionText, v))
}

// QuestionTextContains applies the Contains predicate on the "question_text" field.
func QuestionTextContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldQuestionText, v))
}

// QuestionTextHasPrefix applies the HasPrefix predicate on the "question_text" field.
func QuestionTextHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldQuestionText, v))
}

// QuestionTextHasSuffix applies the HasSuffix predicate on the "question_text" field.
func QuestionTextHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldQuestionText, v))
}

// QuestionTextEqualFold applies the EqualFold predicate on the "question_text" field.
func QuestionTextEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldQuestionText, v))
}

// QuestionTextContainsFold applies the ContainsFold predicate on the "question_text" field.
func QuestionTextContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldQuestionText, v))
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.QuestionCollection) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionOptions applies the HasEdge predicate on the "question_options" edge.
func HasQuestionOptions() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionOptionsTable, QuestionOptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionOptionsWith applies the HasEdge predicate on the "question_options" edge with a given conditions (other predicates).
func HasQuestionOptionsWith(preds ...predicate.QuestionOption) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newQuestionOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideoQuestionTimestampsQuestion applies the HasEdge predicate on the "video_question_timestamps_question" edge.
func HasVideoQuestionTimestampsQuestion() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoQuestionTimestampsQuestionTable, VideoQuestionTimestampsQuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoQuestionTimestampsQuestionWith applies the HasEdge predicate on the "video_question_timestamps_question" edge with a given conditions (other predicates).
func HasVideoQuestionTimestampsQuestionWith(preds ...predicate.VideoQuestionTimestamp) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newVideoQuestionTimestampsQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserQuestionAnswers applies the HasEdge predicate on the "user_question_answers" edge.
func HasUserQuestionAnswers() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserQuestionAnswersTable, UserQuestionAnswersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserQuestionAnswersWith applies the HasEdge predicate on the "user_question_answers" edge with a given conditions (other predicates).
func HasUserQuestionAnswersWith(preds ...predicate.UserQuestionAnswer) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newUserQuestionAnswersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTests applies the HasEdge predicate on the "tests" edge.
func HasTests() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TestsTable, TestsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestsWith applies the HasEdge predicate on the "tests" edge with a given conditions (other predicates).
func HasTestsWith(preds ...predicate.Test) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newTestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestIgnoreQuestions applies the HasEdge predicate on the "test_ignore_questions" edge.
func HasTestIgnoreQuestions() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TestIgnoreQuestionsTable, TestIgnoreQuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestIgnoreQuestionsWith applies the HasEdge predicate on the "test_ignore_questions" edge with a given conditions (other predicates).
func HasTestIgnoreQuestionsWith(preds ...predicate.TestIgnoreQuestion) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newTestIgnoreQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestQuestionPoints applies the HasEdge predicate on the "test_question_points" edge.
func HasTestQuestionPoints() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TestQuestionPointsTable, TestQuestionPointsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestQuestionPointsWith applies the HasEdge predicate on the "test_question_points" edge with a given conditions (other predicates).
func HasTestQuestionPointsWith(preds ...predicate.TestQuestionPoint) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newTestQuestionPointsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
