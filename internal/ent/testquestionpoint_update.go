// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/predicate"
	"template/internal/ent/question"
	"template/internal/ent/test"
	"template/internal/ent/testquestionpoint"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestQuestionPointUpdate is the builder for updating TestQuestionPoint entities.
type TestQuestionPointUpdate struct {
	config
	hooks    []Hook
	mutation *TestQuestionPointMutation
}

// Where appends a list predicates to the TestQuestionPointUpdate builder.
func (tqpu *TestQuestionPointUpdate) Where(ps ...predicate.TestQuestionPoint) *TestQuestionPointUpdate {
	tqpu.mutation.Where(ps...)
	return tqpu
}

// SetCreatedAt sets the "created_at" field.
func (tqpu *TestQuestionPointUpdate) SetCreatedAt(t time.Time) *TestQuestionPointUpdate {
	tqpu.mutation.SetCreatedAt(t)
	return tqpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqpu *TestQuestionPointUpdate) SetNillableCreatedAt(t *time.Time) *TestQuestionPointUpdate {
	if t != nil {
		tqpu.SetCreatedAt(*t)
	}
	return tqpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqpu *TestQuestionPointUpdate) SetUpdatedAt(t time.Time) *TestQuestionPointUpdate {
	tqpu.mutation.SetUpdatedAt(t)
	return tqpu
}

// SetDeletedAt sets the "deleted_at" field.
func (tqpu *TestQuestionPointUpdate) SetDeletedAt(t time.Time) *TestQuestionPointUpdate {
	tqpu.mutation.SetDeletedAt(t)
	return tqpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqpu *TestQuestionPointUpdate) SetNillableDeletedAt(t *time.Time) *TestQuestionPointUpdate {
	if t != nil {
		tqpu.SetDeletedAt(*t)
	}
	return tqpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqpu *TestQuestionPointUpdate) ClearDeletedAt() *TestQuestionPointUpdate {
	tqpu.mutation.ClearDeletedAt()
	return tqpu
}

// SetTestID sets the "test_id" field.
func (tqpu *TestQuestionPointUpdate) SetTestID(u uuid.UUID) *TestQuestionPointUpdate {
	tqpu.mutation.SetTestID(u)
	return tqpu
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tqpu *TestQuestionPointUpdate) SetNillableTestID(u *uuid.UUID) *TestQuestionPointUpdate {
	if u != nil {
		tqpu.SetTestID(*u)
	}
	return tqpu
}

// SetQuestionID sets the "question_id" field.
func (tqpu *TestQuestionPointUpdate) SetQuestionID(u uuid.UUID) *TestQuestionPointUpdate {
	tqpu.mutation.SetQuestionID(u)
	return tqpu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqpu *TestQuestionPointUpdate) SetNillableQuestionID(u *uuid.UUID) *TestQuestionPointUpdate {
	if u != nil {
		tqpu.SetQuestionID(*u)
	}
	return tqpu
}

// SetPoints sets the "points" field.
func (tqpu *TestQuestionPointUpdate) SetPoints(i int) *TestQuestionPointUpdate {
	tqpu.mutation.ResetPoints()
	tqpu.mutation.SetPoints(i)
	return tqpu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (tqpu *TestQuestionPointUpdate) SetNillablePoints(i *int) *TestQuestionPointUpdate {
	if i != nil {
		tqpu.SetPoints(*i)
	}
	return tqpu
}

// AddPoints adds i to the "points" field.
func (tqpu *TestQuestionPointUpdate) AddPoints(i int) *TestQuestionPointUpdate {
	tqpu.mutation.AddPoints(i)
	return tqpu
}

// SetTest sets the "test" edge to the Test entity.
func (tqpu *TestQuestionPointUpdate) SetTest(t *Test) *TestQuestionPointUpdate {
	return tqpu.SetTestID(t.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqpu *TestQuestionPointUpdate) SetQuestion(q *Question) *TestQuestionPointUpdate {
	return tqpu.SetQuestionID(q.ID)
}

// Mutation returns the TestQuestionPointMutation object of the builder.
func (tqpu *TestQuestionPointUpdate) Mutation() *TestQuestionPointMutation {
	return tqpu.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tqpu *TestQuestionPointUpdate) ClearTest() *TestQuestionPointUpdate {
	tqpu.mutation.ClearTest()
	return tqpu
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tqpu *TestQuestionPointUpdate) ClearQuestion() *TestQuestionPointUpdate {
	tqpu.mutation.ClearQuestion()
	return tqpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqpu *TestQuestionPointUpdate) Save(ctx context.Context) (int, error) {
	if err := tqpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tqpu.sqlSave, tqpu.mutation, tqpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqpu *TestQuestionPointUpdate) SaveX(ctx context.Context) int {
	affected, err := tqpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqpu *TestQuestionPointUpdate) Exec(ctx context.Context) error {
	_, err := tqpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqpu *TestQuestionPointUpdate) ExecX(ctx context.Context) {
	if err := tqpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqpu *TestQuestionPointUpdate) defaults() error {
	if _, ok := tqpu.mutation.UpdatedAt(); !ok {
		if testquestionpoint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionpoint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionpoint.UpdateDefaultUpdatedAt()
		tqpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqpu *TestQuestionPointUpdate) check() error {
	if tqpu.mutation.TestCleared() && len(tqpu.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionPoint.test"`)
	}
	if tqpu.mutation.QuestionCleared() && len(tqpu.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionPoint.question"`)
	}
	return nil
}

func (tqpu *TestQuestionPointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tqpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testquestionpoint.Table, testquestionpoint.Columns, sqlgraph.NewFieldSpec(testquestionpoint.FieldID, field.TypeUUID))
	if ps := tqpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqpu.mutation.CreatedAt(); ok {
		_spec.SetField(testquestionpoint.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tqpu.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestionpoint.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tqpu.mutation.DeletedAt(); ok {
		_spec.SetField(testquestionpoint.FieldDeletedAt, field.TypeTime, value)
	}
	if tqpu.mutation.DeletedAtCleared() {
		_spec.ClearField(testquestionpoint.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tqpu.mutation.Points(); ok {
		_spec.SetField(testquestionpoint.FieldPoints, field.TypeInt, value)
	}
	if value, ok := tqpu.mutation.AddedPoints(); ok {
		_spec.AddField(testquestionpoint.FieldPoints, field.TypeInt, value)
	}
	if tqpu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.TestTable,
			Columns: []string{testquestionpoint.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqpu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.TestTable,
			Columns: []string{testquestionpoint.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqpu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.QuestionTable,
			Columns: []string{testquestionpoint.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqpu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.QuestionTable,
			Columns: []string{testquestionpoint.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testquestionpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tqpu.mutation.done = true
	return n, nil
}

// TestQuestionPointUpdateOne is the builder for updating a single TestQuestionPoint entity.
type TestQuestionPointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestQuestionPointMutation
}

// SetCreatedAt sets the "created_at" field.
func (tqpuo *TestQuestionPointUpdateOne) SetCreatedAt(t time.Time) *TestQuestionPointUpdateOne {
	tqpuo.mutation.SetCreatedAt(t)
	return tqpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqpuo *TestQuestionPointUpdateOne) SetNillableCreatedAt(t *time.Time) *TestQuestionPointUpdateOne {
	if t != nil {
		tqpuo.SetCreatedAt(*t)
	}
	return tqpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tqpuo *TestQuestionPointUpdateOne) SetUpdatedAt(t time.Time) *TestQuestionPointUpdateOne {
	tqpuo.mutation.SetUpdatedAt(t)
	return tqpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tqpuo *TestQuestionPointUpdateOne) SetDeletedAt(t time.Time) *TestQuestionPointUpdateOne {
	tqpuo.mutation.SetDeletedAt(t)
	return tqpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tqpuo *TestQuestionPointUpdateOne) SetNillableDeletedAt(t *time.Time) *TestQuestionPointUpdateOne {
	if t != nil {
		tqpuo.SetDeletedAt(*t)
	}
	return tqpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tqpuo *TestQuestionPointUpdateOne) ClearDeletedAt() *TestQuestionPointUpdateOne {
	tqpuo.mutation.ClearDeletedAt()
	return tqpuo
}

// SetTestID sets the "test_id" field.
func (tqpuo *TestQuestionPointUpdateOne) SetTestID(u uuid.UUID) *TestQuestionPointUpdateOne {
	tqpuo.mutation.SetTestID(u)
	return tqpuo
}

// SetNillableTestID sets the "test_id" field if the given value is not nil.
func (tqpuo *TestQuestionPointUpdateOne) SetNillableTestID(u *uuid.UUID) *TestQuestionPointUpdateOne {
	if u != nil {
		tqpuo.SetTestID(*u)
	}
	return tqpuo
}

// SetQuestionID sets the "question_id" field.
func (tqpuo *TestQuestionPointUpdateOne) SetQuestionID(u uuid.UUID) *TestQuestionPointUpdateOne {
	tqpuo.mutation.SetQuestionID(u)
	return tqpuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (tqpuo *TestQuestionPointUpdateOne) SetNillableQuestionID(u *uuid.UUID) *TestQuestionPointUpdateOne {
	if u != nil {
		tqpuo.SetQuestionID(*u)
	}
	return tqpuo
}

// SetPoints sets the "points" field.
func (tqpuo *TestQuestionPointUpdateOne) SetPoints(i int) *TestQuestionPointUpdateOne {
	tqpuo.mutation.ResetPoints()
	tqpuo.mutation.SetPoints(i)
	return tqpuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (tqpuo *TestQuestionPointUpdateOne) SetNillablePoints(i *int) *TestQuestionPointUpdateOne {
	if i != nil {
		tqpuo.SetPoints(*i)
	}
	return tqpuo
}

// AddPoints adds i to the "points" field.
func (tqpuo *TestQuestionPointUpdateOne) AddPoints(i int) *TestQuestionPointUpdateOne {
	tqpuo.mutation.AddPoints(i)
	return tqpuo
}

// SetTest sets the "test" edge to the Test entity.
func (tqpuo *TestQuestionPointUpdateOne) SetTest(t *Test) *TestQuestionPointUpdateOne {
	return tqpuo.SetTestID(t.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tqpuo *TestQuestionPointUpdateOne) SetQuestion(q *Question) *TestQuestionPointUpdateOne {
	return tqpuo.SetQuestionID(q.ID)
}

// Mutation returns the TestQuestionPointMutation object of the builder.
func (tqpuo *TestQuestionPointUpdateOne) Mutation() *TestQuestionPointMutation {
	return tqpuo.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tqpuo *TestQuestionPointUpdateOne) ClearTest() *TestQuestionPointUpdateOne {
	tqpuo.mutation.ClearTest()
	return tqpuo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (tqpuo *TestQuestionPointUpdateOne) ClearQuestion() *TestQuestionPointUpdateOne {
	tqpuo.mutation.ClearQuestion()
	return tqpuo
}

// Where appends a list predicates to the TestQuestionPointUpdate builder.
func (tqpuo *TestQuestionPointUpdateOne) Where(ps ...predicate.TestQuestionPoint) *TestQuestionPointUpdateOne {
	tqpuo.mutation.Where(ps...)
	return tqpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tqpuo *TestQuestionPointUpdateOne) Select(field string, fields ...string) *TestQuestionPointUpdateOne {
	tqpuo.fields = append([]string{field}, fields...)
	return tqpuo
}

// Save executes the query and returns the updated TestQuestionPoint entity.
func (tqpuo *TestQuestionPointUpdateOne) Save(ctx context.Context) (*TestQuestionPoint, error) {
	if err := tqpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tqpuo.sqlSave, tqpuo.mutation, tqpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqpuo *TestQuestionPointUpdateOne) SaveX(ctx context.Context) *TestQuestionPoint {
	node, err := tqpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tqpuo *TestQuestionPointUpdateOne) Exec(ctx context.Context) error {
	_, err := tqpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqpuo *TestQuestionPointUpdateOne) ExecX(ctx context.Context) {
	if err := tqpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqpuo *TestQuestionPointUpdateOne) defaults() error {
	if _, ok := tqpuo.mutation.UpdatedAt(); !ok {
		if testquestionpoint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testquestionpoint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testquestionpoint.UpdateDefaultUpdatedAt()
		tqpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tqpuo *TestQuestionPointUpdateOne) check() error {
	if tqpuo.mutation.TestCleared() && len(tqpuo.mutation.TestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionPoint.test"`)
	}
	if tqpuo.mutation.QuestionCleared() && len(tqpuo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestQuestionPoint.question"`)
	}
	return nil
}

func (tqpuo *TestQuestionPointUpdateOne) sqlSave(ctx context.Context) (_node *TestQuestionPoint, err error) {
	if err := tqpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testquestionpoint.Table, testquestionpoint.Columns, sqlgraph.NewFieldSpec(testquestionpoint.FieldID, field.TypeUUID))
	id, ok := tqpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestQuestionPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tqpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testquestionpoint.FieldID)
		for _, f := range fields {
			if !testquestionpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testquestionpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tqpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqpuo.mutation.CreatedAt(); ok {
		_spec.SetField(testquestionpoint.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tqpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testquestionpoint.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tqpuo.mutation.DeletedAt(); ok {
		_spec.SetField(testquestionpoint.FieldDeletedAt, field.TypeTime, value)
	}
	if tqpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(testquestionpoint.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tqpuo.mutation.Points(); ok {
		_spec.SetField(testquestionpoint.FieldPoints, field.TypeInt, value)
	}
	if value, ok := tqpuo.mutation.AddedPoints(); ok {
		_spec.AddField(testquestionpoint.FieldPoints, field.TypeInt, value)
	}
	if tqpuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.TestTable,
			Columns: []string{testquestionpoint.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqpuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.TestTable,
			Columns: []string{testquestionpoint.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tqpuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.QuestionTable,
			Columns: []string{testquestionpoint.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tqpuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testquestionpoint.QuestionTable,
			Columns: []string{testquestionpoint.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestQuestionPoint{config: tqpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tqpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testquestionpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tqpuo.mutation.done = true
	return _node, nil
}
