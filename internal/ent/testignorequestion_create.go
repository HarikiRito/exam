// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent/question"
	"template/internal/ent/test"
	"template/internal/ent/testignorequestion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TestIgnoreQuestionCreate is the builder for creating a TestIgnoreQuestion entity.
type TestIgnoreQuestionCreate struct {
	config
	mutation *TestIgnoreQuestionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tiqc *TestIgnoreQuestionCreate) SetCreatedAt(t time.Time) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetCreatedAt(t)
	return tiqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiqc *TestIgnoreQuestionCreate) SetNillableCreatedAt(t *time.Time) *TestIgnoreQuestionCreate {
	if t != nil {
		tiqc.SetCreatedAt(*t)
	}
	return tiqc
}

// SetUpdatedAt sets the "updated_at" field.
func (tiqc *TestIgnoreQuestionCreate) SetUpdatedAt(t time.Time) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetUpdatedAt(t)
	return tiqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tiqc *TestIgnoreQuestionCreate) SetNillableUpdatedAt(t *time.Time) *TestIgnoreQuestionCreate {
	if t != nil {
		tiqc.SetUpdatedAt(*t)
	}
	return tiqc
}

// SetDeletedAt sets the "deleted_at" field.
func (tiqc *TestIgnoreQuestionCreate) SetDeletedAt(t time.Time) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetDeletedAt(t)
	return tiqc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tiqc *TestIgnoreQuestionCreate) SetNillableDeletedAt(t *time.Time) *TestIgnoreQuestionCreate {
	if t != nil {
		tiqc.SetDeletedAt(*t)
	}
	return tiqc
}

// SetTestID sets the "test_id" field.
func (tiqc *TestIgnoreQuestionCreate) SetTestID(u uuid.UUID) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetTestID(u)
	return tiqc
}

// SetQuestionID sets the "question_id" field.
func (tiqc *TestIgnoreQuestionCreate) SetQuestionID(u uuid.UUID) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetQuestionID(u)
	return tiqc
}

// SetReason sets the "reason" field.
func (tiqc *TestIgnoreQuestionCreate) SetReason(s string) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetReason(s)
	return tiqc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (tiqc *TestIgnoreQuestionCreate) SetNillableReason(s *string) *TestIgnoreQuestionCreate {
	if s != nil {
		tiqc.SetReason(*s)
	}
	return tiqc
}

// SetID sets the "id" field.
func (tiqc *TestIgnoreQuestionCreate) SetID(u uuid.UUID) *TestIgnoreQuestionCreate {
	tiqc.mutation.SetID(u)
	return tiqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tiqc *TestIgnoreQuestionCreate) SetNillableID(u *uuid.UUID) *TestIgnoreQuestionCreate {
	if u != nil {
		tiqc.SetID(*u)
	}
	return tiqc
}

// SetTest sets the "test" edge to the Test entity.
func (tiqc *TestIgnoreQuestionCreate) SetTest(t *Test) *TestIgnoreQuestionCreate {
	return tiqc.SetTestID(t.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (tiqc *TestIgnoreQuestionCreate) SetQuestion(q *Question) *TestIgnoreQuestionCreate {
	return tiqc.SetQuestionID(q.ID)
}

// Mutation returns the TestIgnoreQuestionMutation object of the builder.
func (tiqc *TestIgnoreQuestionCreate) Mutation() *TestIgnoreQuestionMutation {
	return tiqc.mutation
}

// Save creates the TestIgnoreQuestion in the database.
func (tiqc *TestIgnoreQuestionCreate) Save(ctx context.Context) (*TestIgnoreQuestion, error) {
	if err := tiqc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tiqc.sqlSave, tiqc.mutation, tiqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tiqc *TestIgnoreQuestionCreate) SaveX(ctx context.Context) *TestIgnoreQuestion {
	v, err := tiqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tiqc *TestIgnoreQuestionCreate) Exec(ctx context.Context) error {
	_, err := tiqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiqc *TestIgnoreQuestionCreate) ExecX(ctx context.Context) {
	if err := tiqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiqc *TestIgnoreQuestionCreate) defaults() error {
	if _, ok := tiqc.mutation.CreatedAt(); !ok {
		if testignorequestion.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testignorequestion.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testignorequestion.DefaultCreatedAt()
		tiqc.mutation.SetCreatedAt(v)
	}
	if _, ok := tiqc.mutation.UpdatedAt(); !ok {
		if testignorequestion.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testignorequestion.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testignorequestion.DefaultUpdatedAt()
		tiqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tiqc.mutation.ID(); !ok {
		if testignorequestion.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testignorequestion.DefaultID (forgotten import ent/runtime?)")
		}
		v := testignorequestion.DefaultID()
		tiqc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tiqc *TestIgnoreQuestionCreate) check() error {
	if _, ok := tiqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestIgnoreQuestion.created_at"`)}
	}
	if _, ok := tiqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestIgnoreQuestion.updated_at"`)}
	}
	if _, ok := tiqc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "TestIgnoreQuestion.test_id"`)}
	}
	if _, ok := tiqc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "TestIgnoreQuestion.question_id"`)}
	}
	if len(tiqc.mutation.TestIDs()) == 0 {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required edge "TestIgnoreQuestion.test"`)}
	}
	if len(tiqc.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "TestIgnoreQuestion.question"`)}
	}
	return nil
}

func (tiqc *TestIgnoreQuestionCreate) sqlSave(ctx context.Context) (*TestIgnoreQuestion, error) {
	if err := tiqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tiqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tiqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tiqc.mutation.id = &_node.ID
	tiqc.mutation.done = true
	return _node, nil
}

func (tiqc *TestIgnoreQuestionCreate) createSpec() (*TestIgnoreQuestion, *sqlgraph.CreateSpec) {
	var (
		_node = &TestIgnoreQuestion{config: tiqc.config}
		_spec = sqlgraph.NewCreateSpec(testignorequestion.Table, sqlgraph.NewFieldSpec(testignorequestion.FieldID, field.TypeUUID))
	)
	if id, ok := tiqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tiqc.mutation.CreatedAt(); ok {
		_spec.SetField(testignorequestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tiqc.mutation.UpdatedAt(); ok {
		_spec.SetField(testignorequestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tiqc.mutation.DeletedAt(); ok {
		_spec.SetField(testignorequestion.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tiqc.mutation.Reason(); ok {
		_spec.SetField(testignorequestion.FieldReason, field.TypeString, value)
		_node.Reason = &value
	}
	if nodes := tiqc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.TestTable,
			Columns: []string{testignorequestion.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(test.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tiqc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testignorequestion.QuestionTable,
			Columns: []string{testignorequestion.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestIgnoreQuestionCreateBulk is the builder for creating many TestIgnoreQuestion entities in bulk.
type TestIgnoreQuestionCreateBulk struct {
	config
	err      error
	builders []*TestIgnoreQuestionCreate
}

// Save creates the TestIgnoreQuestion entities in the database.
func (tiqcb *TestIgnoreQuestionCreateBulk) Save(ctx context.Context) ([]*TestIgnoreQuestion, error) {
	if tiqcb.err != nil {
		return nil, tiqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tiqcb.builders))
	nodes := make([]*TestIgnoreQuestion, len(tiqcb.builders))
	mutators := make([]Mutator, len(tiqcb.builders))
	for i := range tiqcb.builders {
		func(i int, root context.Context) {
			builder := tiqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestIgnoreQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tiqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tiqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tiqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tiqcb *TestIgnoreQuestionCreateBulk) SaveX(ctx context.Context) []*TestIgnoreQuestion {
	v, err := tiqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tiqcb *TestIgnoreQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := tiqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiqcb *TestIgnoreQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := tiqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
