package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/test_session"
	"template/internal/graph/model"

	"github.com/google/uuid"
)

// CreateTestSession is the resolver for the createTestSession field.
func (r *mutationResolver) CreateTestSession(ctx context.Context, input model.CreateTestSessionInput) (*model.TestSession, error) {
	// Get user ID from auth context
	_, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	session, err := test_session.CreateTestSession(ctx, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// DeleteTestSession is the resolver for the deleteTestSession field.
func (r *mutationResolver) DeleteTestSession(ctx context.Context, id uuid.UUID) (bool, error) {
	return test_session.DeleteTestSession(ctx, id)
}

// SubmitTestSession is the resolver for the submitTestSession field.
func (r *mutationResolver) SubmitTestSession(ctx context.Context, sessionID uuid.UUID, input model.SubmitTestSessionInput) (*model.TestSession, error) {
	// Get current user from context
	userID, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthorized: %w", err)
	}

	// Submit the test session
	session, err := test_session.SubmitTestSession(ctx, userID, sessionID, input)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return model.ConvertTestSessionToModel(session), nil
}

// StartTestSession is the resolver for the startTestSession field.
func (r *mutationResolver) StartTestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	// Get current user from context
	userID, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthorized: %w", err)
	}

	// Start the test session
	session, err := test_session.StartTestSession(ctx, userID, id)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return model.ConvertTestSessionToModel(session), nil
}

// TestSession is the resolver for the testSession field.
func (r *queryResolver) TestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	session, err := test_session.GetTestSessionByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *testSessionResolver) User(ctx context.Context, obj *model.TestSession) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}
func (r *testSessionResolver) Test(ctx context.Context, obj *model.TestSession) (*model.Test, error) {
	panic(fmt.Errorf("not implemented: Test - test"))
}
func (r *Resolver) TestSession() TestSessionResolver { return &testSessionResolver{r} }
type testSessionResolver struct{ *Resolver }
*/
