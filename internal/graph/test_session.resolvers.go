package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"template/internal/features/permission"
	"template/internal/features/test_session"
	"template/internal/graph/dataloader"
	"template/internal/graph/model"
	"template/internal/shared/utilities/slice"

	"github.com/google/uuid"
)

// CreateTestSession is the resolver for the createTestSession field.
func (r *mutationResolver) CreateTestSession(ctx context.Context, input model.CreateTestSessionInput) (*model.TestSession, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.PermissionSessionCreate,
	})
	if err != nil {
		return nil, err
	}

	if input.UserID == nil {
		input.UserID = &userID
	}

	session, err := test_session.CreateTestSession(ctx, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// DeleteTestSession is the resolver for the deleteTestSession field.
func (r *mutationResolver) DeleteTestSession(ctx context.Context, id uuid.UUID) (bool, error) {
	_, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.PermissionSessionDelete,
	})
	if err != nil {
		return false, err
	}

	return test_session.DeleteTestSession(ctx, id)
}

// SubmitTestSession is the resolver for the submitTestSession field.
func (r *mutationResolver) SubmitTestSession(ctx context.Context, sessionID uuid.UUID, input model.SubmitTestSessionInput) (*model.TestSession, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.PermissionSessionUpdate,
	})
	if err != nil {
		return nil, err
	}

	// Submit the test session
	session, err := test_session.SubmitTestSession(ctx, userID, sessionID, input)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return model.ConvertTestSessionToModel(session), nil
}

// StartTestSession is the resolver for the startTestSession field.
func (r *mutationResolver) StartTestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	userID, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.PermissionSessionUpdate,
	})
	if err != nil {
		return nil, err
	}

	// Start the test session
	session, err := test_session.StartTestSession(ctx, userID, id)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return model.ConvertTestSessionToModel(session), nil
}

// TestSession is the resolver for the testSession field.
func (r *queryResolver) TestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	_, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.PermissionSessionRead,
	})
	if err != nil {
		return nil, err
	}

	session, err := test_session.GetTestSessionByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// PaginatedTestSessions is the resolver for the paginatedTestSessions field.
func (r *queryResolver) PaginatedTestSessions(ctx context.Context, paginationInput *model.PaginationInput) (*model.PaginatedTestSession, error) {
	userId, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.PermissionSessionRead,
	})
	if err != nil {
		return nil, err
	}

	result, err := test_session.PaginatedTestSessions(ctx, userId, paginationInput)
	if err != nil {
		return nil, err
	}

	items := slice.Map(result.Items, model.ConvertTestSessionToModel)
	pagination := &model.Pagination{
		CurrentPage:     result.CurrentPage,
		TotalPages:      result.TotalPages,
		TotalItems:      result.TotalItems,
		HasNextPage:     result.HasNextPage,
		HasPreviousPage: result.HasPrevPage,
	}

	return &model.PaginatedTestSession{
		Pagination: pagination,
		Items:      items,
	}, nil
}

// Test is the resolver for the test field.
func (r *testSessionResolver) Test(ctx context.Context, obj *model.TestSession) (*model.Test, error) {
	return dataloader.GetTest(ctx, obj.TestID)
}

// Questions is the resolver for the questions field.
func (r *testSessionResolver) Questions(ctx context.Context, obj *model.TestSession) ([]*model.Question, error) {
	return dataloader.GetQuestionsBySessionID(ctx, obj.ID)
}

// OrderedQuestions is the resolver for the orderedQuestions field.
func (r *testSessionResolver) OrderedQuestions(ctx context.Context, obj *model.TestSession) ([]*model.QuestionOrder, error) {
	return dataloader.GetOrderedQuestionsBySessionID(ctx, obj.ID)
}

// TestSession returns TestSessionResolver implementation.
func (r *Resolver) TestSession() TestSessionResolver { return &testSessionResolver{r} }

type testSessionResolver struct{ *Resolver }
