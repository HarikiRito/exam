package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/test_session"
	"template/internal/graph/model"

	"github.com/google/uuid"
)

// CreateTestSession is the resolver for the createTestSession field.
func (r *mutationResolver) CreateTestSession(ctx context.Context, input model.CreateTestSessionInput) (*model.TestSession, error) {
	// Get user ID from auth context
	userID, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	session, err := test_session.CreateTestSession(ctx, userID, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// DeleteTestSession is the resolver for the deleteTestSession field.
func (r *mutationResolver) DeleteTestSession(ctx context.Context, id uuid.UUID) (bool, error) {
	return test_session.DeleteTestSession(ctx, id)
}

// CompleteTestSession is the resolver for the completeTestSession field.
func (r *mutationResolver) CompleteTestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	session, err := test_session.CompleteTestSession(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// TestSession is the resolver for the testSession field.
func (r *queryResolver) TestSession(ctx context.Context, id uuid.UUID) (*model.TestSession, error) {
	session, err := test_session.GetTestSessionByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestSessionToModel(session), nil
}

// User is the resolver for the user field.
func (r *testSessionResolver) User(ctx context.Context, obj *model.TestSession) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Test is the resolver for the test field.
func (r *testSessionResolver) Test(ctx context.Context, obj *model.TestSession) (*model.Test, error) {
	panic(fmt.Errorf("not implemented: Test - test"))
}

// CourseSection is the resolver for the courseSection field.
func (r *testSessionResolver) CourseSection(ctx context.Context, obj *model.TestSession) (*model.CourseSection, error) {
	panic(fmt.Errorf("not implemented: CourseSection - courseSection"))
}

// UserQuestionAnswers is the resolver for the userQuestionAnswers field.
func (r *testSessionResolver) UserQuestionAnswers(ctx context.Context, obj *model.TestSession) ([]*model.UserQuestionAnswer, error) {
	panic(fmt.Errorf("not implemented: UserQuestionAnswers - userQuestionAnswers"))
}

// TestSession returns TestSessionResolver implementation.
func (r *Resolver) TestSession() TestSessionResolver { return &testSessionResolver{r} }

type testSessionResolver struct{ *Resolver }
