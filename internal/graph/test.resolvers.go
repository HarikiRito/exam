package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/test"
	"template/internal/graph/model"

	"github.com/google/uuid"
)

// CreateTest is the resolver for the createTest field.
func (r *mutationResolver) CreateTest(ctx context.Context, input model.CreateTestInput) (*model.Test, error) {
	entTest, err := test.CreateTest(ctx, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestToModel(entTest), nil
}

// UpdateTest is the resolver for the updateTest field.
func (r *mutationResolver) UpdateTest(ctx context.Context, id uuid.UUID, input model.UpdateTestInput) (*model.Test, error) {
	entTest, err := test.UpdateTest(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestToModel(entTest), nil
}

// DeleteTest is the resolver for the deleteTest field.
func (r *mutationResolver) DeleteTest(ctx context.Context, id uuid.UUID) (bool, error) {
	return test.DeleteTest(ctx, id)
}

// AddMultiCollectionToTest is the resolver for the addMultiCollectionToTest field.
func (r *mutationResolver) AddMultiCollectionToTest(ctx context.Context, input model.AddMultiCollectionToTestInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return test.AddMultiCollection(ctx, userId, input)
}

// BatchUpdateQuestionPoints is the resolver for the batchUpdateQuestionPoints field.
func (r *mutationResolver) BatchUpdateQuestionPoints(ctx context.Context, input model.BatchUpdateQuestionPointsInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return test.BatchUpdateQuestionPoints(ctx, userId, input)
}

// UpdateQuestionPointsByCollection is the resolver for the updateQuestionPointsByCollection field.
func (r *mutationResolver) UpdateQuestionPointsByCollection(ctx context.Context, input model.UpdateQuestionPointsByCollectionInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return test.UpdateQuestionPointsByCollection(ctx, userId, input)
}

// UpdateTestQuestionRequirement is the resolver for the updateTestQuestionRequirement field.
func (r *mutationResolver) UpdateTestQuestionRequirement(ctx context.Context, testID uuid.UUID, input []*model.UpdateTestQuestionRequirementInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	// Convert []*model.UpdateTestQuestionRequirementInput to []model.UpdateTestQuestionRequirementInput
	convertedInput := make([]model.UpdateTestQuestionRequirementInput, len(input))
	for i, item := range input {
		if item != nil {
			convertedInput[i] = *item
		}
	}
	return test.UpdateTestQuestionRequirement(ctx, userId, testID, convertedInput)
}

// BatchIgnoreQuestions is the resolver for the batchIgnoreQuestions field.
func (r *mutationResolver) BatchIgnoreQuestions(ctx context.Context, input model.BatchIgnoreQuestionsInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return test.BatchIgnoreQuestions(ctx, userId, input)
}

// BatchDeleteQuestionPoints is the resolver for the batchDeleteQuestionPoints field.
func (r *mutationResolver) BatchDeleteQuestionPoints(ctx context.Context, input model.BatchDeleteQuestionPointsInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return test.BatchDeleteQuestionPoints(ctx, userId, input)
}

// Test is the resolver for the test field.
func (r *queryResolver) Test(ctx context.Context, id uuid.UUID) (*model.Test, error) {
	entTest, err := test.GetTestByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertTestToModel(entTest), nil
}

// PaginatedTests is the resolver for the paginatedTests field.
func (r *queryResolver) PaginatedTests(ctx context.Context, paginationInput *model.PaginationInput) (*model.PaginatedTest, error) {
	paginated, err := test.PaginatedTests(ctx, paginationInput)
	if err != nil {
		return nil, err
	}

	items := make([]*model.Test, len(paginated.Items))
	for i, entTest := range paginated.Items {
		items[i] = model.ConvertTestToModel(entTest)
	}

	// Construct the pagination info manually using the fields from common.PaginatedResult and mapping HasPrevPage to HasPreviousPage
	pagination := &model.Pagination{
		CurrentPage:     paginated.CurrentPage,
		TotalPages:      paginated.TotalPages,
		TotalItems:      paginated.TotalItems,
		HasNextPage:     paginated.HasNextPage,
		HasPreviousPage: paginated.HasPrevPage,
	}

	return &model.PaginatedTest{
		Pagination: pagination,
		Items:      items,
	}, nil
}

// CourseSection is the resolver for the courseSection field.
func (r *testResolver) CourseSection(ctx context.Context, obj *model.Test) (*model.CourseSection, error) {
	panic(fmt.Errorf("not implemented: CourseSection - courseSection"))
}

// Course is the resolver for the course field.
func (r *testResolver) Course(ctx context.Context, obj *model.Test) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: Course - course"))
}

// QuestionCollections is the resolver for the questionCollections field.
func (r *testResolver) QuestionCollections(ctx context.Context, obj *model.Test) ([]*model.QuestionCollection, error) {
	panic(fmt.Errorf("not implemented: QuestionCollections - questionCollections"))
}

// TestQuestionCounts is the resolver for the testQuestionCounts field.
func (r *testResolver) TestQuestionCounts(ctx context.Context, obj *model.Test) ([]*model.TestQuestionCount, error) {
	panic(fmt.Errorf("not implemented: TestQuestionCounts - testQuestionCounts"))
}

// TestQuestionPoints is the resolver for the testQuestionPoints field.
func (r *testResolver) TestQuestionPoints(ctx context.Context, obj *model.Test) ([]*model.TestQuestionPoint, error) {
	panic(fmt.Errorf("not implemented: TestQuestionPoints - testQuestionPoints"))
}

// TestIgnoreQuestions is the resolver for the testIgnoreQuestions field.
func (r *testResolver) TestIgnoreQuestions(ctx context.Context, obj *model.Test) ([]*model.TestIgnoreQuestion, error) {
	panic(fmt.Errorf("not implemented: TestIgnoreQuestions - testIgnoreQuestions"))
}

// Test returns TestResolver implementation.
func (r *Resolver) Test() TestResolver { return &testResolver{r} }

type testResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) UpdateQuestionPoints(ctx context.Context, input model.UpdateQuestionPointsInput) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return test.UpdateQuestionPoints(ctx, userId, input)
}
*/
