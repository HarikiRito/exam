package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/todo"
	"template/internal/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todoRes, err := todo.CreateTodo(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.Todo{
		ID:   todoRes.ID.String(),
		Text: todoRes.Title,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// Extract the HTTP request from the context
	userID, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	// Now you can access headers
	fmt.Println("userID", userID)

	// Rest of your resolver logic
	return []*model.Todo{
		{
			ID:   "2",
			Text: "Buy groceries",
		},
	}, nil
}
