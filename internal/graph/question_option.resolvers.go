package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/permission"
	"template/internal/features/question_option"
	"template/internal/graph/model"

	"github.com/google/uuid"
)

// CreateQuestionOption is the resolver for the createQuestionOption field.
func (r *mutationResolver) CreateQuestionOption(ctx context.Context, input model.CreateQuestionOptionInput) (*model.QuestionOption, error) {
	userId, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.QuestionOptionCreate,
	})
	if err != nil {
		return nil, err
	}

	option, err := question_option.CreateQuestionOption(ctx, userId, input)
	if err != nil {
		return nil, err
	}

	return model.ConvertQuestionOptionToModel(option), nil
}

// UpdateQuestionOption is the resolver for the updateQuestionOption field.
func (r *mutationResolver) UpdateQuestionOption(ctx context.Context, id uuid.UUID, input model.UpdateQuestionOptionInput) (*model.QuestionOption, error) {
	userId, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.QuestionOptionUpdate,
	})
	if err != nil {
		return nil, err
	}

	option, err := question_option.UpdateQuestionOption(ctx, userId, id, input)
	if err != nil {
		return nil, err
	}

	return model.ConvertQuestionOptionToModel(option), nil
}

// DeleteQuestionOption is the resolver for the deleteQuestionOption field.
func (r *mutationResolver) DeleteQuestionOption(ctx context.Context, id uuid.UUID) (bool, error) {
	userId, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.QuestionOptionDelete,
	})
	if err != nil {
		return false, err
	}

	return question_option.DeleteQuestionOption(ctx, userId, id)
}

// QuestionOption is the resolver for the questionOption field.
func (r *queryResolver) QuestionOption(ctx context.Context, id uuid.UUID) (*model.QuestionOption, error) {
	userId, err := CheckUserPermissions(ctx, []permission.Permission{
		permission.QuestionOptionRead,
	})
	if err != nil {
		return nil, err
	}

	option, err := question_option.GetQuestionOptionByID(ctx, userId, id)
	if err != nil {
		return nil, err
	}

	return model.ConvertQuestionOptionToModel(option), nil
}

// Question is the resolver for the question field.
func (r *questionOptionResolver) Question(ctx context.Context, obj *model.QuestionOption) (*model.Question, error) {
	panic(fmt.Errorf("not implemented: Question - question"))
}

// QuestionOption returns QuestionOptionResolver implementation.
func (r *Resolver) QuestionOption() QuestionOptionResolver { return &questionOptionResolver{r} }

type questionOptionResolver struct{ *Resolver }
