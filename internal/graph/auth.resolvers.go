package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"template/internal/features/auth"
	"template/internal/features/jwt"
	"template/internal/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.Auth, error) {
	payload := map[string]interface{}{
		"email": input.Email,
	}
	tokenPair, err := jwt.GenerateTokenPair("course123", payload)

	if err != nil {
		return nil, err
	}
	return &model.Auth{
		AccessToken:  tokenPair.AccessToken,
		RefreshToken: tokenPair.RefreshToken,
	}, nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.Auth, error) {
	tokenPair, err := auth.Register(ctx, input)
	if err != nil {
		return nil, err
	}
	return &model.Auth{
		AccessToken:  tokenPair.AccessToken,
		RefreshToken: tokenPair.RefreshToken,
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
