package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"template/internal/features/auth"
	"template/internal/features/jwt"
	"template/internal/graph/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.Auth, error) {
	tokenPair, err := auth.Register(ctx, input)
	if err != nil {
		return nil, err
	}
	return &model.Auth{
		AccessToken:  tokenPair.AccessToken,
		RefreshToken: tokenPair.RefreshToken,
	}, nil
}

// RenewToken is the resolver for the renewToken field.
func (r *mutationResolver) RenewToken(ctx context.Context, refreshToken string) (*model.Auth, error) {
	tokenPair, err := jwt.RefreshTokenPair(refreshToken)
	if err != nil {
		return nil, errors.New("invalid refresh token")
	}
	return &model.Auth{
		AccessToken:  tokenPair.AccessToken,
		RefreshToken: tokenPair.RefreshToken,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	currentUser, err := GetUserFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	return currentUser, nil
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, input model.LoginInput) (*model.Auth, error) {
	user, err := auth.Login(ctx, input)
	if err != nil {
		return nil, err
	}

	// Generate token pair after successful authentication
	tokenPair, err := jwt.GenerateTokenPair(user.ID.String(), map[string]interface{}{
		"email":    user.Email,
		"username": user.Username,
	})
	if err != nil {
		return nil, err
	}

	return &model.Auth{
		AccessToken:  tokenPair.AccessToken,
		RefreshToken: tokenPair.RefreshToken,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
