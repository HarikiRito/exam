package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"template/internal/features/course_section"
	"template/internal/graph/model"
	"template/internal/shared/utilities/slice"

	"github.com/google/uuid"
)

// CreateCourseSection is the resolver for the createCourseSection field.
func (r *mutationResolver) CreateCourseSection(ctx context.Context, input model.CreateCourseSectionInput) (*model.CourseSection, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	cs, err := course_section.CreateCourseSection(ctx, userId, input.CourseID, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertCourseSectionToModel(cs), nil
}

// UpdateCourseSection is the resolver for the updateCourseSection field.
func (r *mutationResolver) UpdateCourseSection(ctx context.Context, id uuid.UUID, input model.UpdateCourseSectionInput) (*model.CourseSection, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}
	courseSection, err := course_section.UpdateCourseSection(ctx, userId, id, input)
	if err != nil {
		return nil, err
	}
	return model.ConvertCourseSectionToModel(courseSection), nil
}

// RemoveCourseSection is the resolver for the removeCourseSection field.
func (r *mutationResolver) RemoveCourseSection(ctx context.Context, id uuid.UUID) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return course_section.RemoveCourseSection(ctx, userId, id)
}

// CourseSection is the resolver for the courseSection field.
func (r *queryResolver) CourseSection(ctx context.Context, id uuid.UUID) (*model.CourseSection, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}
	cs, err := course_section.GetCourseSectionByID(ctx, userId, id)
	if err != nil {
		return nil, err
	}
	return model.ConvertCourseSectionToModel(cs), nil
}

// CourseSectionsByCourseID is the resolver for the courseSectionsByCourseId field.
func (r *queryResolver) CourseSectionsByCourseID(ctx context.Context, courseID uuid.UUID, filter *model.CourseSectionFilterInput) ([]*model.CourseSection, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	sections, err := course_section.GetCourseSectionsByCourseID(ctx, userId, courseID, filter)
	if err != nil {
		return nil, err
	}

	return slice.Map(sections, model.ConvertCourseSectionToModel), nil
}
