package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"fmt"
	"template/internal/features/course"
	"template/internal/graph/model"
)

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.CreateCourseInput) (*model.Course, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	createdCourse, err := course.CreateCourse(ctx, userId, input)
	if err != nil {
		return nil, err
	}

	return &model.Course{
		ID:          createdCourse.ID.String(),
		Title:       createdCourse.Title,
		Description: createdCourse.Description,
	}, nil
}

// RemoveCourse is the resolver for the removeCourse field.
func (r *mutationResolver) RemoveCourse(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveCourse - removeCourse"))
}

// UpdateCourse is the resolver for the updateCourse field.
func (r *mutationResolver) UpdateCourse(ctx context.Context, id string, input model.UpdateCourseInput) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: UpdateCourse - updateCourse"))
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, id string) (*model.Course, error) {
	foundCourse, err := course.GetCourseByID(ctx, id)
	if err != nil {
		return nil, errors.New("course not found")
	}

	return &model.Course{
		ID:          foundCourse.ID.String(),
		Title:       foundCourse.Title,
		Description: foundCourse.Description,
	}, nil
}

// PaginatedCourses is the resolver for the paginatedCourses field.
func (r *queryResolver) PaginatedCourses(ctx context.Context, input *model.PaginationInput) (*model.PaginatedCourse, error) {
	panic(fmt.Errorf("not implemented: PaginatedCourses - paginatedCourses"))
}
