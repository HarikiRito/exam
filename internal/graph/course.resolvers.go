package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"fmt"
	"template/internal/ent"
	"template/internal/features/course"
	"template/internal/graph/dataloader"
	"template/internal/graph/model"
	"template/internal/shared/utilities/slice"
)

// Creator is the resolver for the creator field.
func (r *courseResolver) Creator(ctx context.Context, obj *model.Course) (*model.User, error) {
	return dataloader.GetUser(ctx, obj.CreatorID)
}

// Sections is the resolver for the sections field.
func (r *courseResolver) Sections(ctx context.Context, obj *model.Course) ([]*model.CourseSection, error) {
	panic(fmt.Errorf("not implemented: Sections - sections"))
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.CreateCourseInput) (*model.Course, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}

	createdCourse, err := course.CreateCourse(ctx, userId, input)
	if err != nil {
		return nil, err
	}

	return &model.Course{
		ID:          createdCourse.ID.String(),
		Title:       createdCourse.Title,
		Description: createdCourse.Description,
	}, nil
}

// RemoveCourse is the resolver for the removeCourse field.
func (r *mutationResolver) RemoveCourse(ctx context.Context, id string) (bool, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return false, err
	}
	return course.RemoveCourse(ctx, userId, id)
}

// UpdateCourse is the resolver for the updateCourse field.
func (r *mutationResolver) UpdateCourse(ctx context.Context, id string, input model.UpdateCourseInput) (*model.Course, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}
	updatedCourse, err := course.UpdateCourse(ctx, userId, id, input)
	if err != nil {
		return nil, err
	}
	return &model.Course{
		ID:          updatedCourse.ID.String(),
		Title:       updatedCourse.Title,
		Description: updatedCourse.Description,
	}, nil
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, id string) (*model.Course, error) {
	foundCourse, err := course.GetCourseByID(ctx, id)
	if err != nil {
		return nil, errors.New("course not found")
	}

	return &model.Course{
		ID:          foundCourse.ID.String(),
		Title:       foundCourse.Title,
		Description: foundCourse.Description,
	}, nil
}

// PaginatedCourses is the resolver for the paginatedCourses field.
func (r *queryResolver) PaginatedCourses(ctx context.Context, input *model.PaginationInput) (*model.PaginatedCourse, error) {
	userId, err := GetUserIdFromRequestContext(ctx)
	if err != nil {
		return nil, err
	}
	paginatedCourse, err := course.PaginatedCourses(ctx, userId, input)
	if err != nil {
		return nil, err
	}
	items := slice.Map(paginatedCourse.Items, func(c *ent.Course) *model.Course {
		return &model.Course{
			ID:          c.ID.String(),
			Title:       c.Title,
			Description: c.Description,
			CreatorID:   c.CreatorID.String(),
		}
	})
	pagination := &model.Pagination{
		CurrentPage:     paginatedCourse.CurrentPage,
		TotalPages:      paginatedCourse.TotalPages,
		TotalItems:      paginatedCourse.TotalItems,
		HasNextPage:     paginatedCourse.HasNextPage,
		HasPreviousPage: paginatedCourse.HasPrevPage,
	}
	return &model.PaginatedCourse{
		Pagination: pagination,
		Items:      items,
	}, nil
}

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

type courseResolver struct{ *Resolver }
